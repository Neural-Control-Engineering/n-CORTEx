var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":false},"build":"ATTN","ref":false,"files":[{"name":"ATTN.cpp","type":"source","group":"model","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * ATTN.cpp\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include \"ATTN.h\"\n#include \"rtwtypes.h\"\n#include \"ATTN_private.h\"\n#include \"ATTN_cal.h\"\n#include <cstring>\n#include <cmath>\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n/* Named constants for MATLAB Function: '<S4>/MATLAB Function2' */\nconst int32_T ATTN_CALL_EVENT = -1;\n\n/* Named constants for MATLAB Function: '<Root>/MATLAB Function' */\nconst int32_T ATTN_CALL_EVENT_n = -1;\nconst real_T ATTN_RGND = 0.0;          /* real_T ground */\n\n/* Block signals (default storage) */\nB_ATTN_T ATTN_B;\n\n/* Block states (default storage) */\nDW_ATTN_T ATTN_DW;\n\n/* Real-time model */\nRT_MODEL_ATTN_T ATTN_M_ = RT_MODEL_ATTN_T();\nRT_MODEL_ATTN_T *const ATTN_M = &ATTN_M_;\n\n/* Forward declaration for local functions */\nstatic real_T ATTN_rand(void);\n\n/*\n * System initialize for atomic system:\n *    '<S4>/MATLAB Function2'\n *    '<S5>/MATLAB Function1'\n */\nvoid ATTN_MATLABFunction2_Init(DW_MATLABFunction2_ATTN_T *localDW)\n{\n  localDW->sfEvent = ATTN_CALL_EVENT;\n  localDW->t0_not_empty = false;\n  localDW->y0_not_empty = false;\n  localDW->is_active_c3_ATTN = 0U;\n}\n\n/*\n * Output and update for atomic system:\n *    '<S4>/MATLAB Function2'\n *    '<S5>/MATLAB Function1'\n */\nvoid ATTN_MATLABFunction2(real_T rtu_trigger, real_T rtu_duration, real_T\n  rtu_amp, real_T rtu_t, B_MATLABFunction2_ATTN_T *localB,\n  DW_MATLABFunction2_ATTN_T *localDW)\n{\n  real_T increment;\n  localDW->sfEvent = ATTN_CALL_EVENT;\n  increment = rtu_amp / (rtu_duration * 1000.0 / 2.0);\n  if (rtu_trigger != 0.0) {\n    localDW->t0 = rtu_t;\n    localDW->t0_not_empty = true;\n    localB->y = 0.0;\n    localDW->y0 = 0.0;\n    localDW->y0_not_empty = true;\n  } else if (localDW->t0_not_empty) {\n    real_T tmp;\n    tmp = rtu_t - localDW->t0;\n    if (tmp <= rtu_duration / 2.0) {\n      localB->y = localDW->y0 + increment;\n      localDW->y0 = localB->y;\n    } else if (tmp <= rtu_duration) {\n      localB->y = localDW->y0 - increment;\n      increment = localB->y;\n      if (increment > 0.0) {\n        localB->y = increment;\n      } else {\n        localB->y = 0.0;\n      }\n\n      localDW->y0 = localB->y;\n    } else {\n      localB->y = 0.0;\n    }\n  } else {\n    localB->y = 0.0;\n  }\n}\n\n/* Function for MATLAB Function: '<Root>/MATLAB Function' */\nstatic real_T ATTN_rand(void)\n{\n  real_T r;\n  uint32_T u[2];\n  if (ATTN_DW.method == 4U) {\n    int32_T k;\n    uint32_T mti;\n    uint32_T y;\n    k = static_cast<int32_T>(ATTN_DW.state / 127773U);\n    mti = (ATTN_DW.state - static_cast<uint32_T>(k) * 127773U) * 16807U;\n    y = 2836U * static_cast<uint32_T>(k);\n    if (mti < y) {\n      mti = ~(y - mti) & 2147483647U;\n    } else {\n      mti -= y;\n    }\n\n    r = static_cast<real_T>(mti) * 4.6566128752457969E-10;\n    ATTN_DW.state = mti;\n  } else if (ATTN_DW.method == 5U) {\n    uint32_T mti;\n    uint32_T y;\n    mti = 69069U * ATTN_DW.state_p[0] + 1234567U;\n    y = ATTN_DW.state_p[1] << 13 ^ ATTN_DW.state_p[1];\n    y ^= y >> 17;\n    y ^= y << 5;\n    ATTN_DW.state_p[0] = mti;\n    ATTN_DW.state_p[1] = y;\n    r = static_cast<real_T>(mti + y) * 2.328306436538696E-10;\n  } else {\n    /* ========================= COPYRIGHT NOTICE ============================ */\n    /*  This is a uniform (0,1) pseudorandom number generator based on:        */\n    /*                                                                         */\n    /*  A C-program for MT19937, with initialization improved 2002/1/26.       */\n    /*  Coded by Takuji Nishimura and Makoto Matsumoto.                        */\n    /*                                                                         */\n    /*  Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,      */\n    /*  All rights reserved.                                                   */\n    /*                                                                         */\n    /*  Redistribution and use in source and binary forms, with or without     */\n    /*  modification, are permitted provided that the following conditions     */\n    /*  are met:                                                               */\n    /*                                                                         */\n    /*    1. Redistributions of source code must retain the above copyright    */\n    /*       notice, this list of conditions and the following disclaimer.     */\n    /*                                                                         */\n    /*    2. Redistributions in binary form must reproduce the above copyright */\n    /*       notice, this list of conditions and the following disclaimer      */\n    /*       in the documentation and/or other materials provided with the     */\n    /*       distribution.                                                     */\n    /*                                                                         */\n    /*    3. The names of its contributors may not be used to endorse or       */\n    /*       promote products derived from this software without specific      */\n    /*       prior written permission.                                         */\n    /*                                                                         */\n    /*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    */\n    /*  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      */\n    /*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  */\n    /*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT  */\n    /*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  */\n    /*  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       */\n    /*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  */\n    /*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  */\n    /*  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    */\n    /*  (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE */\n    /*  OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */\n    /*                                                                         */\n    /* =============================   END   ================================= */\n    int32_T exitg1;\n    do {\n      int32_T k;\n      uint32_T mti;\n      exitg1 = 0;\n      for (k = 0; k < 2; k++) {\n        uint32_T y;\n        mti = ATTN_DW.state_k[624] + 1U;\n        if (mti >= 625U) {\n          for (int32_T kk = 0; kk < 227; kk++) {\n            mti = (ATTN_DW.state_k[kk + 1] & 2147483647U) | (ATTN_DW.state_k[kk]\n              & 2147483648U);\n            if ((mti & 1U) == 0U) {\n              mti >>= 1U;\n            } else {\n              mti = mti >> 1U ^ 2567483615U;\n            }\n\n            ATTN_DW.state_k[kk] = ATTN_DW.state_k[kk + 397] ^ mti;\n          }\n\n          for (int32_T kk = 0; kk < 396; kk++) {\n            mti = (ATTN_DW.state_k[kk + 227] & 2147483648U) |\n              (ATTN_DW.state_k[kk + 228] & 2147483647U);\n            if ((mti & 1U) == 0U) {\n              mti >>= 1U;\n            } else {\n              mti = mti >> 1U ^ 2567483615U;\n            }\n\n            ATTN_DW.state_k[kk + 227] = ATTN_DW.state_k[kk] ^ mti;\n          }\n\n          mti = (ATTN_DW.state_k[623] & 2147483648U) | (ATTN_DW.state_k[0] &\n            2147483647U);\n          if ((mti & 1U) == 0U) {\n            mti >>= 1U;\n          } else {\n            mti = mti >> 1U ^ 2567483615U;\n          }\n\n          ATTN_DW.state_k[623] = ATTN_DW.state_k[396] ^ mti;\n          mti = 1U;\n        }\n\n        y = ATTN_DW.state_k[static_cast<int32_T>(mti) - 1];\n        ATTN_DW.state_k[624] = mti;\n        y ^= y >> 11U;\n        y ^= y << 7U & 2636928640U;\n        y ^= y << 15U & 4022730752U;\n        u[k] = y >> 18U ^ y;\n      }\n\n      r = (static_cast<real_T>(u[0] >> 5U) * 6.7108864E+7 + static_cast<real_T>\n           (u[1] >> 6U)) * 1.1102230246251565E-16;\n      if (r == 0.0) {\n        boolean_T b_isvalid;\n        if ((ATTN_DW.state_k[624] >= 1U) && (ATTN_DW.state_k[624] < 625U)) {\n          boolean_T exitg2;\n          b_isvalid = false;\n          k = 1;\n          exitg2 = false;\n          while ((!exitg2) && (k < 625)) {\n            if (ATTN_DW.state_k[k - 1] == 0U) {\n              k++;\n            } else {\n              b_isvalid = true;\n              exitg2 = true;\n            }\n          }\n        } else {\n          b_isvalid = false;\n        }\n\n        if (!b_isvalid) {\n          mti = 5489U;\n          ATTN_DW.state_k[0] = 5489U;\n          for (k = 0; k < 623; k++) {\n            mti = ((mti >> 30U ^ mti) * 1812433253U + static_cast<uint32_T>(k))\n              + 1U;\n            ATTN_DW.state_k[k + 1] = mti;\n          }\n\n          ATTN_DW.state_k[624] = 624U;\n        }\n      } else {\n        exitg1 = 1;\n      }\n    } while (exitg1 == 0);\n  }\n\n  return r;\n}\n\n/* Model step function */\nvoid ATTN_step(void)\n{\n  real_T acc;\n  real_T tapsum;\n  int32_T cff;\n  int32_T dataIdx;\n  int32_T idxN;\n  int32_T j;\n\n  /* Memory: '<Root>/Memory8' */\n  ATTN_B.Memory8 = ATTN_DW.Memory8_PreviousInput;\n\n  /* Memory: '<Root>/Memory2' */\n  ATTN_B.Memory2 = ATTN_DW.Memory2_PreviousInput;\n\n  /* Memory: '<Root>/Memory1' */\n  ATTN_B.Memory1 = ATTN_DW.Memory1_PreviousInput;\n\n  /* Memory: '<Root>/Memory' */\n  ATTN_B.Memory = ATTN_DW.Memory_PreviousInput;\n\n  /* S-Function (sg_IO191_setup_s): '<Root>/Setup ' */\n\n  /* Level2 S-Function Block: '<Root>/Setup ' (sg_IO191_setup_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[0];\n    sfcnOutputs(rts,0);\n  }\n\n  /* S-Function (sg_IO191_ad_s): '<Root>/Analog input ' */\n\n  /* Level2 S-Function Block: '<Root>/Analog input ' (sg_IO191_ad_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[1];\n    sfcnOutputs(rts,0);\n  }\n\n  /* DiscreteFir: '<S1>/Generated Filter Block' */\n  idxN = ATTN_DW.GeneratedFilterBlock_circBuf;\n  cff = 1;\n  tapsum = ATTN_B.lickometer_piezo;\n  dataIdx = idxN + 4028;\n  if (dataIdx >= 4029) {\n    dataIdx -= 4029;\n  }\n\n  tapsum += ATTN_DW.GeneratedFilterBlock_states[dataIdx];\n  acc = tapsum * ATTN_cal->GeneratedFilterBlock_Coefficien[0];\n  for (j = 0; j < 2014; j++) {\n    dataIdx = j + idxN;\n    if (dataIdx >= 4029) {\n      dataIdx -= 4029;\n    }\n\n    tapsum = ATTN_DW.GeneratedFilterBlock_states[dataIdx];\n    dataIdx = (dataIdx - ((j + 1) << 1)) + 4029;\n    if (dataIdx >= 4029) {\n      dataIdx -= 4029;\n    }\n\n    tapsum += ATTN_DW.GeneratedFilterBlock_states[dataIdx];\n    acc += tapsum * ATTN_cal->GeneratedFilterBlock_Coefficien[cff];\n    cff++;\n  }\n\n  idxN--;\n  if (idxN < 0) {\n    idxN = 4028;\n  }\n\n  ATTN_DW.GeneratedFilterBlock_states[idxN] = ATTN_B.lickometer_piezo;\n\n  /* DiscreteFir: '<S1>/Generated Filter Block' */\n  ATTN_B.GeneratedFilterBlock = acc;\n\n  /* DiscreteFir: '<S1>/Generated Filter Block' */\n  ATTN_DW.GeneratedFilterBlock_circBuf = idxN;\n\n  /* Memory: '<Root>/Memory11' */\n  ATTN_B.Memory11 = ATTN_DW.Memory11_PreviousInput;\n\n  /* Memory: '<Root>/Memory7' */\n  ATTN_B.Memory7 = ATTN_DW.Memory7_PreviousInput;\n\n  /* MATLAB Function: '<Root>/MATLAB Function1' incorporates:\n   *  Constant: '<Root>/Thrd'\n   */\n  ATTN_DW.sfEvent_b = ATTN_CALL_EVENT_n;\n  if (std::abs(ATTN_B.GeneratedFilterBlock) > ATTN_cal->Thrd_Value) {\n    tapsum = ATTN_B.Memory11 + 1.0;\n    ATTN_B.y2 = ATTN_B.Memory7;\n  } else {\n    tapsum = 0.0;\n    ATTN_B.y2 = 0.0;\n  }\n\n  if ((tapsum > 20.0) && (ATTN_B.Memory7 == 0.0)) {\n    ATTN_B.Lick = 1.0;\n    ATTN_B.y2 = 1.0;\n  } else {\n    ATTN_B.Lick = 0.0;\n  }\n\n  ATTN_B.y1 = tapsum;\n\n  /* End of MATLAB Function: '<Root>/MATLAB Function1' */\n\n  /* Clock: '<Root>/Clock' */\n  ATTN_B.clock_time = ATTN_M->Timing.t[0];\n\n  /* Memory: '<Root>/Memory3' */\n  ATTN_B.Memory3 = ATTN_DW.Memory3_PreviousInput;\n\n  /* Memory: '<Root>/Memory4' */\n  ATTN_B.Memory4 = ATTN_DW.Memory4_PreviousInput;\n\n  /* Memory: '<Root>/Memory9' */\n  ATTN_B.Memory9 = ATTN_DW.Memory9_PreviousInput;\n\n  /* Memory: '<Root>/Memory5' */\n  ATTN_B.Memory5 = ATTN_DW.Memory5_PreviousInput;\n\n  /* Memory: '<Root>/Memory6' */\n  ATTN_B.Memory6 = ATTN_DW.Memory6_PreviousInput;\n\n  /* Memory: '<Root>/Memory10' */\n  ATTN_B.Memory10 = ATTN_DW.Memory10_PreviousInput;\n\n  /* MATLAB Function: '<Root>/MATLAB Function' incorporates:\n   *  Constant: '<Root>/rewardDuration'\n   *  Constant: '<Root>/targetSide'\n   *  Constant: '<Root>/trainingStage'\n   *  Constant: '<Root>/triangleDuration'\n   */\n  ATTN_DW.sfEvent_e = ATTN_CALL_EVENT_n;\n  ATTN_B.counter_out = ATTN_B.Memory4 + 1.0;\n  switch (static_cast<int32_T>(ATTN_cal->trainingStage)) {\n   case 1:\n    switch (static_cast<int32_T>(ATTN_B.Memory2)) {\n     case 1:\n      ATTN_B.npxlsAcq_out = 1.0;\n      ATTN_B.state_out = 2.0;\n      ATTN_B.localTime_out = 1.0;\n      ATTN_B.trialNum_out = 1.0;\n      ATTN_B.right_trigger_out = 0.0;\n      ATTN_B.left_trigger_out = 0.0;\n      ATTN_B.numLicks_out = 0.0;\n      tapsum = 4.0;\n      while ((tapsum >= 9.0) || (tapsum <= 5.0)) {\n        tapsum = ATTN_rand();\n        tapsum = std::log(tapsum);\n        tapsum *= -7.0;\n      }\n\n      ATTN_B.delay_out = ATTN_B.clock_time + tapsum;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = 0.0;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 2:\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n      } else {\n        ATTN_B.state_out = 3.0;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 3:\n      if (ATTN_rand() <= 0.8) {\n        if (ATTN_cal->targetSide != 0.0) {\n          ATTN_B.right_trigger_out = 1.0;\n          ATTN_B.left_trigger_out = 0.0;\n        } else {\n          ATTN_B.left_trigger_out = 1.0;\n          ATTN_B.right_trigger_out = 0.0;\n        }\n\n        ATTN_B.was_target_out = 0.0;\n      } else {\n        if (ATTN_cal->targetSide != 0.0) {\n          ATTN_B.left_trigger_out = 1.0;\n          ATTN_B.right_trigger_out = 0.0;\n        } else {\n          ATTN_B.right_trigger_out = 1.0;\n          ATTN_B.left_trigger_out = 0.0;\n        }\n\n        ATTN_B.was_target_out = 1.0;\n      }\n\n      ATTN_B.state_out = 4.0;\n      ATTN_B.delay_out = ATTN_B.clock_time + 0.2;\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 4:\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n        ATTN_B.delay_out = ATTN_B.Memory5;\n      } else if (ATTN_B.Memory10 != 0.0) {\n        ATTN_B.state_out = 5.0;\n        ATTN_B.delay_out = ATTN_B.clock_time + 1.0;\n      } else {\n        ATTN_B.state_out = 6.0;\n        ATTN_B.delay_out = ATTN_B.clock_time + 1.0;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.left_trigger_out = 0.0;\n      ATTN_B.right_trigger_out = 0.0;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 5:\n      ATTN_B.reward_trigger_out = 1.0;\n      ATTN_B.state_out = 6.0;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 6:\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n      } else {\n        ATTN_B.state_out = 1.0;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     default:\n      ATTN_B.state_out = ATTN_B.Memory2;\n      ATTN_B.localTime_out = ATTN_B.Memory1;\n      ATTN_B.trialNum_out = ATTN_B.Memory;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n    }\n    break;\n\n   case 2:\n    switch (static_cast<int32_T>(ATTN_B.Memory2)) {\n     case 1:\n      ATTN_B.npxlsAcq_out = 1.0;\n      ATTN_B.state_out = 2.0;\n      ATTN_B.localTime_out = 1.0;\n      ATTN_B.trialNum_out = 1.0;\n      ATTN_B.right_trigger_out = 0.0;\n      ATTN_B.left_trigger_out = 0.0;\n      ATTN_B.numLicks_out = 0.0;\n      tapsum = 4.0;\n      while ((tapsum >= 9.0) || (tapsum <= 5.0)) {\n        tapsum = ATTN_rand();\n        tapsum = std::log(tapsum);\n        tapsum *= -7.0;\n      }\n\n      ATTN_B.delay_out = ATTN_B.clock_time + tapsum;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 2:\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n      } else {\n        ATTN_B.state_out = 3.0;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 3:\n      if (ATTN_rand() <= 0.8) {\n        if (ATTN_cal->targetSide != 0.0) {\n          ATTN_B.right_trigger_out = 1.0;\n          ATTN_B.left_trigger_out = 0.0;\n        } else {\n          ATTN_B.left_trigger_out = 1.0;\n          ATTN_B.right_trigger_out = 0.0;\n        }\n\n        ATTN_B.was_target_out = 0.0;\n      } else {\n        if (ATTN_cal->targetSide != 0.0) {\n          ATTN_B.left_trigger_out = 1.0;\n          ATTN_B.right_trigger_out = 0.0;\n        } else {\n          ATTN_B.right_trigger_out = 1.0;\n          ATTN_B.left_trigger_out = 0.0;\n        }\n\n        ATTN_B.was_target_out = 1.0;\n      }\n\n      ATTN_B.state_out = 4.0;\n      ATTN_B.delay_out = ATTN_B.clock_time + 0.2;\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 4:\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n        ATTN_B.delay_out = ATTN_B.Memory5;\n      } else {\n        ATTN_B.state_out = 5.0;\n        ATTN_B.delay_out = ATTN_B.clock_time + 1.5;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.left_trigger_out = 0.0;\n      ATTN_B.right_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 5:\n      if (ATTN_B.Lick != 0.0) {\n        ATTN_B.numLicks_out = ATTN_B.Memory9 + 1.0;\n      } else {\n        ATTN_B.numLicks_out = ATTN_B.Memory9;\n      }\n\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n      } else if ((ATTN_B.Memory9 != 0.0) && (ATTN_B.Memory10 != 0.0)) {\n        ATTN_B.state_out = 6.0;\n      } else {\n        ATTN_B.state_out = 1.0;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 6:\n      ATTN_B.reward_trigger_out = 1.0;\n      ATTN_B.state_out = 7.0;\n      ATTN_B.delay_out = ATTN_B.clock_time + 0.5;\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 7:\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n      } else {\n        ATTN_B.state_out = 1.0;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     default:\n      ATTN_B.state_out = ATTN_B.Memory2;\n      ATTN_B.localTime_out = ATTN_B.Memory1;\n      ATTN_B.trialNum_out = ATTN_B.Memory;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n    }\n    break;\n\n   case 3:\n    switch (static_cast<int32_T>(ATTN_B.Memory2)) {\n     case 1:\n      ATTN_B.npxlsAcq_out = 1.0;\n      ATTN_B.state_out = 2.0;\n      ATTN_B.localTime_out = 1.0;\n      ATTN_B.trialNum_out = 1.0;\n      ATTN_B.right_trigger_out = 0.0;\n      ATTN_B.left_trigger_out = 0.0;\n      if ((!(ATTN_B.Memory10 != 0.0)) && (!(ATTN_B.Memory9 != 0.0))) {\n        tapsum = 1.0;\n        while ((tapsum >= 4.0) || (tapsum <= 2.0)) {\n          tapsum = ATTN_rand();\n          tapsum = std::log(tapsum);\n          tapsum *= -3.0;\n        }\n\n        ATTN_B.delay_out = ATTN_B.clock_time + tapsum;\n      } else {\n        tapsum = 4.0;\n        while ((tapsum >= 9.0) || (tapsum <= 5.0)) {\n          tapsum = ATTN_rand();\n          tapsum = std::log(tapsum);\n          tapsum *= -7.0;\n        }\n\n        ATTN_B.delay_out = ATTN_B.clock_time + tapsum;\n      }\n\n      ATTN_B.numLicks_out = 0.0;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = 0.0;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 2:\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n      } else {\n        ATTN_B.state_out = 3.0;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 3:\n      if (ATTN_rand() <= 0.8) {\n        if (ATTN_cal->targetSide != 0.0) {\n          ATTN_B.right_trigger_out = 1.0;\n          ATTN_B.left_trigger_out = 0.0;\n        } else {\n          ATTN_B.left_trigger_out = 1.0;\n          ATTN_B.right_trigger_out = 0.0;\n        }\n\n        ATTN_B.was_target_out = 0.0;\n      } else {\n        if (ATTN_cal->targetSide != 0.0) {\n          ATTN_B.left_trigger_out = 1.0;\n          ATTN_B.right_trigger_out = 0.0;\n        } else {\n          ATTN_B.right_trigger_out = 1.0;\n          ATTN_B.left_trigger_out = 0.0;\n        }\n\n        ATTN_B.was_target_out = 1.0;\n      }\n\n      ATTN_B.state_out = 4.0;\n      ATTN_B.delay_out = ATTN_B.clock_time + 0.2;\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 4:\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n        ATTN_B.delay_out = ATTN_B.Memory5;\n      } else {\n        ATTN_B.state_out = 5.0;\n        ATTN_B.delay_out = ATTN_B.clock_time + 1.0;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.left_trigger_out = 0.0;\n      ATTN_B.right_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 5:\n      if ((ATTN_B.Memory10 != 0.0) && (ATTN_rand() < 0.2)) {\n        ATTN_B.numLicks_out = ATTN_B.Memory9 + 1.0;\n      } else if ((!(ATTN_B.Memory10 != 0.0)) && (ATTN_rand() < 0.001)) {\n        ATTN_B.numLicks_out = ATTN_B.Memory9 + 1.0;\n      } else {\n        ATTN_B.numLicks_out = ATTN_B.Memory9;\n      }\n\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n      } else if ((ATTN_B.Memory9 != 0.0) && (ATTN_B.Memory10 != 0.0)) {\n        ATTN_B.state_out = 6.0;\n      } else {\n        ATTN_B.state_out = 1.0;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 6:\n      ATTN_B.reward_trigger_out = 1.0;\n      ATTN_B.state_out = 7.0;\n      ATTN_B.delay_out = ATTN_B.clock_time + 0.5;\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     case 7:\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n      } else {\n        ATTN_B.state_out = 1.0;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n\n     default:\n      ATTN_B.state_out = ATTN_B.Memory2;\n      ATTN_B.localTime_out = ATTN_B.Memory1;\n      ATTN_B.trialNum_out = ATTN_B.Memory;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.delay_out = ATTN_B.Memory5;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n      break;\n    }\n    break;\n\n   case 111:\n    if (static_cast<int32_T>(ATTN_B.Memory2) == 1) {\n      ATTN_B.npxlsAcq_out = 0.0;\n      ATTN_B.localTime_out = 1.0;\n      ATTN_B.trialNum_out = 1.0;\n      ATTN_B.right_trigger_out = 0.0;\n      ATTN_B.left_trigger_out = 0.0;\n      ATTN_B.delay_out = ATTN_B.clock_time + 10.0;\n      ATTN_B.numLicks_out = 0.0;\n      ATTN_B.reward_trigger_out = 1.0;\n      ATTN_B.was_target_out = 0.0;\n      ATTN_B.reward_duration_out = 0.02;\n      ATTN_B.state_out = 2.0;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n    } else {\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n        ATTN_B.reward_trigger_out = 0.0;\n        ATTN_B.delay_out = ATTN_B.Memory5;\n        ATTN_B.reward_duration_out = 0.02;\n      } else {\n        ATTN_B.state_out = ATTN_B.Memory2 + 1.0;\n        ATTN_B.reward_trigger_out = 1.0;\n        ATTN_B.delay_out = ATTN_B.clock_time + 10.0;\n        ATTN_B.reward_duration_out = 0.02;\n      }\n\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.left_trigger_out = ATTN_B.Memory6;\n      ATTN_B.right_trigger_out = ATTN_B.Memory8;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n    }\n    break;\n\n   case 222:\n    if (static_cast<int32_T>(ATTN_B.Memory2) == 1) {\n      ATTN_B.npxlsAcq_out = 0.0;\n      ATTN_B.localTime_out = 1.0;\n      ATTN_B.trialNum_out = 1.0;\n      if (ATTN_cal->targetSide != 0.0) {\n        ATTN_B.right_trigger_out = 1.0;\n        ATTN_B.left_trigger_out = 0.0;\n      } else {\n        ATTN_B.left_trigger_out = 1.0;\n        ATTN_B.right_trigger_out = 0.0;\n      }\n\n      ATTN_B.delay_out = ATTN_B.clock_time + 10.0;\n      ATTN_B.numLicks_out = 0.0;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = 0.0;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.state_out = 2.0;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n    } else {\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n        ATTN_B.delay_out = ATTN_B.Memory5;\n        ATTN_B.left_trigger_out = 0.0;\n        ATTN_B.right_trigger_out = 0.0;\n      } else {\n        ATTN_B.state_out = ATTN_B.Memory2 + 1.0;\n        ATTN_B.delay_out = ATTN_B.clock_time + 10.0;\n        if (ATTN_cal->targetSide != 0.0) {\n          ATTN_B.right_trigger_out = 1.0;\n          ATTN_B.left_trigger_out = 0.0;\n        } else {\n          ATTN_B.left_trigger_out = 1.0;\n          ATTN_B.right_trigger_out = 0.0;\n        }\n      }\n\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.stim_duration_out = ATTN_cal->triangleDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n    }\n    break;\n\n   default:\n    if (static_cast<int32_T>(ATTN_B.Memory2) == 1) {\n      ATTN_B.npxlsAcq_out = 0.0;\n      ATTN_B.localTime_out = 1.0;\n      ATTN_B.trialNum_out = 1.0;\n      if (ATTN_cal->targetSide != 0.0) {\n        ATTN_B.right_trigger_out = 1.0;\n        ATTN_B.left_trigger_out = 0.0;\n      } else {\n        ATTN_B.left_trigger_out = 1.0;\n        ATTN_B.right_trigger_out = 0.0;\n      }\n\n      ATTN_B.delay_out = ATTN_B.clock_time + 10.0;\n      ATTN_B.numLicks_out = 0.0;\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.was_target_out = 0.0;\n      ATTN_B.stim_duration_out = 0.05;\n      ATTN_B.state_out = 2.0;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n    } else {\n      if (ATTN_B.clock_time < ATTN_B.Memory5) {\n        ATTN_B.state_out = ATTN_B.Memory2;\n        ATTN_B.delay_out = ATTN_B.Memory5;\n        ATTN_B.left_trigger_out = 0.0;\n        ATTN_B.right_trigger_out = 0.0;\n        ATTN_B.stim_duration_out = (ATTN_B.Memory2 - 1.0) * 0.05;\n      } else {\n        ATTN_B.state_out = ATTN_B.Memory2 + 1.0;\n        ATTN_B.delay_out = ATTN_B.clock_time + 10.0;\n        if (ATTN_cal->targetSide != 0.0) {\n          ATTN_B.right_trigger_out = 1.0;\n          ATTN_B.left_trigger_out = 0.0;\n        } else {\n          ATTN_B.left_trigger_out = 1.0;\n          ATTN_B.right_trigger_out = 0.0;\n        }\n\n        ATTN_B.stim_duration_out = 0.05 * ATTN_B.Memory2;\n      }\n\n      ATTN_B.reward_trigger_out = 0.0;\n      ATTN_B.localTime_out = ATTN_B.Memory1 + 1.0;\n      ATTN_B.trialNum_out = ATTN_B.Memory + 1.0;\n      ATTN_B.npxlsAcq_out = ATTN_B.Memory3;\n      ATTN_B.numLicks_out = ATTN_B.Memory9;\n      ATTN_B.was_target_out = ATTN_B.Memory10;\n      ATTN_B.reward_duration_out = ATTN_cal->rewardDuration;\n      ATTN_B.onsetTone_trig = 0.0;\n    }\n    break;\n  }\n\n  /* End of MATLAB Function: '<Root>/MATLAB Function' */\n\n  /* Clock: '<S5>/Clock1' */\n  ATTN_B.Clock1 = ATTN_M->Timing.t[0];\n\n  /* MATLAB Function: '<S5>/MATLAB Function1' incorporates:\n   *  Constant: '<Root>/triangleAmplitude'\n   */\n  ATTN_MATLABFunction2(ATTN_B.Memory8, ATTN_B.stim_duration_out,\n                       ATTN_cal->triangleAmplitude, ATTN_B.Clock1,\n                       &ATTN_B.sf_MATLABFunction1_d,\n                       &ATTN_DW.sf_MATLABFunction1_d);\n\n  /* Clock: '<S4>/Clock2' */\n  ATTN_B.Clock2 = ATTN_M->Timing.t[0];\n\n  /* MATLAB Function: '<S4>/MATLAB Function2' incorporates:\n   *  Constant: '<Root>/triangleAmplitude'\n   */\n  ATTN_MATLABFunction2(ATTN_B.Memory6, ATTN_B.stim_duration_out,\n                       ATTN_cal->triangleAmplitude, ATTN_B.Clock2,\n                       &ATTN_B.sf_MATLABFunction2, &ATTN_DW.sf_MATLABFunction2);\n\n  /* S-Function (sg_IO191_da_s): '<Root>/Analog output ' */\n\n  /* Level2 S-Function Block: '<Root>/Analog output ' (sg_IO191_da_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[2];\n    sfcnOutputs(rts,0);\n  }\n\n  /* DiscretePulseGenerator: '<Root>/Whisker Trig' */\n  tapsum = ATTN_cal->T_whisk / 2.0;\n\n  /* DiscretePulseGenerator: '<Root>/Whisker Trig' */\n  ATTN_B.whiskCam_trig = (ATTN_DW.clockTickCounter < tapsum) &&\n    (ATTN_DW.clockTickCounter >= 0) ? ATTN_cal->WhiskerTrig_Amp : 0.0;\n\n  /* DiscretePulseGenerator: '<Root>/Whisker Trig' */\n  if (ATTN_DW.clockTickCounter >= ATTN_cal->T_whisk - 1.0) {\n    ATTN_DW.clockTickCounter = 0;\n  } else {\n    ATTN_DW.clockTickCounter++;\n  }\n\n  /* DiscretePulseGenerator: '<Root>/Npxls Trig' */\n  tapsum = ATTN_cal->T_npxls / 2.0;\n\n  /* DiscretePulseGenerator: '<Root>/Npxls Trig' */\n  ATTN_B.npxls_trig = (ATTN_DW.clockTickCounter_n < tapsum) &&\n    (ATTN_DW.clockTickCounter_n >= 0) ? ATTN_cal->NpxlsTrig_Amp : 0.0;\n\n  /* DiscretePulseGenerator: '<Root>/Npxls Trig' */\n  if (ATTN_DW.clockTickCounter_n >= ATTN_cal->T_npxls - 1.0) {\n    ATTN_DW.clockTickCounter_n = 0;\n  } else {\n    ATTN_DW.clockTickCounter_n++;\n  }\n\n  /* DiscretePulseGenerator: '<Root>/Pupil Trig' */\n  tapsum = ATTN_cal->T_pupil / 2.0;\n\n  /* DiscretePulseGenerator: '<Root>/Pupil Trig' */\n  ATTN_B.pupilCam_trig = (ATTN_DW.clockTickCounter_c < tapsum) &&\n    (ATTN_DW.clockTickCounter_c >= 0) ? ATTN_cal->PupilTrig_Amp : 0.0;\n\n  /* DiscretePulseGenerator: '<Root>/Pupil Trig' */\n  if (ATTN_DW.clockTickCounter_c >= ATTN_cal->T_pupil - 1.0) {\n    ATTN_DW.clockTickCounter_c = 0;\n  } else {\n    ATTN_DW.clockTickCounter_c++;\n  }\n\n  /* Clock: '<S6>/Clock1' */\n  ATTN_B.Clock1_b = ATTN_M->Timing.t[0];\n\n  /* MATLAB Function: '<S6>/MATLAB Function1' incorporates:\n   *  Constant: '<S6>/Constant4'\n   */\n  ATTN_DW.sfEvent_a = ATTN_CALL_EVENT_n;\n  if (ATTN_B.reward_trigger_out != 0.0) {\n    ATTN_DW.t0_p = ATTN_B.Clock1_b;\n    ATTN_DW.t0_not_empty_p = true;\n    ATTN_B.y = ATTN_cal->Constant4_Value;\n  } else if (ATTN_DW.t0_not_empty_p) {\n    if (ATTN_B.Clock1_b - ATTN_DW.t0_p <= ATTN_B.reward_duration_out) {\n      ATTN_B.y = ATTN_cal->Constant4_Value;\n    } else {\n      ATTN_B.y = 0.0;\n    }\n  } else {\n    ATTN_B.y = 0.0;\n  }\n\n  /* End of MATLAB Function: '<S6>/MATLAB Function1' */\n\n  /* Clock: '<S7>/Clock1' */\n  ATTN_B.Clock1_l = ATTN_M->Timing.t[0];\n\n  /* MATLAB Function: '<S7>/MATLAB Function1' */\n  ATTN_DW.sfEvent = ATTN_CALL_EVENT_n;\n  if (ATTN_B.onsetTone_trig != 0.0) {\n    ATTN_B.tonePulse = 1.0;\n    ATTN_DW.t0 = ATTN_B.Clock1_l;\n    ATTN_DW.t0_not_empty = true;\n  } else if (ATTN_DW.t0_not_empty) {\n    ATTN_B.tonePulse = (ATTN_B.Clock1_l - ATTN_DW.t0 < 1.5);\n  } else {\n    ATTN_B.tonePulse = 0.0;\n  }\n\n  /* End of MATLAB Function: '<S7>/MATLAB Function1' */\n\n  /* S-Function (sg_IO191_do_s): '<Root>/Digital output ' */\n\n  /* Level2 S-Function Block: '<Root>/Digital output ' (sg_IO191_do_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[3];\n    sfcnOutputs(rts,0);\n  }\n\n  /* S-Function (sg_IO191_di_s): '<Root>/Digital input ' */\n\n  /* Level2 S-Function Block: '<Root>/Digital input ' (sg_IO191_di_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[4];\n    sfcnOutputs(rts,0);\n  }\n\n  /* RateTransition generated from: '<Root>/Digital input ' */\n  ATTN_B.HiddenRateTransitionForToWks_In = ATTN_B.PulseGen1Hz;\n\n  /* RelationalOperator: '<Root>/Relational Operator' incorporates:\n   *  Constant: '<Root>/Constant'\n   */\n  ATTN_B.RelationalOperator = (ATTN_B.counter_out >= ATTN_cal->maxFrame);\n\n  /* Stop: '<Root>/Stop Simulation' */\n  if (ATTN_B.RelationalOperator) {\n    rtmSetStopRequested(ATTN_M, 1);\n  }\n\n  /* End of Stop: '<Root>/Stop Simulation' */\n\n  /* Update for Memory: '<Root>/Memory8' */\n  ATTN_DW.Memory8_PreviousInput = ATTN_B.right_trigger_out;\n\n  /* Update for Memory: '<Root>/Memory2' */\n  ATTN_DW.Memory2_PreviousInput = ATTN_B.state_out;\n\n  /* Update for Memory: '<Root>/Memory1' */\n  ATTN_DW.Memory1_PreviousInput = ATTN_B.localTime_out;\n\n  /* Update for Memory: '<Root>/Memory' */\n  ATTN_DW.Memory_PreviousInput = ATTN_B.trialNum_out;\n\n  /* Update for Memory: '<Root>/Memory11' */\n  ATTN_DW.Memory11_PreviousInput = ATTN_B.y1;\n\n  /* Update for Memory: '<Root>/Memory7' */\n  ATTN_DW.Memory7_PreviousInput = ATTN_B.y2;\n\n  /* Update for Memory: '<Root>/Memory3' */\n  ATTN_DW.Memory3_PreviousInput = ATTN_B.npxlsAcq_out;\n\n  /* Update for Memory: '<Root>/Memory4' */\n  ATTN_DW.Memory4_PreviousInput = ATTN_B.counter_out;\n\n  /* Update for Memory: '<Root>/Memory9' */\n  ATTN_DW.Memory9_PreviousInput = ATTN_B.numLicks_out;\n\n  /* Update for Memory: '<Root>/Memory5' */\n  ATTN_DW.Memory5_PreviousInput = ATTN_B.delay_out;\n\n  /* Update for Memory: '<Root>/Memory6' */\n  ATTN_DW.Memory6_PreviousInput = ATTN_B.left_trigger_out;\n\n  /* Update for Memory: '<Root>/Memory10' */\n  ATTN_DW.Memory10_PreviousInput = ATTN_B.was_target_out;\n\n  /* Update absolute time for base rate */\n  /* The \"clockTick0\" counts the number of times the code of this task has\n   * been executed. The absolute time is the multiplication of \"clockTick0\"\n   * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\n   * overflow during the application lifespan selected.\n   * Timer of this task consists of two 32 bit unsigned integers.\n   * The two integers represent the low bits Timing.clockTick0 and the high bits\n   * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\n   */\n  if (!(++ATTN_M->Timing.clockTick0)) {\n    ++ATTN_M->Timing.clockTickH0;\n  }\n\n  ATTN_M->Timing.t[0] = ATTN_M->Timing.clockTick0 * ATTN_M->Timing.stepSize0 +\n    ATTN_M->Timing.clockTickH0 * ATTN_M->Timing.stepSize0 * 4294967296.0;\n\n  {\n    /* Update absolute timer for sample time: [0.001s, 0.0s] */\n    /* The \"clockTick1\" counts the number of times the code of this task has\n     * been executed. The absolute time is the multiplication of \"clockTick1\"\n     * and \"Timing.stepSize1\". Size of \"clockTick1\" ensures timer will not\n     * overflow during the application lifespan selected.\n     * Timer of this task consists of two 32 bit unsigned integers.\n     * The two integers represent the low bits Timing.clockTick1 and the high bits\n     * Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.\n     */\n    if (!(++ATTN_M->Timing.clockTick1)) {\n      ++ATTN_M->Timing.clockTickH1;\n    }\n\n    ATTN_M->Timing.t[1] = ATTN_M->Timing.clockTick1 * ATTN_M->Timing.stepSize1 +\n      ATTN_M->Timing.clockTickH1 * ATTN_M->Timing.stepSize1 * 4294967296.0;\n  }\n}\n\n/* Model initialize function */\nvoid ATTN_initialize(void)\n{\n  /* Registration code */\n\n  /* initialize non-finites */\n  rt_InitInfAndNaN(sizeof(real_T));\n\n  {\n    /* Setup solver object */\n    rtsiSetSimTimeStepPtr(&ATTN_M->solverInfo, &ATTN_M->Timing.simTimeStep);\n    rtsiSetTPtr(&ATTN_M->solverInfo, &rtmGetTPtr(ATTN_M));\n    rtsiSetStepSizePtr(&ATTN_M->solverInfo, &ATTN_M->Timing.stepSize0);\n    rtsiSetErrorStatusPtr(&ATTN_M->solverInfo, (&rtmGetErrorStatus(ATTN_M)));\n    rtsiSetRTModelPtr(&ATTN_M->solverInfo, ATTN_M);\n  }\n\n  rtsiSetSimTimeStep(&ATTN_M->solverInfo, MAJOR_TIME_STEP);\n  rtsiSetSolverName(&ATTN_M->solverInfo,\"FixedStepDiscrete\");\n  ATTN_M->solverInfoPtr = (&ATTN_M->solverInfo);\n\n  /* Initialize timing info */\n  {\n    int_T *mdlTsMap = ATTN_M->Timing.sampleTimeTaskIDArray;\n    mdlTsMap[0] = 0;\n    mdlTsMap[1] = 1;\n\n    /* polyspace +2 MISRA2012:D4.1 [Justified:Low] \"ATTN_M points to\n       static memory which is guaranteed to be non-NULL\" */\n    ATTN_M->Timing.sampleTimeTaskIDPtr = (&mdlTsMap[0]);\n    ATTN_M->Timing.sampleTimes = (&ATTN_M->Timing.sampleTimesArray[0]);\n    ATTN_M->Timing.offsetTimes = (&ATTN_M->Timing.offsetTimesArray[0]);\n\n    /* task periods */\n    ATTN_M->Timing.sampleTimes[0] = (0.0);\n    ATTN_M->Timing.sampleTimes[1] = (0.001);\n\n    /* task offsets */\n    ATTN_M->Timing.offsetTimes[0] = (0.0);\n    ATTN_M->Timing.offsetTimes[1] = (0.0);\n  }\n\n  rtmSetTPtr(ATTN_M, &ATTN_M->Timing.tArray[0]);\n\n  {\n    int_T *mdlSampleHits = ATTN_M->Timing.sampleHitArray;\n    mdlSampleHits[0] = 1;\n    mdlSampleHits[1] = 1;\n    ATTN_M->Timing.sampleHits = (&mdlSampleHits[0]);\n  }\n\n  rtmSetTFinal(ATTN_M, -1);\n  ATTN_M->Timing.stepSize0 = 0.001;\n  ATTN_M->Timing.stepSize1 = 0.001;\n  ATTN_M->solverInfoPtr = (&ATTN_M->solverInfo);\n  ATTN_M->Timing.stepSize = (0.001);\n  rtsiSetFixedStepSize(&ATTN_M->solverInfo, 0.001);\n  rtsiSetSolverMode(&ATTN_M->solverInfo, SOLVER_MODE_SINGLETASKING);\n\n  /* block I/O */\n  (void) std::memset((static_cast<void *>(&ATTN_B)), 0,\n                     sizeof(B_ATTN_T));\n\n  /* states (dwork) */\n  (void) std::memset(static_cast<void *>(&ATTN_DW), 0,\n                     sizeof(DW_ATTN_T));\n\n  /* child S-Function registration */\n  {\n    RTWSfcnInfo *sfcnInfo = &ATTN_M->NonInlinedSFcns.sfcnInfo;\n    ATTN_M->sfcnInfo = (sfcnInfo);\n    rtssSetErrorStatusPtr(sfcnInfo, (&rtmGetErrorStatus(ATTN_M)));\n    ATTN_M->Sizes.numSampTimes = (2);\n    rtssSetNumRootSampTimesPtr(sfcnInfo, &ATTN_M->Sizes.numSampTimes);\n    ATTN_M->NonInlinedSFcns.taskTimePtrs[0] = (&rtmGetTPtr(ATTN_M)[0]);\n    ATTN_M->NonInlinedSFcns.taskTimePtrs[1] = (&rtmGetTPtr(ATTN_M)[1]);\n    rtssSetTPtrPtr(sfcnInfo,ATTN_M->NonInlinedSFcns.taskTimePtrs);\n    rtssSetTStartPtr(sfcnInfo, &rtmGetTStart(ATTN_M));\n    rtssSetTFinalPtr(sfcnInfo, &rtmGetTFinal(ATTN_M));\n    rtssSetTimeOfLastOutputPtr(sfcnInfo, &rtmGetTimeOfLastOutput(ATTN_M));\n    rtssSetStepSizePtr(sfcnInfo, &ATTN_M->Timing.stepSize);\n    rtssSetStopRequestedPtr(sfcnInfo, &rtmGetStopRequested(ATTN_M));\n    rtssSetDerivCacheNeedsResetPtr(sfcnInfo, &ATTN_M->derivCacheNeedsReset);\n    rtssSetZCCacheNeedsResetPtr(sfcnInfo, &ATTN_M->zCCacheNeedsReset);\n    rtssSetContTimeOutputInconsistentWithStateAtMajorStepPtr(sfcnInfo,\n      &ATTN_M->CTOutputIncnstWithState);\n    rtssSetSampleHitsPtr(sfcnInfo, &ATTN_M->Timing.sampleHits);\n    rtssSetPerTaskSampleHitsPtr(sfcnInfo, &ATTN_M->Timing.perTaskSampleHits);\n    rtssSetSimModePtr(sfcnInfo, &ATTN_M->simMode);\n    rtssSetSolverInfoPtr(sfcnInfo, &ATTN_M->solverInfoPtr);\n  }\n\n  ATTN_M->Sizes.numSFcns = (5);\n\n  /* register each child */\n  {\n    (void) std::memset(static_cast<void *>\n                       (&ATTN_M->NonInlinedSFcns.childSFunctions[0]), 0,\n                       5*sizeof(SimStruct));\n    ATTN_M->childSfunctions = (&ATTN_M->NonInlinedSFcns.childSFunctionPtrs[0]);\n\n    {\n      int_T i;\n      for (i = 0; i < 5; i++) {\n        ATTN_M->childSfunctions[i] = (&ATTN_M->NonInlinedSFcns.childSFunctions[i]);\n      }\n    }\n\n    /* Level2 S-Function Block: ATTN/<Root>/Setup  (sg_IO191_setup_s) */\n    {\n      SimStruct *rts = ATTN_M->childSfunctions[0];\n\n      /* timing info */\n      time_T *sfcnPeriod = ATTN_M->NonInlinedSFcns.Sfcn0.sfcnPeriod;\n      time_T *sfcnOffset = ATTN_M->NonInlinedSFcns.Sfcn0.sfcnOffset;\n      int_T *sfcnTsMap = ATTN_M->NonInlinedSFcns.Sfcn0.sfcnTsMap;\n      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,\n                         sizeof(time_T)*1);\n      (void) std::memset(static_cast<void*>(sfcnOffset), 0,\n                         sizeof(time_T)*1);\n      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);\n      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);\n      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);\n\n      {\n        ssSetBlkInfo2Ptr(rts, &ATTN_M->NonInlinedSFcns.blkInfo2[0]);\n      }\n\n      _ssSetBlkInfo2PortInfo2Ptr(rts,\n        &ATTN_M->NonInlinedSFcns.inputOutputPortInfo2[0]);\n\n      /* Set up the mdlInfo pointer */\n      ssSetRTWSfcnInfo(rts, ATTN_M->sfcnInfo);\n\n      /* Allocate memory of model methods 2 */\n      {\n        ssSetModelMethods2(rts, &ATTN_M->NonInlinedSFcns.methods2[0]);\n      }\n\n      /* Allocate memory of model methods 3 */\n      {\n        ssSetModelMethods3(rts, &ATTN_M->NonInlinedSFcns.methods3[0]);\n      }\n\n      /* Allocate memory of model methods 4 */\n      {\n        ssSetModelMethods4(rts, &ATTN_M->NonInlinedSFcns.methods4[0]);\n      }\n\n      /* Allocate memory for states auxilliary information */\n      {\n        ssSetStatesInfo2(rts, &ATTN_M->NonInlinedSFcns.statesInfo2[0]);\n        ssSetPeriodicStatesInfo(rts, &ATTN_M->\n          NonInlinedSFcns.periodicStatesInfo[0]);\n      }\n\n      /* path info */\n      ssSetModelName(rts, \"Setup \");\n      ssSetPath(rts, \"ATTN/Setup \");\n      ssSetRTModel(rts,ATTN_M);\n      ssSetParentSS(rts, (NULL));\n      ssSetRootSS(rts, rts);\n      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);\n\n      /* parameters */\n      {\n        mxArray **sfcnParams = (mxArray **)\n          &ATTN_M->NonInlinedSFcns.Sfcn0.params;\n        ssSetSFcnParamsCount(rts, 9);\n        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);\n        ssSetSFcnParam(rts, 0, (mxArray*)ATTN_cal->Setup_P1_Size);\n        ssSetSFcnParam(rts, 1, (mxArray*)ATTN_cal->Setup_P2_Size);\n        ssSetSFcnParam(rts, 2, (mxArray*)ATTN_cal->Setup_P3_Size);\n        ssSetSFcnParam(rts, 3, (mxArray*)ATTN_cal->Setup_P4_Size);\n        ssSetSFcnParam(rts, 4, (mxArray*)ATTN_cal->Setup_P5_Size);\n        ssSetSFcnParam(rts, 5, (mxArray*)ATTN_cal->Setup_P6_Size);\n        ssSetSFcnParam(rts, 6, (mxArray*)ATTN_cal->Setup_P7_Size);\n        ssSetSFcnParam(rts, 7, (mxArray*)ATTN_cal->Setup_P8_Size);\n        ssSetSFcnParam(rts, 8, (mxArray*)ATTN_cal->Setup_P9_Size);\n      }\n\n      /* work vectors */\n      ssSetRWork(rts, (real_T *) &ATTN_DW.Setup_RWORK[0]);\n      ssSetPWork(rts, (void **) &ATTN_DW.Setup_PWORK);\n\n      {\n        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)\n          &ATTN_M->NonInlinedSFcns.Sfcn0.dWork;\n        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)\n          &ATTN_M->NonInlinedSFcns.Sfcn0.dWorkAux;\n        ssSetSFcnDWork(rts, dWorkRecord);\n        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);\n        ssSetNumDWorkAsInt(rts, 2);\n\n        /* RWORK */\n        ssSetDWorkWidthAsInt(rts, 0, 2);\n        ssSetDWorkDataType(rts, 0,SS_DOUBLE);\n        ssSetDWorkComplexSignal(rts, 0, 0);\n        ssSetDWork(rts, 0, &ATTN_DW.Setup_RWORK[0]);\n\n        /* PWORK */\n        ssSetDWorkWidthAsInt(rts, 1, 1);\n        ssSetDWorkDataType(rts, 1,SS_POINTER);\n        ssSetDWorkComplexSignal(rts, 1, 0);\n        ssSetDWork(rts, 1, &ATTN_DW.Setup_PWORK);\n      }\n\n      /* registration */\n      sg_IO191_setup_s(rts);\n      sfcnInitializeSizes(rts);\n      sfcnInitializeSampleTimes(rts);\n\n      /* adjust sample time */\n      ssSetSampleTime(rts, 0, 0.001);\n      ssSetOffsetTime(rts, 0, 0.0);\n      sfcnTsMap[0] = 1;\n\n      /* set compiled values of dynamic vector attributes */\n      ssSetNumNonsampledZCsAsInt(rts, 0);\n\n      /* Update connectivity flags for each port */\n      /* Update the BufferDstPort flags for each input port */\n    }\n\n    /* Level2 S-Function Block: ATTN/<Root>/Analog input  (sg_IO191_ad_s) */\n    {\n      SimStruct *rts = ATTN_M->childSfunctions[1];\n\n      /* timing info */\n      time_T *sfcnPeriod = ATTN_M->NonInlinedSFcns.Sfcn1.sfcnPeriod;\n      time_T *sfcnOffset = ATTN_M->NonInlinedSFcns.Sfcn1.sfcnOffset;\n      int_T *sfcnTsMap = ATTN_M->NonInlinedSFcns.Sfcn1.sfcnTsMap;\n      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,\n                         sizeof(time_T)*1);\n      (void) std::memset(static_cast<void*>(sfcnOffset), 0,\n                         sizeof(time_T)*1);\n      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);\n      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);\n      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);\n\n      {\n        ssSetBlkInfo2Ptr(rts, &ATTN_M->NonInlinedSFcns.blkInfo2[1]);\n      }\n\n      _ssSetBlkInfo2PortInfo2Ptr(rts,\n        &ATTN_M->NonInlinedSFcns.inputOutputPortInfo2[1]);\n\n      /* Set up the mdlInfo pointer */\n      ssSetRTWSfcnInfo(rts, ATTN_M->sfcnInfo);\n\n      /* Allocate memory of model methods 2 */\n      {\n        ssSetModelMethods2(rts, &ATTN_M->NonInlinedSFcns.methods2[1]);\n      }\n\n      /* Allocate memory of model methods 3 */\n      {\n        ssSetModelMethods3(rts, &ATTN_M->NonInlinedSFcns.methods3[1]);\n      }\n\n      /* Allocate memory of model methods 4 */\n      {\n        ssSetModelMethods4(rts, &ATTN_M->NonInlinedSFcns.methods4[1]);\n      }\n\n      /* Allocate memory for states auxilliary information */\n      {\n        ssSetStatesInfo2(rts, &ATTN_M->NonInlinedSFcns.statesInfo2[1]);\n        ssSetPeriodicStatesInfo(rts, &ATTN_M->\n          NonInlinedSFcns.periodicStatesInfo[1]);\n      }\n\n      /* outputs */\n      {\n        ssSetPortInfoForOutputs(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn1.outputPortInfo[0]);\n        ssSetPortInfoForOutputs(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn1.outputPortInfo[0]);\n        _ssSetNumOutputPorts(rts, 2);\n        _ssSetPortInfo2ForOutputUnits(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn1.outputPortUnits[0]);\n        ssSetOutputPortUnit(rts, 0, 0);\n        ssSetOutputPortUnit(rts, 1, 0);\n        _ssSetPortInfo2ForOutputCoSimAttribute(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn1.outputPortCoSimAttribute[0]);\n        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);\n        ssSetOutputPortIsContinuousQuantity(rts, 1, 0);\n\n        /* port 0 */\n        {\n          _ssSetOutputPortNumDimensions(rts, 0, 1);\n          ssSetOutputPortWidthAsInt(rts, 0, 1);\n          ssSetOutputPortSignal(rts, 0, ((real_T *) &ATTN_B.Analoginput_o1));\n        }\n\n        /* port 1 */\n        {\n          _ssSetOutputPortNumDimensions(rts, 1, 1);\n          ssSetOutputPortWidthAsInt(rts, 1, 1);\n          ssSetOutputPortSignal(rts, 1, ((real_T *) &ATTN_B.lickometer_piezo));\n        }\n      }\n\n      /* path info */\n      ssSetModelName(rts, \"Analog input \");\n      ssSetPath(rts, \"ATTN/Analog input \");\n      ssSetRTModel(rts,ATTN_M);\n      ssSetParentSS(rts, (NULL));\n      ssSetRootSS(rts, rts);\n      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);\n\n      /* parameters */\n      {\n        mxArray **sfcnParams = (mxArray **)\n          &ATTN_M->NonInlinedSFcns.Sfcn1.params;\n        ssSetSFcnParamsCount(rts, 9);\n        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);\n        ssSetSFcnParam(rts, 0, (mxArray*)ATTN_cal->Analoginput_P1_Size);\n        ssSetSFcnParam(rts, 1, (mxArray*)ATTN_cal->Analoginput_P2_Size);\n        ssSetSFcnParam(rts, 2, (mxArray*)ATTN_cal->Analoginput_P3_Size);\n        ssSetSFcnParam(rts, 3, (mxArray*)ATTN_cal->Analoginput_P4_Size);\n        ssSetSFcnParam(rts, 4, (mxArray*)ATTN_cal->Analoginput_P5_Size);\n        ssSetSFcnParam(rts, 5, (mxArray*)ATTN_cal->Analoginput_P6_Size);\n        ssSetSFcnParam(rts, 6, (mxArray*)ATTN_cal->Analoginput_P7_Size);\n        ssSetSFcnParam(rts, 7, (mxArray*)ATTN_cal->Analoginput_P8_Size);\n        ssSetSFcnParam(rts, 8, (mxArray*)ATTN_cal->Analoginput_P9_Size);\n      }\n\n      /* work vectors */\n      ssSetIWork(rts, (int_T *) &ATTN_DW.Analoginput_IWORK[0]);\n      ssSetPWork(rts, (void **) &ATTN_DW.Analoginput_PWORK);\n\n      {\n        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)\n          &ATTN_M->NonInlinedSFcns.Sfcn1.dWork;\n        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)\n          &ATTN_M->NonInlinedSFcns.Sfcn1.dWorkAux;\n        ssSetSFcnDWork(rts, dWorkRecord);\n        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);\n        ssSetNumDWorkAsInt(rts, 2);\n\n        /* IWORK */\n        ssSetDWorkWidthAsInt(rts, 0, 2);\n        ssSetDWorkDataType(rts, 0,SS_INTEGER);\n        ssSetDWorkComplexSignal(rts, 0, 0);\n        ssSetDWork(rts, 0, &ATTN_DW.Analoginput_IWORK[0]);\n\n        /* PWORK */\n        ssSetDWorkWidthAsInt(rts, 1, 1);\n        ssSetDWorkDataType(rts, 1,SS_POINTER);\n        ssSetDWorkComplexSignal(rts, 1, 0);\n        ssSetDWork(rts, 1, &ATTN_DW.Analoginput_PWORK);\n      }\n\n      /* registration */\n      sg_IO191_ad_s(rts);\n      sfcnInitializeSizes(rts);\n      sfcnInitializeSampleTimes(rts);\n\n      /* adjust sample time */\n      ssSetSampleTime(rts, 0, 0.001);\n      ssSetOffsetTime(rts, 0, 0.0);\n      sfcnTsMap[0] = 1;\n\n      /* set compiled values of dynamic vector attributes */\n      ssSetNumNonsampledZCsAsInt(rts, 0);\n\n      /* Update connectivity flags for each port */\n      _ssSetOutputPortConnected(rts, 0, 0);\n      _ssSetOutputPortConnected(rts, 1, 1);\n      _ssSetOutputPortBeingMerged(rts, 0, 0);\n      _ssSetOutputPortBeingMerged(rts, 1, 0);\n\n      /* Update the BufferDstPort flags for each input port */\n    }\n\n    /* Level2 S-Function Block: ATTN/<Root>/Analog output  (sg_IO191_da_s) */\n    {\n      SimStruct *rts = ATTN_M->childSfunctions[2];\n\n      /* timing info */\n      time_T *sfcnPeriod = ATTN_M->NonInlinedSFcns.Sfcn2.sfcnPeriod;\n      time_T *sfcnOffset = ATTN_M->NonInlinedSFcns.Sfcn2.sfcnOffset;\n      int_T *sfcnTsMap = ATTN_M->NonInlinedSFcns.Sfcn2.sfcnTsMap;\n      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,\n                         sizeof(time_T)*1);\n      (void) std::memset(static_cast<void*>(sfcnOffset), 0,\n                         sizeof(time_T)*1);\n      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);\n      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);\n      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);\n\n      {\n        ssSetBlkInfo2Ptr(rts, &ATTN_M->NonInlinedSFcns.blkInfo2[2]);\n      }\n\n      _ssSetBlkInfo2PortInfo2Ptr(rts,\n        &ATTN_M->NonInlinedSFcns.inputOutputPortInfo2[2]);\n\n      /* Set up the mdlInfo pointer */\n      ssSetRTWSfcnInfo(rts, ATTN_M->sfcnInfo);\n\n      /* Allocate memory of model methods 2 */\n      {\n        ssSetModelMethods2(rts, &ATTN_M->NonInlinedSFcns.methods2[2]);\n      }\n\n      /* Allocate memory of model methods 3 */\n      {\n        ssSetModelMethods3(rts, &ATTN_M->NonInlinedSFcns.methods3[2]);\n      }\n\n      /* Allocate memory of model methods 4 */\n      {\n        ssSetModelMethods4(rts, &ATTN_M->NonInlinedSFcns.methods4[2]);\n      }\n\n      /* Allocate memory for states auxilliary information */\n      {\n        ssSetStatesInfo2(rts, &ATTN_M->NonInlinedSFcns.statesInfo2[2]);\n        ssSetPeriodicStatesInfo(rts, &ATTN_M->\n          NonInlinedSFcns.periodicStatesInfo[2]);\n      }\n\n      /* inputs */\n      {\n        _ssSetNumInputPorts(rts, 2);\n        ssSetPortInfoForInputs(rts, &ATTN_M->\n          NonInlinedSFcns.Sfcn2.inputPortInfo[0]);\n        ssSetPortInfoForInputs(rts, &ATTN_M->\n          NonInlinedSFcns.Sfcn2.inputPortInfo[0]);\n        _ssSetPortInfo2ForInputUnits(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn2.inputPortUnits[0]);\n        ssSetInputPortUnit(rts, 0, 0);\n        ssSetInputPortUnit(rts, 1, 0);\n        _ssSetPortInfo2ForInputCoSimAttribute(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn2.inputPortCoSimAttribute[0]);\n        ssSetInputPortIsContinuousQuantity(rts, 0, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 1, 0);\n\n        /* port 0 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 0, 1);\n          ssSetInputPortSignal(rts, 0, &ATTN_B.sf_MATLABFunction1_d.y);\n          _ssSetInputPortNumDimensions(rts, 0, 1);\n          ssSetInputPortWidthAsInt(rts, 0, 1);\n        }\n\n        /* port 1 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 1, 1);\n          ssSetInputPortSignal(rts, 1, &ATTN_B.sf_MATLABFunction2.y);\n          _ssSetInputPortNumDimensions(rts, 1, 1);\n          ssSetInputPortWidthAsInt(rts, 1, 1);\n        }\n      }\n\n      /* path info */\n      ssSetModelName(rts, \"Analog output \");\n      ssSetPath(rts, \"ATTN/Analog output \");\n      ssSetRTModel(rts,ATTN_M);\n      ssSetParentSS(rts, (NULL));\n      ssSetRootSS(rts, rts);\n      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);\n\n      /* parameters */\n      {\n        mxArray **sfcnParams = (mxArray **)\n          &ATTN_M->NonInlinedSFcns.Sfcn2.params;\n        ssSetSFcnParamsCount(rts, 7);\n        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);\n        ssSetSFcnParam(rts, 0, (mxArray*)ATTN_cal->Analogoutput_P1_Size);\n        ssSetSFcnParam(rts, 1, (mxArray*)ATTN_cal->Analogoutput_P2_Size);\n        ssSetSFcnParam(rts, 2, (mxArray*)ATTN_cal->Analogoutput_P3_Size);\n        ssSetSFcnParam(rts, 3, (mxArray*)ATTN_cal->Analogoutput_P4_Size);\n        ssSetSFcnParam(rts, 4, (mxArray*)ATTN_cal->Analogoutput_P5_Size);\n        ssSetSFcnParam(rts, 5, (mxArray*)ATTN_cal->Analogoutput_P6_Size);\n        ssSetSFcnParam(rts, 6, (mxArray*)ATTN_cal->Analogoutput_P7_Size);\n      }\n\n      /* work vectors */\n      ssSetPWork(rts, (void **) &ATTN_DW.Analogoutput_PWORK);\n\n      {\n        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)\n          &ATTN_M->NonInlinedSFcns.Sfcn2.dWork;\n        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)\n          &ATTN_M->NonInlinedSFcns.Sfcn2.dWorkAux;\n        ssSetSFcnDWork(rts, dWorkRecord);\n        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);\n        ssSetNumDWorkAsInt(rts, 1);\n\n        /* PWORK */\n        ssSetDWorkWidthAsInt(rts, 0, 1);\n        ssSetDWorkDataType(rts, 0,SS_POINTER);\n        ssSetDWorkComplexSignal(rts, 0, 0);\n        ssSetDWork(rts, 0, &ATTN_DW.Analogoutput_PWORK);\n      }\n\n      /* registration */\n      sg_IO191_da_s(rts);\n      sfcnInitializeSizes(rts);\n      sfcnInitializeSampleTimes(rts);\n\n      /* adjust sample time */\n      ssSetSampleTime(rts, 0, 0.001);\n      ssSetOffsetTime(rts, 0, 0.0);\n      sfcnTsMap[0] = 1;\n\n      /* set compiled values of dynamic vector attributes */\n      ssSetNumNonsampledZCsAsInt(rts, 0);\n\n      /* Update connectivity flags for each port */\n      _ssSetInputPortConnected(rts, 0, 1);\n      _ssSetInputPortConnected(rts, 1, 1);\n\n      /* Update the BufferDstPort flags for each input port */\n      ssSetInputPortBufferDstPort(rts, 0, -1);\n      ssSetInputPortBufferDstPort(rts, 1, -1);\n    }\n\n    /* Level2 S-Function Block: ATTN/<Root>/Digital output  (sg_IO191_do_s) */\n    {\n      SimStruct *rts = ATTN_M->childSfunctions[3];\n\n      /* timing info */\n      time_T *sfcnPeriod = ATTN_M->NonInlinedSFcns.Sfcn3.sfcnPeriod;\n      time_T *sfcnOffset = ATTN_M->NonInlinedSFcns.Sfcn3.sfcnOffset;\n      int_T *sfcnTsMap = ATTN_M->NonInlinedSFcns.Sfcn3.sfcnTsMap;\n      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,\n                         sizeof(time_T)*1);\n      (void) std::memset(static_cast<void*>(sfcnOffset), 0,\n                         sizeof(time_T)*1);\n      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);\n      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);\n      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);\n\n      {\n        ssSetBlkInfo2Ptr(rts, &ATTN_M->NonInlinedSFcns.blkInfo2[3]);\n      }\n\n      _ssSetBlkInfo2PortInfo2Ptr(rts,\n        &ATTN_M->NonInlinedSFcns.inputOutputPortInfo2[3]);\n\n      /* Set up the mdlInfo pointer */\n      ssSetRTWSfcnInfo(rts, ATTN_M->sfcnInfo);\n\n      /* Allocate memory of model methods 2 */\n      {\n        ssSetModelMethods2(rts, &ATTN_M->NonInlinedSFcns.methods2[3]);\n      }\n\n      /* Allocate memory of model methods 3 */\n      {\n        ssSetModelMethods3(rts, &ATTN_M->NonInlinedSFcns.methods3[3]);\n      }\n\n      /* Allocate memory of model methods 4 */\n      {\n        ssSetModelMethods4(rts, &ATTN_M->NonInlinedSFcns.methods4[3]);\n      }\n\n      /* Allocate memory for states auxilliary information */\n      {\n        ssSetStatesInfo2(rts, &ATTN_M->NonInlinedSFcns.statesInfo2[3]);\n        ssSetPeriodicStatesInfo(rts, &ATTN_M->\n          NonInlinedSFcns.periodicStatesInfo[3]);\n      }\n\n      /* inputs */\n      {\n        _ssSetNumInputPorts(rts, 15);\n        ssSetPortInfoForInputs(rts, &ATTN_M->\n          NonInlinedSFcns.Sfcn3.inputPortInfo[0]);\n        ssSetPortInfoForInputs(rts, &ATTN_M->\n          NonInlinedSFcns.Sfcn3.inputPortInfo[0]);\n        _ssSetPortInfo2ForInputUnits(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn3.inputPortUnits[0]);\n        ssSetInputPortUnit(rts, 0, 0);\n        ssSetInputPortUnit(rts, 1, 0);\n        ssSetInputPortUnit(rts, 2, 0);\n        ssSetInputPortUnit(rts, 3, 0);\n        ssSetInputPortUnit(rts, 4, 0);\n        ssSetInputPortUnit(rts, 5, 0);\n        ssSetInputPortUnit(rts, 6, 0);\n        ssSetInputPortUnit(rts, 7, 0);\n        ssSetInputPortUnit(rts, 8, 0);\n        ssSetInputPortUnit(rts, 9, 0);\n        ssSetInputPortUnit(rts, 10, 0);\n        ssSetInputPortUnit(rts, 11, 0);\n        ssSetInputPortUnit(rts, 12, 0);\n        ssSetInputPortUnit(rts, 13, 0);\n        ssSetInputPortUnit(rts, 14, 0);\n        _ssSetPortInfo2ForInputCoSimAttribute(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn3.inputPortCoSimAttribute[0]);\n        ssSetInputPortIsContinuousQuantity(rts, 0, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 1, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 2, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 3, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 4, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 5, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 6, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 7, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 8, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 9, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 10, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 11, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 12, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 13, 0);\n        ssSetInputPortIsContinuousQuantity(rts, 14, 0);\n\n        /* port 0 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 0, 1);\n          ssSetInputPortSignal(rts, 0, &ATTN_B.whiskCam_trig);\n          _ssSetInputPortNumDimensions(rts, 0, 1);\n          ssSetInputPortWidthAsInt(rts, 0, 1);\n        }\n\n        /* port 1 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 1, 1);\n          ssSetInputPortSignal(rts, 1, &ATTN_B.npxls_trig);\n          _ssSetInputPortNumDimensions(rts, 1, 1);\n          ssSetInputPortWidthAsInt(rts, 1, 1);\n        }\n\n        /* port 2 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 2, 1);\n          ssSetInputPortSignal(rts, 2, &ATTN_B.pupilCam_trig);\n          _ssSetInputPortNumDimensions(rts, 2, 1);\n          ssSetInputPortWidthAsInt(rts, 2, 1);\n        }\n\n        /* port 3 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 3, 1);\n          ssSetInputPortSignal(rts, 3, &ATTN_B.npxlsAcq_out);\n          _ssSetInputPortNumDimensions(rts, 3, 1);\n          ssSetInputPortWidthAsInt(rts, 3, 1);\n        }\n\n        /* port 4 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 4, 1);\n          ssSetInputPortSignal(rts, 4, &ATTN_B.y);\n          _ssSetInputPortNumDimensions(rts, 4, 1);\n          ssSetInputPortWidthAsInt(rts, 4, 1);\n        }\n\n        /* port 5 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 5, 1);\n          ssSetInputPortSignal(rts, 5, (const_cast<real_T*>(&ATTN_RGND)));\n          _ssSetInputPortNumDimensions(rts, 5, 1);\n          ssSetInputPortWidthAsInt(rts, 5, 1);\n        }\n\n        /* port 6 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 6, 1);\n          ssSetInputPortSignal(rts, 6, (const_cast<real_T*>(&ATTN_RGND)));\n          _ssSetInputPortNumDimensions(rts, 6, 1);\n          ssSetInputPortWidthAsInt(rts, 6, 1);\n        }\n\n        /* port 7 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 7, 1);\n          ssSetInputPortSignal(rts, 7, (const_cast<real_T*>(&ATTN_RGND)));\n          _ssSetInputPortNumDimensions(rts, 7, 1);\n          ssSetInputPortWidthAsInt(rts, 7, 1);\n        }\n\n        /* port 8 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 8, 1);\n          ssSetInputPortSignal(rts, 8, (const_cast<real_T*>(&ATTN_RGND)));\n          _ssSetInputPortNumDimensions(rts, 8, 1);\n          ssSetInputPortWidthAsInt(rts, 8, 1);\n        }\n\n        /* port 9 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 9, 1);\n          ssSetInputPortSignal(rts, 9, (const_cast<real_T*>(&ATTN_RGND)));\n          _ssSetInputPortNumDimensions(rts, 9, 1);\n          ssSetInputPortWidthAsInt(rts, 9, 1);\n        }\n\n        /* port 10 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 10, 1);\n          ssSetInputPortSignal(rts, 10, (const_cast<real_T*>(&ATTN_RGND)));\n          _ssSetInputPortNumDimensions(rts, 10, 1);\n          ssSetInputPortWidthAsInt(rts, 10, 1);\n        }\n\n        /* port 11 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 11, 1);\n          ssSetInputPortSignal(rts, 11, (const_cast<real_T*>(&ATTN_RGND)));\n          _ssSetInputPortNumDimensions(rts, 11, 1);\n          ssSetInputPortWidthAsInt(rts, 11, 1);\n        }\n\n        /* port 12 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 12, 1);\n          ssSetInputPortSignal(rts, 12, (const_cast<real_T*>(&ATTN_RGND)));\n          _ssSetInputPortNumDimensions(rts, 12, 1);\n          ssSetInputPortWidthAsInt(rts, 12, 1);\n        }\n\n        /* port 13 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 13, 1);\n          ssSetInputPortSignal(rts, 13, (const_cast<real_T*>(&ATTN_RGND)));\n          _ssSetInputPortNumDimensions(rts, 13, 1);\n          ssSetInputPortWidthAsInt(rts, 13, 1);\n        }\n\n        /* port 14 */\n        {\n          ssSetInputPortRequiredContiguous(rts, 14, 1);\n          ssSetInputPortSignal(rts, 14, &ATTN_B.tonePulse);\n          _ssSetInputPortNumDimensions(rts, 14, 1);\n          ssSetInputPortWidthAsInt(rts, 14, 1);\n        }\n      }\n\n      /* path info */\n      ssSetModelName(rts, \"Digital output \");\n      ssSetPath(rts, \"ATTN/Digital output \");\n      ssSetRTModel(rts,ATTN_M);\n      ssSetParentSS(rts, (NULL));\n      ssSetRootSS(rts, rts);\n      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);\n\n      /* parameters */\n      {\n        mxArray **sfcnParams = (mxArray **)\n          &ATTN_M->NonInlinedSFcns.Sfcn3.params;\n        ssSetSFcnParamsCount(rts, 6);\n        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);\n        ssSetSFcnParam(rts, 0, (mxArray*)ATTN_cal->Digitaloutput_P1_Size);\n        ssSetSFcnParam(rts, 1, (mxArray*)ATTN_cal->Digitaloutput_P2_Size);\n        ssSetSFcnParam(rts, 2, (mxArray*)ATTN_cal->Digitaloutput_P3_Size);\n        ssSetSFcnParam(rts, 3, (mxArray*)ATTN_cal->Digitaloutput_P4_Size);\n        ssSetSFcnParam(rts, 4, (mxArray*)ATTN_cal->Digitaloutput_P5_Size);\n        ssSetSFcnParam(rts, 5, (mxArray*)ATTN_cal->Digitaloutput_P6_Size);\n      }\n\n      /* work vectors */\n      ssSetPWork(rts, (void **) &ATTN_DW.Digitaloutput_PWORK);\n\n      {\n        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)\n          &ATTN_M->NonInlinedSFcns.Sfcn3.dWork;\n        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)\n          &ATTN_M->NonInlinedSFcns.Sfcn3.dWorkAux;\n        ssSetSFcnDWork(rts, dWorkRecord);\n        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);\n        ssSetNumDWorkAsInt(rts, 1);\n\n        /* PWORK */\n        ssSetDWorkWidthAsInt(rts, 0, 1);\n        ssSetDWorkDataType(rts, 0,SS_POINTER);\n        ssSetDWorkComplexSignal(rts, 0, 0);\n        ssSetDWork(rts, 0, &ATTN_DW.Digitaloutput_PWORK);\n      }\n\n      /* registration */\n      sg_IO191_do_s(rts);\n      sfcnInitializeSizes(rts);\n      sfcnInitializeSampleTimes(rts);\n\n      /* adjust sample time */\n      ssSetSampleTime(rts, 0, 0.001);\n      ssSetOffsetTime(rts, 0, 0.0);\n      sfcnTsMap[0] = 1;\n\n      /* set compiled values of dynamic vector attributes */\n      ssSetNumNonsampledZCsAsInt(rts, 0);\n\n      /* Update connectivity flags for each port */\n      _ssSetInputPortConnected(rts, 0, 1);\n      _ssSetInputPortConnected(rts, 1, 1);\n      _ssSetInputPortConnected(rts, 2, 1);\n      _ssSetInputPortConnected(rts, 3, 1);\n      _ssSetInputPortConnected(rts, 4, 1);\n      _ssSetInputPortConnected(rts, 5, 0);\n      _ssSetInputPortConnected(rts, 6, 0);\n      _ssSetInputPortConnected(rts, 7, 0);\n      _ssSetInputPortConnected(rts, 8, 0);\n      _ssSetInputPortConnected(rts, 9, 0);\n      _ssSetInputPortConnected(rts, 10, 0);\n      _ssSetInputPortConnected(rts, 11, 0);\n      _ssSetInputPortConnected(rts, 12, 0);\n      _ssSetInputPortConnected(rts, 13, 0);\n      _ssSetInputPortConnected(rts, 14, 1);\n\n      /* Update the BufferDstPort flags for each input port */\n      ssSetInputPortBufferDstPort(rts, 0, -1);\n      ssSetInputPortBufferDstPort(rts, 1, -1);\n      ssSetInputPortBufferDstPort(rts, 2, -1);\n      ssSetInputPortBufferDstPort(rts, 3, -1);\n      ssSetInputPortBufferDstPort(rts, 4, -1);\n      ssSetInputPortBufferDstPort(rts, 5, -1);\n      ssSetInputPortBufferDstPort(rts, 6, -1);\n      ssSetInputPortBufferDstPort(rts, 7, -1);\n      ssSetInputPortBufferDstPort(rts, 8, -1);\n      ssSetInputPortBufferDstPort(rts, 9, -1);\n      ssSetInputPortBufferDstPort(rts, 10, -1);\n      ssSetInputPortBufferDstPort(rts, 11, -1);\n      ssSetInputPortBufferDstPort(rts, 12, -1);\n      ssSetInputPortBufferDstPort(rts, 13, -1);\n      ssSetInputPortBufferDstPort(rts, 14, -1);\n    }\n\n    /* Level2 S-Function Block: ATTN/<Root>/Digital input  (sg_IO191_di_s) */\n    {\n      SimStruct *rts = ATTN_M->childSfunctions[4];\n\n      /* timing info */\n      time_T *sfcnPeriod = ATTN_M->NonInlinedSFcns.Sfcn4.sfcnPeriod;\n      time_T *sfcnOffset = ATTN_M->NonInlinedSFcns.Sfcn4.sfcnOffset;\n      int_T *sfcnTsMap = ATTN_M->NonInlinedSFcns.Sfcn4.sfcnTsMap;\n      (void) std::memset(static_cast<void*>(sfcnPeriod), 0,\n                         sizeof(time_T)*1);\n      (void) std::memset(static_cast<void*>(sfcnOffset), 0,\n                         sizeof(time_T)*1);\n      ssSetSampleTimePtr(rts, &sfcnPeriod[0]);\n      ssSetOffsetTimePtr(rts, &sfcnOffset[0]);\n      ssSetSampleTimeTaskIDPtr(rts, sfcnTsMap);\n\n      {\n        ssSetBlkInfo2Ptr(rts, &ATTN_M->NonInlinedSFcns.blkInfo2[4]);\n      }\n\n      _ssSetBlkInfo2PortInfo2Ptr(rts,\n        &ATTN_M->NonInlinedSFcns.inputOutputPortInfo2[4]);\n\n      /* Set up the mdlInfo pointer */\n      ssSetRTWSfcnInfo(rts, ATTN_M->sfcnInfo);\n\n      /* Allocate memory of model methods 2 */\n      {\n        ssSetModelMethods2(rts, &ATTN_M->NonInlinedSFcns.methods2[4]);\n      }\n\n      /* Allocate memory of model methods 3 */\n      {\n        ssSetModelMethods3(rts, &ATTN_M->NonInlinedSFcns.methods3[4]);\n      }\n\n      /* Allocate memory of model methods 4 */\n      {\n        ssSetModelMethods4(rts, &ATTN_M->NonInlinedSFcns.methods4[4]);\n      }\n\n      /* Allocate memory for states auxilliary information */\n      {\n        ssSetStatesInfo2(rts, &ATTN_M->NonInlinedSFcns.statesInfo2[4]);\n        ssSetPeriodicStatesInfo(rts, &ATTN_M->\n          NonInlinedSFcns.periodicStatesInfo[4]);\n      }\n\n      /* outputs */\n      {\n        ssSetPortInfoForOutputs(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn4.outputPortInfo[0]);\n        ssSetPortInfoForOutputs(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn4.outputPortInfo[0]);\n        _ssSetNumOutputPorts(rts, 1);\n        _ssSetPortInfo2ForOutputUnits(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn4.outputPortUnits[0]);\n        ssSetOutputPortUnit(rts, 0, 0);\n        _ssSetPortInfo2ForOutputCoSimAttribute(rts,\n          &ATTN_M->NonInlinedSFcns.Sfcn4.outputPortCoSimAttribute[0]);\n        ssSetOutputPortIsContinuousQuantity(rts, 0, 0);\n\n        /* port 0 */\n        {\n          _ssSetOutputPortNumDimensions(rts, 0, 1);\n          ssSetOutputPortWidthAsInt(rts, 0, 1);\n          ssSetOutputPortSignal(rts, 0, ((real_T *) &ATTN_B.PulseGen1Hz));\n        }\n      }\n\n      /* path info */\n      ssSetModelName(rts, \"Digital input \");\n      ssSetPath(rts, \"ATTN/Digital input \");\n      ssSetRTModel(rts,ATTN_M);\n      ssSetParentSS(rts, (NULL));\n      ssSetRootSS(rts, rts);\n      ssSetVersion(rts, SIMSTRUCT_VERSION_LEVEL2);\n\n      /* parameters */\n      {\n        mxArray **sfcnParams = (mxArray **)\n          &ATTN_M->NonInlinedSFcns.Sfcn4.params;\n        ssSetSFcnParamsCount(rts, 4);\n        ssSetSFcnParamsPtr(rts, &sfcnParams[0]);\n        ssSetSFcnParam(rts, 0, (mxArray*)ATTN_cal->Digitalinput_P1_Size);\n        ssSetSFcnParam(rts, 1, (mxArray*)ATTN_cal->Digitalinput_P2_Size);\n        ssSetSFcnParam(rts, 2, (mxArray*)ATTN_cal->Digitalinput_P3_Size);\n        ssSetSFcnParam(rts, 3, (mxArray*)ATTN_cal->Digitalinput_P4_Size);\n      }\n\n      /* work vectors */\n      ssSetPWork(rts, (void **) &ATTN_DW.Digitalinput_PWORK);\n\n      {\n        struct _ssDWorkRecord *dWorkRecord = (struct _ssDWorkRecord *)\n          &ATTN_M->NonInlinedSFcns.Sfcn4.dWork;\n        struct _ssDWorkAuxRecord *dWorkAuxRecord = (struct _ssDWorkAuxRecord *)\n          &ATTN_M->NonInlinedSFcns.Sfcn4.dWorkAux;\n        ssSetSFcnDWork(rts, dWorkRecord);\n        ssSetSFcnDWorkAux(rts, dWorkAuxRecord);\n        ssSetNumDWorkAsInt(rts, 1);\n\n        /* PWORK */\n        ssSetDWorkWidthAsInt(rts, 0, 1);\n        ssSetDWorkDataType(rts, 0,SS_POINTER);\n        ssSetDWorkComplexSignal(rts, 0, 0);\n        ssSetDWork(rts, 0, &ATTN_DW.Digitalinput_PWORK);\n      }\n\n      /* registration */\n      sg_IO191_di_s(rts);\n      sfcnInitializeSizes(rts);\n      sfcnInitializeSampleTimes(rts);\n\n      /* adjust sample time */\n      ssSetSampleTime(rts, 0, 0.001);\n      ssSetOffsetTime(rts, 0, 0.0);\n      sfcnTsMap[0] = 1;\n\n      /* set compiled values of dynamic vector attributes */\n      ssSetNumNonsampledZCsAsInt(rts, 0);\n\n      /* Update connectivity flags for each port */\n      _ssSetOutputPortConnected(rts, 0, 1);\n      _ssSetOutputPortBeingMerged(rts, 0, 0);\n\n      /* Update the BufferDstPort flags for each input port */\n    }\n  }\n\n  /* Start for S-Function (sg_IO191_setup_s): '<Root>/Setup ' */\n  /* Level2 S-Function Block: '<Root>/Setup ' (sg_IO191_setup_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[0];\n    sfcnStart(rts);\n    if (ssGetErrorStatus(rts) != (NULL))\n      return;\n  }\n\n  /* Start for S-Function (sg_IO191_ad_s): '<Root>/Analog input ' */\n  /* Level2 S-Function Block: '<Root>/Analog input ' (sg_IO191_ad_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[1];\n    sfcnStart(rts);\n    if (ssGetErrorStatus(rts) != (NULL))\n      return;\n  }\n\n  /* Start for S-Function (sg_IO191_da_s): '<Root>/Analog output ' */\n  /* Level2 S-Function Block: '<Root>/Analog output ' (sg_IO191_da_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[2];\n    sfcnStart(rts);\n    if (ssGetErrorStatus(rts) != (NULL))\n      return;\n  }\n\n  /* Start for S-Function (sg_IO191_do_s): '<Root>/Digital output ' */\n  /* Level2 S-Function Block: '<Root>/Digital output ' (sg_IO191_do_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[3];\n    sfcnStart(rts);\n    if (ssGetErrorStatus(rts) != (NULL))\n      return;\n  }\n\n  /* Start for S-Function (sg_IO191_di_s): '<Root>/Digital input ' */\n  /* Level2 S-Function Block: '<Root>/Digital input ' (sg_IO191_di_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[4];\n    sfcnStart(rts);\n    if (ssGetErrorStatus(rts) != (NULL))\n      return;\n  }\n\n  {\n    int32_T i;\n    static const uint32_T tmp[625] = { 5489U, 1301868182U, 2938499221U,\n      2950281878U, 1875628136U, 751856242U, 944701696U, 2243192071U, 694061057U,\n      219885934U, 2066767472U, 3182869408U, 485472502U, 2336857883U, 1071588843U,\n      3418470598U, 951210697U, 3693558366U, 2923482051U, 1793174584U,\n      2982310801U, 1586906132U, 1951078751U, 1808158765U, 1733897588U,\n      431328322U, 4202539044U, 530658942U, 1714810322U, 3025256284U, 3342585396U,\n      1937033938U, 2640572511U, 1654299090U, 3692403553U, 4233871309U,\n      3497650794U, 862629010U, 2943236032U, 2426458545U, 1603307207U,\n      1133453895U, 3099196360U, 2208657629U, 2747653927U, 931059398U, 761573964U,\n      3157853227U, 785880413U, 730313442U, 124945756U, 2937117055U, 3295982469U,\n      1724353043U, 3021675344U, 3884886417U, 4010150098U, 4056961966U,\n      699635835U, 2681338818U, 1339167484U, 720757518U, 2800161476U, 2376097373U,\n      1532957371U, 3902664099U, 1238982754U, 3725394514U, 3449176889U,\n      3570962471U, 4287636090U, 4087307012U, 3603343627U, 202242161U,\n      2995682783U, 1620962684U, 3704723357U, 371613603U, 2814834333U,\n      2111005706U, 624778151U, 2094172212U, 4284947003U, 1211977835U, 991917094U,\n      1570449747U, 2962370480U, 1259410321U, 170182696U, 146300961U, 2836829791U,\n      619452428U, 2723670296U, 1881399711U, 1161269684U, 1675188680U,\n      4132175277U, 780088327U, 3409462821U, 1036518241U, 1834958505U,\n      3048448173U, 161811569U, 618488316U, 44795092U, 3918322701U, 1924681712U,\n      3239478144U, 383254043U, 4042306580U, 2146983041U, 3992780527U,\n      3518029708U, 3545545436U, 3901231469U, 1896136409U, 2028528556U,\n      2339662006U, 501326714U, 2060962201U, 2502746480U, 561575027U, 581893337U,\n      3393774360U, 1778912547U, 3626131687U, 2175155826U, 319853231U, 986875531U,\n      819755096U, 2915734330U, 2688355739U, 3482074849U, 2736559U, 2296975761U,\n      1029741190U, 2876812646U, 690154749U, 579200347U, 4027461746U, 1285330465U,\n      2701024045U, 4117700889U, 759495121U, 3332270341U, 2313004527U,\n      2277067795U, 4131855432U, 2722057515U, 1264804546U, 3848622725U,\n      2211267957U, 4100593547U, 959123777U, 2130745407U, 3194437393U, 486673947U,\n      1377371204U, 17472727U, 352317554U, 3955548058U, 159652094U, 1232063192U,\n      3835177280U, 49423123U, 3083993636U, 733092U, 2120519771U, 2573409834U,\n      1112952433U, 3239502554U, 761045320U, 1087580692U, 2540165110U, 641058802U,\n      1792435497U, 2261799288U, 1579184083U, 627146892U, 2165744623U,\n      2200142389U, 2167590760U, 2381418376U, 1793358889U, 3081659520U,\n      1663384067U, 2009658756U, 2689600308U, 739136266U, 2304581039U,\n      3529067263U, 591360555U, 525209271U, 3131882996U, 294230224U, 2076220115U,\n      3113580446U, 1245621585U, 1386885462U, 3203270426U, 123512128U, 12350217U,\n      354956375U, 4282398238U, 3356876605U, 3888857667U, 157639694U, 2616064085U,\n      1563068963U, 2762125883U, 4045394511U, 4180452559U, 3294769488U,\n      1684529556U, 1002945951U, 3181438866U, 22506664U, 691783457U, 2685221343U,\n      171579916U, 3878728600U, 2475806724U, 2030324028U, 3331164912U,\n      1708711359U, 1970023127U, 2859691344U, 2588476477U, 2748146879U,\n      136111222U, 2967685492U, 909517429U, 2835297809U, 3206906216U, 3186870716U,\n      341264097U, 2542035121U, 3353277068U, 548223577U, 3170936588U, 1678403446U,\n      297435620U, 2337555430U, 466603495U, 1132321815U, 1208589219U, 696392160U,\n      894244439U, 2562678859U, 470224582U, 3306867480U, 201364898U, 2075966438U,\n      1767227936U, 2929737987U, 3674877796U, 2654196643U, 3692734598U,\n      3528895099U, 2796780123U, 3048728353U, 842329300U, 191554730U, 2922459673U,\n      3489020079U, 3979110629U, 1022523848U, 2202932467U, 3583655201U,\n      3565113719U, 587085778U, 4176046313U, 3013713762U, 950944241U, 396426791U,\n      3784844662U, 3477431613U, 3594592395U, 2782043838U, 3392093507U,\n      3106564952U, 2829419931U, 1358665591U, 2206918825U, 3170783123U, 31522386U,\n      2988194168U, 1782249537U, 1105080928U, 843500134U, 1225290080U,\n      1521001832U, 3605886097U, 2802786495U, 2728923319U, 3996284304U,\n      903417639U, 1171249804U, 1020374987U, 2824535874U, 423621996U, 1988534473U,\n      2493544470U, 1008604435U, 1756003503U, 1488867287U, 1386808992U,\n      732088248U, 1780630732U, 2482101014U, 976561178U, 1543448953U, 2602866064U,\n      2021139923U, 1952599828U, 2360242564U, 2117959962U, 2753061860U,\n      2388623612U, 4138193781U, 2962920654U, 2284970429U, 766920861U,\n      3457264692U, 2879611383U, 815055854U, 2332929068U, 1254853997U,\n      3740375268U, 3799380844U, 4091048725U, 2006331129U, 1982546212U,\n      686850534U, 1907447564U, 2682801776U, 2780821066U, 998290361U, 1342433871U,\n      4195430425U, 607905174U, 3902331779U, 2454067926U, 1708133115U,\n      1170874362U, 2008609376U, 3260320415U, 2211196135U, 433538229U,\n      2728786374U, 2189520818U, 262554063U, 1182318347U, 3710237267U,\n      1221022450U, 715966018U, 2417068910U, 2591870721U, 2870691989U,\n      3418190842U, 4238214053U, 1540704231U, 1575580968U, 2095917976U,\n      4078310857U, 2313532447U, 2110690783U, 4056346629U, 4061784526U,\n      1123218514U, 551538993U, 597148360U, 4120175196U, 3581618160U, 3181170517U,\n      422862282U, 3227524138U, 1713114790U, 662317149U, 1230418732U, 928171837U,\n      1324564878U, 1928816105U, 1786535431U, 2878099422U, 3290185549U,\n      539474248U, 1657512683U, 552370646U, 1671741683U, 3655312128U, 1552739510U,\n      2605208763U, 1441755014U, 181878989U, 3124053868U, 1447103986U,\n      3183906156U, 1728556020U, 3502241336U, 3055466967U, 1013272474U,\n      818402132U, 1715099063U, 2900113506U, 397254517U, 4194863039U, 1009068739U,\n      232864647U, 2540223708U, 2608288560U, 2415367765U, 478404847U, 3455100648U,\n      3182600021U, 2115988978U, 434269567U, 4117179324U, 3461774077U, 887256537U,\n      3545801025U, 286388911U, 3451742129U, 1981164769U, 786667016U, 3310123729U,\n      3097811076U, 2224235657U, 2959658883U, 3370969234U, 2514770915U,\n      3345656436U, 2677010851U, 2206236470U, 271648054U, 2342188545U,\n      4292848611U, 3646533909U, 3754009956U, 3803931226U, 4160647125U,\n      1477814055U, 4043852216U, 1876372354U, 3133294443U, 3871104810U,\n      3177020907U, 2074304428U, 3479393793U, 759562891U, 164128153U, 1839069216U,\n      2114162633U, 3989947309U, 3611054956U, 1333547922U, 835429831U, 494987340U,\n      171987910U, 1252001001U, 370809172U, 3508925425U, 2535703112U, 1276855041U,\n      1922855120U, 835673414U, 3030664304U, 613287117U, 171219893U, 3423096126U,\n      3376881639U, 2287770315U, 1658692645U, 1262815245U, 3957234326U,\n      1168096164U, 2968737525U, 2655813712U, 2132313144U, 3976047964U,\n      326516571U, 353088456U, 3679188938U, 3205649712U, 2654036126U, 1249024881U,\n      880166166U, 691800469U, 2229503665U, 1673458056U, 4032208375U, 1851778863U,\n      2563757330U, 376742205U, 1794655231U, 340247333U, 1505873033U, 396524441U,\n      879666767U, 3335579166U, 3260764261U, 3335999539U, 506221798U, 4214658741U,\n      975887814U, 2080536343U, 3360539560U, 571586418U, 138896374U, 4234352651U,\n      2737620262U, 3928362291U, 1516365296U, 38056726U, 3599462320U, 3585007266U,\n      3850961033U, 471667319U, 1536883193U, 2310166751U, 1861637689U,\n      2530999841U, 4139843801U, 2710569485U, 827578615U, 2012334720U,\n      2907369459U, 3029312804U, 2820112398U, 1965028045U, 35518606U, 2478379033U,\n      643747771U, 1924139484U, 4123405127U, 3811735531U, 3429660832U,\n      3285177704U, 1948416081U, 1311525291U, 1183517742U, 1739192232U,\n      3979815115U, 2567840007U, 4116821529U, 213304419U, 4125718577U,\n      1473064925U, 2442436592U, 1893310111U, 4195361916U, 3747569474U,\n      828465101U, 2991227658U, 750582866U, 1205170309U, 1409813056U, 678418130U,\n      1171531016U, 3821236156U, 354504587U, 4202874632U, 3882511497U,\n      1893248677U, 1903078632U, 26340130U, 2069166240U, 3657122492U, 3725758099U,\n      831344905U, 811453383U, 3447711422U, 2434543565U, 4166886888U, 3358210805U,\n      4142984013U, 2988152326U, 3527824853U, 982082992U, 2809155763U, 190157081U,\n      3340214818U, 2365432395U, 2548636180U, 2894533366U, 3474657421U,\n      2372634704U, 2845748389U, 43024175U, 2774226648U, 1987702864U, 3186502468U,\n      453610222U, 4204736567U, 1392892630U, 2471323686U, 2470534280U,\n      3541393095U, 4269885866U, 3909911300U, 759132955U, 1482612480U, 667715263U,\n      1795580598U, 2337923983U, 3390586366U, 581426223U, 1515718634U, 476374295U,\n      705213300U, 363062054U, 2084697697U, 2407503428U, 2292957699U, 2426213835U,\n      2199989172U, 1987356470U, 4026755612U, 2147252133U, 270400031U,\n      1367820199U, 2369854699U, 2844269403U, 79981964U, 624U };\n\n    /* InitializeConditions for Memory: '<Root>/Memory8' */\n    ATTN_DW.Memory8_PreviousInput = ATTN_cal->Memory8_InitialCondition;\n\n    /* InitializeConditions for Memory: '<Root>/Memory2' */\n    ATTN_DW.Memory2_PreviousInput = ATTN_cal->Memory2_InitialCondition;\n\n    /* InitializeConditions for Memory: '<Root>/Memory1' */\n    ATTN_DW.Memory1_PreviousInput = ATTN_cal->Memory1_InitialCondition;\n\n    /* InitializeConditions for Memory: '<Root>/Memory' */\n    ATTN_DW.Memory_PreviousInput = ATTN_cal->Memory_InitialCondition;\n\n    /* InitializeConditions for DiscreteFir: '<S1>/Generated Filter Block' */\n    ATTN_DW.GeneratedFilterBlock_circBuf = 0;\n    for (i = 0; i < 4029; i++) {\n      ATTN_DW.GeneratedFilterBlock_states[i] =\n        ATTN_cal->GeneratedFilterBlock_InitialSta;\n    }\n\n    /* End of InitializeConditions for DiscreteFir: '<S1>/Generated Filter Block' */\n\n    /* InitializeConditions for Memory: '<Root>/Memory11' */\n    ATTN_DW.Memory11_PreviousInput = ATTN_cal->Memory11_InitialCondition;\n\n    /* InitializeConditions for Memory: '<Root>/Memory7' */\n    ATTN_DW.Memory7_PreviousInput = ATTN_cal->Memory7_InitialCondition;\n\n    /* InitializeConditions for Memory: '<Root>/Memory3' */\n    ATTN_DW.Memory3_PreviousInput = ATTN_cal->Memory3_InitialCondition;\n\n    /* InitializeConditions for Memory: '<Root>/Memory4' */\n    ATTN_DW.Memory4_PreviousInput = ATTN_cal->Memory4_InitialCondition;\n\n    /* InitializeConditions for Memory: '<Root>/Memory9' */\n    ATTN_DW.Memory9_PreviousInput = ATTN_cal->Memory9_InitialCondition;\n\n    /* InitializeConditions for Memory: '<Root>/Memory5' */\n    ATTN_DW.Memory5_PreviousInput = ATTN_cal->Memory5_InitialCondition;\n\n    /* InitializeConditions for Memory: '<Root>/Memory6' */\n    ATTN_DW.Memory6_PreviousInput = ATTN_cal->Memory6_InitialCondition;\n\n    /* InitializeConditions for Memory: '<Root>/Memory10' */\n    ATTN_DW.Memory10_PreviousInput = ATTN_cal->Memory10_InitialCondition;\n\n    /* InitializeConditions for DiscretePulseGenerator: '<Root>/Whisker Trig' */\n    ATTN_DW.clockTickCounter = 0;\n\n    /* InitializeConditions for DiscretePulseGenerator: '<Root>/Npxls Trig' */\n    ATTN_DW.clockTickCounter_n = 0;\n\n    /* InitializeConditions for DiscretePulseGenerator: '<Root>/Pupil Trig' */\n    ATTN_DW.clockTickCounter_c = 0;\n\n    /* SystemInitialize for MATLAB Function: '<Root>/MATLAB Function1' */\n    ATTN_DW.sfEvent_b = ATTN_CALL_EVENT_n;\n    ATTN_DW.is_active_c6_ATTN = 0U;\n\n    /* SystemInitialize for MATLAB Function: '<Root>/MATLAB Function' */\n    std::memcpy(&ATTN_DW.state_k[0], &tmp[0], 625U * sizeof(uint32_T));\n    ATTN_DW.sfEvent_e = ATTN_CALL_EVENT_n;\n    ATTN_DW.is_active_c1_ATTN = 0U;\n    ATTN_DW.method = 7U;\n    ATTN_DW.method_not_empty = true;\n    ATTN_DW.state = 1144108930U;\n    ATTN_DW.state_not_empty = true;\n    ATTN_DW.state_p[0] = 362436069U;\n    ATTN_DW.state_p[1] = 521288629U;\n    ATTN_DW.state_not_empty_k = true;\n    ATTN_DW.state_not_empty_d = true;\n\n    /* SystemInitialize for MATLAB Function: '<S5>/MATLAB Function1' */\n    ATTN_MATLABFunction2_Init(&ATTN_DW.sf_MATLABFunction1_d);\n\n    /* SystemInitialize for MATLAB Function: '<S4>/MATLAB Function2' */\n    ATTN_MATLABFunction2_Init(&ATTN_DW.sf_MATLABFunction2);\n\n    /* SystemInitialize for MATLAB Function: '<S6>/MATLAB Function1' */\n    ATTN_DW.sfEvent_a = ATTN_CALL_EVENT_n;\n    ATTN_DW.t0_not_empty_p = false;\n    ATTN_DW.is_active_c5_ATTN = 0U;\n\n    /* SystemInitialize for MATLAB Function: '<S7>/MATLAB Function1' */\n    ATTN_DW.sfEvent = ATTN_CALL_EVENT_n;\n    ATTN_DW.t0_not_empty = false;\n    ATTN_DW.is_active_c2_ATTN = 0U;\n  }\n}\n\n/* Model terminate function */\nvoid ATTN_terminate(void)\n{\n  /* Terminate for S-Function (sg_IO191_setup_s): '<Root>/Setup ' */\n  /* Level2 S-Function Block: '<Root>/Setup ' (sg_IO191_setup_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[0];\n    sfcnTerminate(rts);\n  }\n\n  /* Terminate for S-Function (sg_IO191_ad_s): '<Root>/Analog input ' */\n  /* Level2 S-Function Block: '<Root>/Analog input ' (sg_IO191_ad_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[1];\n    sfcnTerminate(rts);\n  }\n\n  /* Terminate for S-Function (sg_IO191_da_s): '<Root>/Analog output ' */\n  /* Level2 S-Function Block: '<Root>/Analog output ' (sg_IO191_da_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[2];\n    sfcnTerminate(rts);\n  }\n\n  /* Terminate for S-Function (sg_IO191_do_s): '<Root>/Digital output ' */\n  /* Level2 S-Function Block: '<Root>/Digital output ' (sg_IO191_do_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[3];\n    sfcnTerminate(rts);\n  }\n\n  /* Terminate for S-Function (sg_IO191_di_s): '<Root>/Digital input ' */\n  /* Level2 S-Function Block: '<Root>/Digital input ' (sg_IO191_di_s) */\n  {\n    SimStruct *rts = ATTN_M->childSfunctions[4];\n    sfcnTerminate(rts);\n  }\n}\n"},{"name":"ATTN.h","type":"header","group":"model","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * ATTN.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_ATTN_h_\n#define RTW_HEADER_ATTN_h_\n#include <logsrv.h>\n#include \"rtwtypes.h\"\n#include \"simstruc.h\"\n#include \"fixedpoint.h\"\n#include \"verify/verifyIntrf.h\"\n#include \"ATTN_types.h\"\n#include <stddef.h>\n#include <cstring>\n#include \"ATTN_cal.h\"\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n/* Macros for accessing real-time model data structure */\n#ifndef rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag\n#define rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm) ((rtm)->CTOutputIncnstWithState)\n#endif\n\n#ifndef rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag\n#define rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm, val) ((rtm)->CTOutputIncnstWithState = (val))\n#endif\n\n#ifndef rtmGetDerivCacheNeedsReset\n#define rtmGetDerivCacheNeedsReset(rtm) ((rtm)->derivCacheNeedsReset)\n#endif\n\n#ifndef rtmSetDerivCacheNeedsReset\n#define rtmSetDerivCacheNeedsReset(rtm, val) ((rtm)->derivCacheNeedsReset = (val))\n#endif\n\n#ifndef rtmGetFinalTime\n#define rtmGetFinalTime(rtm)           ((rtm)->Timing.tFinal)\n#endif\n\n#ifndef rtmGetSampleHitArray\n#define rtmGetSampleHitArray(rtm)      ((rtm)->Timing.sampleHitArray)\n#endif\n\n#ifndef rtmGetStepSize\n#define rtmGetStepSize(rtm)            ((rtm)->Timing.stepSize)\n#endif\n\n#ifndef rtmGetZCCacheNeedsReset\n#define rtmGetZCCacheNeedsReset(rtm)   ((rtm)->zCCacheNeedsReset)\n#endif\n\n#ifndef rtmSetZCCacheNeedsReset\n#define rtmSetZCCacheNeedsReset(rtm, val) ((rtm)->zCCacheNeedsReset = (val))\n#endif\n\n#ifndef rtmGet_TimeOfLastOutput\n#define rtmGet_TimeOfLastOutput(rtm)   ((rtm)->Timing.timeOfLastOutput)\n#endif\n\n#ifndef rtmGetErrorStatus\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\n#endif\n\n#ifndef rtmSetErrorStatus\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\n#endif\n\n#ifndef rtmGetStopRequested\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\n#endif\n\n#ifndef rtmSetStopRequested\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\n#endif\n\n#ifndef rtmGetStopRequestedPtr\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\n#endif\n\n#ifndef rtmGetT\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\n#endif\n\n#ifndef rtmGetTFinal\n#define rtmGetTFinal(rtm)              ((rtm)->Timing.tFinal)\n#endif\n\n#ifndef rtmGetTPtr\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\n#endif\n\n#ifndef rtmGetTStart\n#define rtmGetTStart(rtm)              ((rtm)->Timing.tStart)\n#endif\n\n#ifndef rtmGetTimeOfLastOutput\n#define rtmGetTimeOfLastOutput(rtm)    ((rtm)->Timing.timeOfLastOutput)\n#endif\n\n/* Block signals for system '<S4>/MATLAB Function2' */\nstruct B_MATLABFunction2_ATTN_T {\n  real_T y;                            /* '<S4>/MATLAB Function2' */\n};\n\n/* Block states (default storage) for system '<S4>/MATLAB Function2' */\nstruct DW_MATLABFunction2_ATTN_T {\n  real_T t0;                           /* '<S4>/MATLAB Function2' */\n  real_T y0;                           /* '<S4>/MATLAB Function2' */\n  int32_T sfEvent;                     /* '<S4>/MATLAB Function2' */\n  uint8_T is_active_c3_ATTN;           /* '<S4>/MATLAB Function2' */\n  boolean_T doneDoubleBufferReInit;    /* '<S4>/MATLAB Function2' */\n  boolean_T t0_not_empty;              /* '<S4>/MATLAB Function2' */\n  boolean_T y0_not_empty;              /* '<S4>/MATLAB Function2' */\n};\n\n/* Block signals (default storage) */\nstruct B_ATTN_T {\n  real_T Memory8;                      /* '<Root>/Memory8' */\n  real_T Memory2;                      /* '<Root>/Memory2' */\n  real_T Memory1;                      /* '<Root>/Memory1' */\n  real_T Memory;                       /* '<Root>/Memory' */\n  real_T Analoginput_o1;               /* '<Root>/Analog input ' */\n  real_T lickometer_piezo;             /* '<Root>/Analog input ' */\n  real_T GeneratedFilterBlock;         /* '<S1>/Generated Filter Block' */\n  real_T Memory11;                     /* '<Root>/Memory11' */\n  real_T Memory7;                      /* '<Root>/Memory7' */\n  real_T clock_time;                   /* '<Root>/Clock' */\n  real_T Memory3;                      /* '<Root>/Memory3' */\n  real_T Memory4;                      /* '<Root>/Memory4' */\n  real_T Memory9;                      /* '<Root>/Memory9' */\n  real_T Memory5;                      /* '<Root>/Memory5' */\n  real_T Memory6;                      /* '<Root>/Memory6' */\n  real_T Memory10;                     /* '<Root>/Memory10' */\n  real_T Clock1;                       /* '<S5>/Clock1' */\n  real_T Clock2;                       /* '<S4>/Clock2' */\n  real_T whiskCam_trig;                /* '<Root>/Whisker Trig' */\n  real_T npxls_trig;                   /* '<Root>/Npxls Trig' */\n  real_T pupilCam_trig;                /* '<Root>/Pupil Trig' */\n  real_T Clock1_b;                     /* '<S6>/Clock1' */\n  real_T Clock1_l;                     /* '<S7>/Clock1' */\n  real_T PulseGen1Hz;                  /* '<Root>/Digital input ' */\n  real_T HiddenRateTransitionForToWks_In;\n  /* '<Root>/HiddenRateTransitionForToWks_InsertedFor_TAQSigLogging_InsertedFor_Digital input _at_outport_0_at_inport_0' */\n  real_T tonePulse;                    /* '<S7>/MATLAB Function1' */\n  real_T y;                            /* '<S6>/MATLAB Function1' */\n  real_T Lick;                         /* '<Root>/MATLAB Function1' */\n  real_T y1;                           /* '<Root>/MATLAB Function1' */\n  real_T y2;                           /* '<Root>/MATLAB Function1' */\n  real_T state_out;                    /* '<Root>/MATLAB Function' */\n  real_T localTime_out;                /* '<Root>/MATLAB Function' */\n  real_T trialNum_out;                 /* '<Root>/MATLAB Function' */\n  real_T npxlsAcq_out;                 /* '<Root>/MATLAB Function' */\n  real_T counter_out;                  /* '<Root>/MATLAB Function' */\n  real_T numLicks_out;                 /* '<Root>/MATLAB Function' */\n  real_T reward_trigger_out;           /* '<Root>/MATLAB Function' */\n  real_T right_trigger_out;            /* '<Root>/MATLAB Function' */\n  real_T left_trigger_out;             /* '<Root>/MATLAB Function' */\n  real_T delay_out;                    /* '<Root>/MATLAB Function' */\n  real_T was_target_out;               /* '<Root>/MATLAB Function' */\n  real_T reward_duration_out;          /* '<Root>/MATLAB Function' */\n  real_T stim_duration_out;            /* '<Root>/MATLAB Function' */\n  real_T onsetTone_trig;               /* '<Root>/MATLAB Function' */\n  boolean_T RelationalOperator;        /* '<Root>/Relational Operator' */\n  B_MATLABFunction2_ATTN_T sf_MATLABFunction1_d;/* '<S5>/MATLAB Function1' */\n  B_MATLABFunction2_ATTN_T sf_MATLABFunction2;/* '<S4>/MATLAB Function2' */\n};\n\n/* Block states (default storage) for system '<Root>' */\nstruct DW_ATTN_T {\n  real_T GeneratedFilterBlock_states[4029];/* '<S1>/Generated Filter Block' */\n  real_T Memory8_PreviousInput;        /* '<Root>/Memory8' */\n  real_T Memory2_PreviousInput;        /* '<Root>/Memory2' */\n  real_T Memory1_PreviousInput;        /* '<Root>/Memory1' */\n  real_T Memory_PreviousInput;         /* '<Root>/Memory' */\n  real_T Memory11_PreviousInput;       /* '<Root>/Memory11' */\n  real_T Memory7_PreviousInput;        /* '<Root>/Memory7' */\n  real_T Memory3_PreviousInput;        /* '<Root>/Memory3' */\n  real_T Memory4_PreviousInput;        /* '<Root>/Memory4' */\n  real_T Memory9_PreviousInput;        /* '<Root>/Memory9' */\n  real_T Memory5_PreviousInput;        /* '<Root>/Memory5' */\n  real_T Memory6_PreviousInput;        /* '<Root>/Memory6' */\n  real_T Memory10_PreviousInput;       /* '<Root>/Memory10' */\n  real_T t0;                           /* '<S7>/MATLAB Function1' */\n  real_T t0_p;                         /* '<S6>/MATLAB Function1' */\n  real_T Setup_RWORK[2];               /* '<Root>/Setup ' */\n  void *Setup_PWORK;                   /* '<Root>/Setup ' */\n  void *Analoginput_PWORK;             /* '<Root>/Analog input ' */\n  void *Analogoutput_PWORK;            /* '<Root>/Analog output ' */\n  void *Digitaloutput_PWORK;           /* '<Root>/Digital output ' */\n  void *Digitalinput_PWORK;            /* '<Root>/Digital input ' */\n  struct {\n    void *LoggedData[5];\n  } Scope_PWORK;                       /* '<Root>/Scope' */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_Digit;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_Rewar;   /* synthesized block */\n\n  struct {\n    void *LoggedData;\n  } reward_scope_PWORK;                /* '<Root>/reward_scope' */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_Pupil;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_Npxls;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_Whisk;   /* synthesized block */\n\n  struct {\n    void *LoggedData;\n  } left_scope_PWORK;                  /* '<Root>/left_scope' */\n\n  struct {\n    void *LoggedData;\n  } right_scope_PWORK;                 /* '<Root>/right_scope' */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MATLA;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_n;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_k;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_h;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_f;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_p;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_o;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_c;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_m;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MA_cm;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_g;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_b;   /* synthesized block */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_Clock;   /* synthesized block */\n\n  struct {\n    void *LoggedData;\n  } Scope2_PWORK;                      /* '<Root>/Scope2' */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_MAT_a;   /* synthesized block */\n\n  struct {\n    void *LoggedData;\n  } Scope1_PWORK;                      /* '<Root>/Scope1' */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_Bandp;   /* synthesized block */\n\n  struct {\n    void *LoggedData;\n  } Scope3_PWORK;                      /* '<Root>/Scope3' */\n\n  struct {\n    void *AQHandles;\n  } TAQSigLogging_InsertedFor_Analo;   /* synthesized block */\n\n  int32_T GeneratedFilterBlock_circBuf;/* '<S1>/Generated Filter Block' */\n  int32_T clockTickCounter;            /* '<Root>/Whisker Trig' */\n  int32_T clockTickCounter_n;          /* '<Root>/Npxls Trig' */\n  int32_T clockTickCounter_c;          /* '<Root>/Pupil Trig' */\n  int32_T sfEvent;                     /* '<S7>/MATLAB Function1' */\n  int32_T sfEvent_a;                   /* '<S6>/MATLAB Function1' */\n  int32_T sfEvent_b;                   /* '<Root>/MATLAB Function1' */\n  int32_T sfEvent_e;                   /* '<Root>/MATLAB Function' */\n  uint32_T method;                     /* '<Root>/MATLAB Function' */\n  uint32_T state;                      /* '<Root>/MATLAB Function' */\n  uint32_T state_p[2];                 /* '<Root>/MATLAB Function' */\n  uint32_T state_k[625];               /* '<Root>/MATLAB Function' */\n  int_T Analoginput_IWORK[2];          /* '<Root>/Analog input ' */\n  uint8_T is_active_c2_ATTN;           /* '<S7>/MATLAB Function1' */\n  uint8_T is_active_c5_ATTN;           /* '<S6>/MATLAB Function1' */\n  uint8_T is_active_c6_ATTN;           /* '<Root>/MATLAB Function1' */\n  uint8_T is_active_c1_ATTN;           /* '<Root>/MATLAB Function' */\n  boolean_T doneDoubleBufferReInit;    /* '<S7>/MATLAB Function1' */\n  boolean_T t0_not_empty;              /* '<S7>/MATLAB Function1' */\n  boolean_T doneDoubleBufferReInit_i;  /* '<S6>/MATLAB Function1' */\n  boolean_T t0_not_empty_p;            /* '<S6>/MATLAB Function1' */\n  boolean_T doneDoubleBufferReInit_j;  /* '<Root>/MATLAB Function1' */\n  boolean_T doneDoubleBufferReInit_e;  /* '<Root>/MATLAB Function' */\n  boolean_T method_not_empty;          /* '<Root>/MATLAB Function' */\n  boolean_T state_not_empty;           /* '<Root>/MATLAB Function' */\n  boolean_T state_not_empty_k;         /* '<Root>/MATLAB Function' */\n  boolean_T state_not_empty_d;         /* '<Root>/MATLAB Function' */\n  DW_MATLABFunction2_ATTN_T sf_MATLABFunction1_d;/* '<S5>/MATLAB Function1' */\n  DW_MATLABFunction2_ATTN_T sf_MATLABFunction2;/* '<S4>/MATLAB Function2' */\n};\n\n/* Real-time Model Data Structure */\nstruct tag_RTM_ATTN_T {\n  struct SimStruct_tag * *childSfunctions;\n  const char_T *errorStatus;\n  SS_SimMode simMode;\n  RTWSolverInfo solverInfo;\n  RTWSolverInfo *solverInfoPtr;\n  void *sfcnInfo;\n\n  /*\n   * NonInlinedSFcns:\n   * The following substructure contains information regarding\n   * non-inlined s-functions used in the model.\n   */\n  struct {\n    RTWSfcnInfo sfcnInfo;\n    time_T *taskTimePtrs[2];\n    SimStruct childSFunctions[5];\n    SimStruct *childSFunctionPtrs[5];\n    struct _ssBlkInfo2 blkInfo2[5];\n    struct _ssSFcnModelMethods2 methods2[5];\n    struct _ssSFcnModelMethods3 methods3[5];\n    struct _ssSFcnModelMethods4 methods4[5];\n    struct _ssStatesInfo2 statesInfo2[5];\n    ssPeriodicStatesInfo periodicStatesInfo[5];\n    struct _ssPortInfo2 inputOutputPortInfo2[5];\n    struct {\n      time_T sfcnPeriod[1];\n      time_T sfcnOffset[1];\n      int_T sfcnTsMap[1];\n      uint_T attribs[9];\n      mxArray *params[9];\n      struct _ssDWorkRecord dWork[2];\n      struct _ssDWorkAuxRecord dWorkAux[2];\n    } Sfcn0;\n\n    struct {\n      time_T sfcnPeriod[1];\n      time_T sfcnOffset[1];\n      int_T sfcnTsMap[1];\n      struct _ssPortOutputs outputPortInfo[2];\n      struct _ssOutPortUnit outputPortUnits[2];\n      struct _ssOutPortCoSimAttribute outputPortCoSimAttribute[2];\n      uint_T attribs[9];\n      mxArray *params[9];\n      struct _ssDWorkRecord dWork[2];\n      struct _ssDWorkAuxRecord dWorkAux[2];\n    } Sfcn1;\n\n    struct {\n      time_T sfcnPeriod[1];\n      time_T sfcnOffset[1];\n      int_T sfcnTsMap[1];\n      struct _ssPortInputs inputPortInfo[2];\n      struct _ssInPortUnit inputPortUnits[2];\n      struct _ssInPortCoSimAttribute inputPortCoSimAttribute[2];\n      uint_T attribs[7];\n      mxArray *params[7];\n      struct _ssDWorkRecord dWork[1];\n      struct _ssDWorkAuxRecord dWorkAux[1];\n    } Sfcn2;\n\n    struct {\n      time_T sfcnPeriod[1];\n      time_T sfcnOffset[1];\n      int_T sfcnTsMap[1];\n      struct _ssPortInputs inputPortInfo[15];\n      struct _ssInPortUnit inputPortUnits[15];\n      struct _ssInPortCoSimAttribute inputPortCoSimAttribute[15];\n      uint_T attribs[6];\n      mxArray *params[6];\n      struct _ssDWorkRecord dWork[1];\n      struct _ssDWorkAuxRecord dWorkAux[1];\n    } Sfcn3;\n\n    struct {\n      time_T sfcnPeriod[1];\n      time_T sfcnOffset[1];\n      int_T sfcnTsMap[1];\n      struct _ssPortOutputs outputPortInfo[1];\n      struct _ssOutPortUnit outputPortUnits[1];\n      struct _ssOutPortCoSimAttribute outputPortCoSimAttribute[1];\n      uint_T attribs[4];\n      mxArray *params[4];\n      struct _ssDWorkRecord dWork[1];\n      struct _ssDWorkAuxRecord dWorkAux[1];\n    } Sfcn4;\n  } NonInlinedSFcns;\n\n  boolean_T zCCacheNeedsReset;\n  boolean_T derivCacheNeedsReset;\n  boolean_T CTOutputIncnstWithState;\n\n  /*\n   * Sizes:\n   * The following substructure contains sizes information\n   * for many of the model attributes such as inputs, outputs,\n   * dwork, sample times, etc.\n   */\n  struct {\n    uint32_T options;\n    int_T numContStates;\n    int_T numU;\n    int_T numY;\n    int_T numSampTimes;\n    int_T numBlocks;\n    int_T numBlockIO;\n    int_T numBlockPrms;\n    int_T numDwork;\n    int_T numSFcnPrms;\n    int_T numSFcns;\n    int_T numIports;\n    int_T numOports;\n    int_T numNonSampZCs;\n    int_T sysDirFeedThru;\n    int_T rtwGenSfcn;\n  } Sizes;\n\n  /*\n   * Timing:\n   * The following substructure contains information regarding\n   * the timing information for the model.\n   */\n  struct {\n    time_T stepSize;\n    uint32_T clockTick0;\n    uint32_T clockTickH0;\n    time_T stepSize0;\n    uint32_T clockTick1;\n    uint32_T clockTickH1;\n    time_T stepSize1;\n    time_T tStart;\n    time_T tFinal;\n    time_T timeOfLastOutput;\n    SimTimeStep simTimeStep;\n    boolean_T stopRequestedFlag;\n    time_T *sampleTimes;\n    time_T *offsetTimes;\n    int_T *sampleTimeTaskIDPtr;\n    int_T *sampleHits;\n    int_T *perTaskSampleHits;\n    time_T *t;\n    time_T sampleTimesArray[2];\n    time_T offsetTimesArray[2];\n    int_T sampleTimeTaskIDArray[2];\n    int_T sampleHitArray[2];\n    int_T perTaskSampleHitsArray[4];\n    time_T tArray[2];\n  } Timing;\n};\n\n/* Block signals (default storage) */\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  extern struct B_ATTN_T ATTN_B;\n\n#ifdef __cplusplus\n\n}\n\n#endif\n\n/* Block states (default storage) */\nextern struct DW_ATTN_T ATTN_DW;\n\n/* External data declarations for dependent source files */\nextern const real_T ATTN_RGND;         /* real_T ground */\n\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  /* Model entry point functions */\n  extern void ATTN_initialize(void);\n  extern void ATTN_step(void);\n  extern void ATTN_terminate(void);\n\n#ifdef __cplusplus\n\n}\n\n#endif\n\n/* Real-time Model object */\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  extern RT_MODEL_ATTN_T *const ATTN_M;\n\n#ifdef __cplusplus\n\n}\n\n#endif\n\n/*-\n * The generated code includes comments that allow you to trace directly\n * back to the appropriate location in the model.  The basic format\n * is <system>/block_name, where system is the system number (uniquely\n * assigned by Simulink) and block_name is the name of the block.\n *\n * Use the MATLAB hilite_system command to trace the generated code back\n * to the model.  For example,\n *\n * hilite_system('<S3>')    - opens system 3\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\n *\n * Here is the system hierarchy for this model\n *\n * '<Root>' : 'ATTN'\n * '<S1>'   : 'ATTN/Bandpass Filter'\n * '<S2>'   : 'ATTN/MATLAB Function'\n * '<S3>'   : 'ATTN/MATLAB Function1'\n * '<S4>'   : 'ATTN/PiezoDriver_1'\n * '<S5>'   : 'ATTN/PiezoDriver_2'\n * '<S6>'   : 'ATTN/RewardDriver'\n * '<S7>'   : 'ATTN/onsetToneDriver'\n * '<S8>'   : 'ATTN/PiezoDriver_1/MATLAB Function2'\n * '<S9>'   : 'ATTN/PiezoDriver_2/MATLAB Function1'\n * '<S10>'  : 'ATTN/RewardDriver/MATLAB Function1'\n * '<S11>'  : 'ATTN/onsetToneDriver/MATLAB Function1'\n */\n#endif                                 /* RTW_HEADER_ATTN_h_ */\n"},{"name":"ATTN_private.h","type":"header","group":"model","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * ATTN_private.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_ATTN_private_h_\n#define RTW_HEADER_ATTN_private_h_\n#include \"rtwtypes.h\"\n#include \"multiword_types.h\"\n#include \"ATTN.h\"\n#include \"ATTN_types.h\"\n\n/* Private macros used by the generated code to access rtModel */\n#ifndef rtmIsMajorTimeStep\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\n#endif\n\n#ifndef rtmIsMinorTimeStep\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\n#endif\n\n#ifndef rtmSetTFinal\n#define rtmSetTFinal(rtm, val)         ((rtm)->Timing.tFinal = (val))\n#endif\n\n#ifndef rtmSetTPtr\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\n#endif\n\nextern void* slrtRegisterSignalToLoggingService(uintptr_t sigAddr);\nextern \"C\" void sg_IO191_setup_s(SimStruct *rts);\nextern \"C\" void sg_IO191_ad_s(SimStruct *rts);\nextern \"C\" void sg_IO191_da_s(SimStruct *rts);\nextern \"C\" void sg_IO191_do_s(SimStruct *rts);\nextern \"C\" void sg_IO191_di_s(SimStruct *rts);\nextern void ATTN_MATLABFunction2_Init(DW_MATLABFunction2_ATTN_T *localDW);\nextern void ATTN_MATLABFunction2(real_T rtu_trigger, real_T rtu_duration, real_T\n  rtu_amp, real_T rtu_t, B_MATLABFunction2_ATTN_T *localB,\n  DW_MATLABFunction2_ATTN_T *localDW);\n\n#endif                                 /* RTW_HEADER_ATTN_private_h_ */\n"},{"name":"ATTN_types.h","type":"header","group":"model","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * ATTN_types.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_ATTN_types_h_\n#define RTW_HEADER_ATTN_types_h_\n\n/* Forward declaration for rtModel */\ntypedef struct tag_RTM_ATTN_T RT_MODEL_ATTN_T;\n\n#endif                                 /* RTW_HEADER_ATTN_types_h_ */\n"},{"name":"ATTN_cal.cpp","type":"source","group":"data","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Data files","code":"#include \"ATTN_cal.h\"\n#include \"ATTN.h\"\n\n/* Storage class 'PageSwitching' */\nATTN_cal_type ATTN_cal_impl = {\n  /* Variable: SampleTime\n   * Referenced by: '<Root>/SampleTime'\n   */\n  0.001,\n\n  /* Variable: T_npxls\n   * Referenced by: '<Root>/Npxls Trig'\n   */\n  4.0,\n\n  /* Variable: T_pupil\n   * Referenced by: '<Root>/Pupil Trig'\n   */\n  100.0,\n\n  /* Variable: T_whisk\n   * Referenced by: '<Root>/Whisker Trig'\n   */\n  20.0,\n\n  /* Variable: maxFrame\n   * Referenced by: '<Root>/Constant'\n   */\n  3.6E+6,\n\n  /* Variable: rewardDuration\n   * Referenced by: '<Root>/rewardDuration'\n   */\n  0.05,\n\n  /* Variable: targetSide\n   * Referenced by: '<Root>/targetSide'\n   */\n  0.0,\n\n  /* Variable: trainingStage\n   * Referenced by: '<Root>/trainingStage'\n   */\n  2.0,\n\n  /* Variable: triangleAmplitude\n   * Referenced by: '<Root>/triangleAmplitude'\n   */\n  10.0,\n\n  /* Variable: triangleDuration\n   * Referenced by: '<Root>/triangleDuration'\n   */\n  0.1,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Memory8'\n   */\n  0.0,\n\n  /* Expression: 1\n   * Referenced by: '<Root>/Memory2'\n   */\n  1.0,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Memory1'\n   */\n  0.0,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Memory'\n   */\n  0.0,\n\n  /* Computed Parameter: Setup_P1_Size\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parPciSlot\n   * Referenced by: '<Root>/Setup '\n   */\n  -1.0,\n\n  /* Computed Parameter: Setup_P2_Size\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parModuleId\n   * Referenced by: '<Root>/Setup '\n   */\n  1.0,\n\n  /* Computed Parameter: Setup_P3_Size\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parTriggerSignal\n   * Referenced by: '<Root>/Setup '\n   */\n  1.0,\n\n  /* Computed Parameter: Setup_P4_Size\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parAdcChannels\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 2.0 },\n\n  /* Computed Parameter: Setup_P5_Size\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parAdcMode\n   * Referenced by: '<Root>/Setup '\n   */\n  2.0,\n\n  /* Computed Parameter: Setup_P6_Size\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parAdcRanges\n   * Referenced by: '<Root>/Setup '\n   */\n  { 3.0, 3.0 },\n\n  /* Computed Parameter: Setup_P7_Size\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parDacChannels\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 3.0 },\n\n  /* Computed Parameter: Setup_P8_Size\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parDacRanges\n   * Referenced by: '<Root>/Setup '\n   */\n  { 4.0, 4.0 },\n\n  /* Computed Parameter: Setup_P9_Size\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 8.0 },\n\n  /* Expression: parDioFirstControl\n   * Referenced by: '<Root>/Setup '\n   */\n  { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 8.0, 9.0 },\n\n  /* Computed Parameter: Analoginput_P1_Size\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parModuleId\n   * Referenced by: '<Root>/Analog input '\n   */\n  1.0,\n\n  /* Computed Parameter: Analoginput_P2_Size\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parSampleTime\n   * Referenced by: '<Root>/Analog input '\n   */\n  -1.0,\n\n  /* Computed Parameter: Analoginput_P3_Size\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parPciSlot\n   * Referenced by: '<Root>/Analog input '\n   */\n  -1.0,\n\n  /* Computed Parameter: Analoginput_P4_Size\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parAdcChannels\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 2.0 },\n\n  /* Computed Parameter: Analoginput_P5_Size\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parAdcMode\n   * Referenced by: '<Root>/Analog input '\n   */\n  2.0,\n\n  /* Computed Parameter: Analoginput_P6_Size\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parAdcRate\n   * Referenced by: '<Root>/Analog input '\n   */\n  100000.0,\n\n  /* Computed Parameter: Analoginput_P7_Size\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parAdcRanges\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 3.0, 3.0 },\n\n  /* Computed Parameter: Analoginput_P8_Size\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parAdcInitValues\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 0.0, 0.0 },\n\n  /* Computed Parameter: Analoginput_P9_Size\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parAdcResets\n   * Referenced by: '<Root>/Analog input '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: 0\n   * Referenced by: '<S1>/Generated Filter Block'\n   */\n  0.0,\n\n  /* Expression: [-2.4454897006896513e-06 -2.56742173651953851e-06 -2.6904861545531488e-06 -2.81454714397193635e-06 -2.93946535214558641e-06 -3.06509803031091609e-06 -3.19129918589820491e-06 -3.31791974136534052e-06 -3.44480769938805513e-06 -3.57180831424570957e-06 -3.6987642692300706e-06 -3.8255158598941323e-06 -3.9519011829499759e-06 -4.07775633061091228e-06 -4.20291559016737714e-06 -4.32721164857290318e-06 -4.45047580180991913e-06 -4.57253816879339651e-06 -4.69322790956374843e-06 -4.8123734475098501e-06 -4.92980269535605193e-06 -5.04534328463753935e-06 -5.15882279838227398e-06 -5.27006900670890746e-06 -5.37891010504324102e-06 -5.48517495464968105e-06 -5.58869332516680343e-06 -5.68929613883073187e-06 -5.78681571606370287e-06 -5.88108602210100086e-06 -5.97194291432307867e-06 -6.05922438995672689e-06 -6.14277083380392516e-06 -6.22242526565437995e-06 -6.29803358703354215e-06 -6.36944482693648908e-06 -6.43651138619465127e-06 -6.49908928012128943e-06 -6.55703837908017639e-06 -6.61022264662100308e-06 -6.6585103748249 */\n  { -2.4454897006896513E-6, -2.5674217365195385E-6, -2.6904861545531488E-6,\n    -2.8145471439719363E-6, -2.9394653521455864E-6, -3.0650980303109161E-6,\n    -3.1912991858982049E-6, -3.3179197413653405E-6, -3.4448076993880551E-6,\n    -3.5718083142457096E-6, -3.6987642692300706E-6, -3.8255158598941323E-6,\n    -3.9519011829499759E-6, -4.0777563306109123E-6, -4.2029155901673771E-6,\n    -4.3272116485729032E-6, -4.4504758018099191E-6, -4.5725381687933965E-6,\n    -4.6932279095637484E-6, -4.81237344750985E-6, -4.9298026953560519E-6,\n    -5.0453432846375394E-6, -5.158822798382274E-6, -5.2700690067089075E-6,\n    -5.378910105043241E-6, -5.4851749546496811E-6, -5.5886933251668034E-6,\n    -5.6892961388307319E-6, -5.7868157160637029E-6, -5.8810860221010009E-6,\n    -5.9719429143230787E-6, -6.0592243899567269E-6, -6.1427708338039252E-6,\n    -6.22242526565438E-6, -6.2980335870335421E-6, -6.3694448269364891E-6,\n    -6.4365113861946513E-6, -6.4990892801212894E-6, -6.5570383790801764E-6,\n    -6.6102226466210031E-6, -6.6585103748249614E-6, -6.7017744165038062E-6,\n    -6.7398924138967791E-6, -6.7727470235105266E-6, -6.8002261367491918E-6,\n    -6.8222230959837637E-6, -6.8386369057126558E-6, -6.8493724384685187E-6,\n    -6.8543406351302244E-6, -6.85345869930275E-6, -6.8466502854331244E-6,\n    -6.8338456803349806E-6, -6.8149819778005826E-6, -6.7900032459851984E-6,\n    -6.7588606872556066E-6, -6.7215127902011652E-6, -6.6779254735145738E-6,\n    -6.62807222145622E-6, -6.5719342106266188E-6, -6.5095004277778194E-6,\n    -6.44076777840752E-6, -6.3657411858863765E-6, -6.2844336808821913E-6,\n    -6.19686648085331E-6, -6.1030690593965958E-6, -6.0030792052458276E-6,\n    -5.8969430707288845E-6, -5.784715209505169E-6, -5.6664586034157311E-6,\n    -5.5422446782944106E-6, -5.4121533085985347E-6, -5.2762728107355575E-6,\n    -5.1346999249709855E-6, -4.9875397858235141E-6, -4.8349058808617648E-6,\n    -4.6769199978372511E-6, -4.5137121600993381E-6, -4.3454205502556372E-6,\n    -4.1721914220573069E-6, -3.9941790005005879E-6, -3.8115453701583713E-6,\n    -3.6244603517644109E-6, -3.4331013670953198E-6, -3.2376532922062486E-6,\n    -3.0383082990981719E-6, -2.8352656859041235E-6, -2.6287316957064414E-6,\n    -2.4189193241050724E-6, -2.2060481156805997E-6, -1.9903439495066154E-6,\n    -1.7720388138855177E-6, -1.5513705704977971E-6, -1.3285827081688008E-6,\n    -1.1039240864758388E-6, -8.7764866943191027E-7, -6.5001524950074086E-7,\n    -4.2128716220917257E-7, -1.9173199164350412E-7, 3.8378732873823815E-8,\n    2.6876984861195787E-7, 4.9916287943697831E-7, 7.292763636511053E-7,\n    9.5882618931145E-7, 1.1875259366578932E-6, 1.4150872272667715E-6,\n    1.6412200795365511E-6, 1.8656332700964433E-6, 2.0880347007194544E-6,\n    2.308131770307366E-6, 2.5256317515079827E-6, 2.7402421715097328E-6,\n    2.9516711965533956E-6, 3.1596280196878E-6, 3.3638232512898645E-6,\n    3.5639693118587786E-6, 3.7597808265890518E-6, 3.9509750212179745E-6,\n    4.13727211863641E-6, 4.3183957357481159E-6, 4.4940732800548263E-6,\n    4.6640363454417545E-6, 4.8280211066323155E-6, 4.9857687117801795E-6,\n    5.13702567266087E-6, 5.2815442519263989E-6, 5.41908284688272E-6,\n    5.5494063692509016E-6, 5.67228662037189E-6, 5.7875026613169812E-6,\n    5.8948411773662372E-6, 5.9940968363207729E-6, 6.0850726401171991E-6,\n    6.1675802692164393E-6, 6.2414404192440576E-6, 6.3064831293638428E-6,\n    6.3625481018733676E-6, 6.4094850125161493E-6, 6.4471538110129318E-6,\n    6.475425011323127E-6, 6.4941799711553965E-6, 6.503311160257553E-6,\n    6.5027224170246655E-6, 6.49232919297681E-6, 6.47205878466846E-6,\n    6.4418505526048911E-6, 6.4016561267535234E-6, 6.3514395982520589E-6,\n    6.2911776969300375E-6, 6.220859954274798E-6, 6.1404888514893769E-6,\n    6.0500799523051377E-6, 5.9496620202302234E-6, 5.8392771199306891E-6,\n    5.7189807024605524E-6, 5.5888416740749581E-6, 5.448942448379698E-6,\n    5.2993789815898326E-6, 5.1402607906904284E-6, 4.9717109543131412E-6,\n    4.7938660961615171E-6, 4.6068763508424758E-6, 4.4109053119794427E-6,\n    4.2061299625076077E-6, 3.99274058707157E-6, 3.7709406664711482E-6,\n    3.5409467541209015E-6, 3.302988334514535E-6, 3.0573076637077552E-6,\n    2.8041595918565526E-6, 2.5438113678717535E-6, 2.2765424262747742E-6,\n    2.0026441563637843E-6, 1.7224196538211341E-6, 1.4361834549213785E-6,\n    1.1442612535186016E-6, 8.4698960101872882E-7, 5.4471558956560589E-7,\n    2.3779651869300063E-7, -7.3400454281158414E-8, -3.8849867981722595E-7,\n    -7.071123973516443E-7, -1.0288471317817417E-6, -1.3533001048691739E-6,\n    -1.680060661169955E-6, -2.0087107080755471E-6, -2.3388251695311668E-6,\n    -2.6699724529702621E-6, -3.0017149289884611E-6, -3.33360942325612E-6,\n    -3.6652077201492647E-6, -3.99605707756007E-6, -4.3257007523262289E-6,\n    -4.6536785357029E-6, -4.9795272982808465E-6, -5.302781543737121E-6,\n    -5.6229739707888761E-6, -5.939636042703997E-6, -6.2522985637060454E-6,\n    -6.5604922615993231E-6, -6.86374837592118E-6, -7.1615992509199462E-6,\n    -7.4535789326422546E-6, -7.73922376940231E-6, -8.0180730148949285E-6,\n    -8.2896694332052022E-6, -8.5535599049574462E-6, -8.8092960338383254E-6,\n    -9.05643475272327E-6, -9.2945389286270783E-6, -9.52317796569581E-6,\n    -9.74192840545257E-6, -9.9503745235055513E-6, -1.0148108921926812E-5,\n    -1.0334733116505387E-5, -1.0509858118081588E-5, -1.0673105007168169E-5,\n    -1.0824105501066012E-5, -1.0962502512685686E-5, -1.1087950700289115E-5,\n    -1.1200117007370956E-5, -1.1298681191905591E-5, -1.1383336344191984E-5,\n    -1.1453789392537145E-5, -1.15097615960282E-5, -1.1550989023652616E-5,\n    -1.1577223019038122E-5, -1.1588230650095331E-5, -1.1583795142859844E-5,\n    -1.156371629884477E-5, -1.1527810895229482E-5, -1.1475913067227454E-5,\n    -1.1407874671992246E-5, -1.132356563344008E-5, -1.1222874267385292E-5,\n    -1.1105707586406366E-5, -1.0971991583880117E-5, -1.0821671496644061E-5,\n    -1.0654712045770102E-5, -1.0471097654954678E-5, -1.0270832646057546E-5,\n    -1.0053941411344067E-5, -9.8204685620134072E-6, -9.5704790526211224E-6,\n    -9.3040582810328041E-6, -9.0213121635722357E-6, -8.7223671850579569E-6,\n    -8.40737042345087E-6, -8.07648954886458E-6, -7.7299127967229322E-6,\n    -7.3678489148780718E-6, -6.9905270845354627E-6, -6.5981968148642458E-6,\n    -6.1911278112016431E-6, -5.7696098167971789E-6, -5.33395242807143E-6,\n    -4.8844848833996859E-6, -4.4215558254647326E-6, -3.945533037255433E-6,\n    -3.4568031518232425E-6, -2.9557713359436079E-6, -2.4428609478603164E-6,\n    -1.9185131693299415E-6, -1.383186612213568E-6, -8.3735689989998686E-7,\n    -2.8151622387859605E-7, 2.8382712418892622E-7, 8.5814924450883927E-7,\n    1.4409111448909516E-6, 2.0315592797257733E-6, 2.629526111717696E-6,\n    3.234230695854837E-6, 3.8450792850659135E-6, 4.4614659569803942E-6,\n    5.0827732611768615E-6, 5.7083728862766363E-6, 6.3376263462047869E-6,\n    6.9698856849150151E-6, 7.6044941988425125E-6, 8.240787176325602E-6,\n    8.8780926532016312E-6, 9.5157321837637931E-6, 1.0153021626234533E-5,\n    1.0789271941888246E-5, 1.1423790006930579E-5, 1.2055879436220176E-5,\n    1.2684841417894794E-5, 1.3309975557942205E-5, 1.3930580733739237E-5,\n    1.4545955955558598E-5, 1.5155401235029398E-5, 1.5758218459516767E-5,\n    1.6353712271375338E-5, 1.694119095100974E-5, 1.7519967302669326E-5,\n    1.8089359541887669E-5, 1.8648692183468978E-5, 1.9197296928912663E-5,\n    1.9734513552161437E-5, 2.0259690782549475E-5, 2.0772187183822946E-5,\n    2.1271372028101078E-5, 2.1756626163644674E-5, 2.2227342875295135E-5,\n    2.2682928736450413E-5, 2.31228044514436E-5, 2.3546405687196115E-5,\n    2.3953183893018173E-5, 2.4342607107438728E-5, 2.4714160750953402E-5,\n    2.5067348403587934E-5, 2.5401692566184892E-5, 2.5716735404334979E-5,\n    2.6012039473885235E-5, 2.628718842697359E-5, 2.6541787697554395E-5,\n    2.677546516539752E-5, 2.6987871797562893E-5, 2.7178682266372887E-5,\n    2.7347595542927186E-5, 2.7494335465227416E-5, 2.7618651280004487E-5,\n    2.7720318157366964E-5, 2.7799137677415888E-5, 2.7854938288001238E-5,\n    2.7887575732823946E-5, 2.7896933449118354E-5, 2.7882922934184012E-5,\n    2.7845484080066639E-5, 2.7784585475725156E-5, 2.7700224676055107E-5,\n    2.7592428437177957E-5, 2.7461252917440294E-5, 2.730678384360961E-5,\n    2.7129136641789413E-5, 2.692845653261936E-5, 2.6704918590366269E-5,\n    2.6458727765554377E-5, 2.619011887082754E-5, 2.5899356529775386E-5,\n    2.5586735088506675E-5, 2.5252578489791793E-5, 2.4897240109644185E-5,\n    2.4521102556257562E-5, 2.4124577431260391E-5, 2.3708105053297517E-5,\n    2.3272154143992289E-5, 2.2817221476397191E-5, 2.2343831486080071E-5,\n    2.1852535845047346E-5, 2.1343912998749454E-5, 2.0818567666465649E-5,\n    2.0277130305406397E-5, 1.9720256538929332E-5, 1.9148626549303231E-5,\n    1.8562944435505986E-5, 1.7963937536591107E-5, 1.7352355721200528E-5,\n    1.6728970643852772E-5, 1.6094574968673389E-5, 1.5449981561292519E-5,\n    1.4796022649666871E-5, 1.4133548954635892E-5, 1.3463428791062063E-5,\n    1.2786547140449147E-5, 1.2103804695975602E-5, 1.1416116880915969E-5,\n    1.0724412841473243E-5, 1.0029634415075446E-5, 9.33273507523067E-6,\n    8.6346788540749915E-6, 7.9364392437814871E-6, 7.238998078028753E-6,\n    6.5433443947723335E-6, 5.8504732815824411E-6, 5.1613847048501134E-6,\n    4.4770823241902543E-6, 3.79857229339882E-6, 3.1268620493495671E-6,\n    2.4629590902346493E-6, 1.8078697445875429E-6, 1.1625979325381969E-6,\n    5.2814392077469056E-7, -9.4496927293442417E-8, -7.0433540466328691E-7,\n    -1.3003897156312284E-6, -1.8816867309167002E-6, -2.447263241463013E-6,\n    -2.9961672093607185E-6, -3.5274590143259873E-6, -4.040212694163183E-6,\n    -4.5335171776341378E-6, -5.0064775081610934E-6, -5.4582160567809325E-6,\n    -5.8878737227788495E-6, -6.2946111204303363E-6, -6.67760975028489E-6,\n    -7.0360731534357457E-6, -7.3692280472275311E-6, -7.67632544086913E-6,\n    -7.9566417294275249E-6, -8.2094797647004884E-6, -8.4341699014797523E-6,\n    -8.6300710177383264E-6, -8.7965715072965588E-6, -8.9330902435456675E-6,\n    -9.0390775128344513E-6, -9.1140159161502E-6, -9.1574212377564568E-6,\n    -9.1688432794818416E-6, -9.14786665938555E-6, -9.094111573562431E-6,\n    -9.0072345198866871E-6, -8.88692898253116E-6, -8.7329260761409759E-6,\n    -8.5449951485812053E-6, -8.32294434122285E-6, -8.0666211057754949E-6,\n    -7.7759126767239838E-6, -7.4507464984711574E-6, -7.0910906063432378E-6,\n    -6.6969539606614822E-6, -6.2683867331377039E-6, -5.805480544906218E-6,\n    -5.3083686555584956E-6, -4.7772261026012992E-6, -4.2122697908211394E-6,\n    -3.613758531091397E-6, -2.9819930282196895E-6, -2.3173158174938519E-6,\n    -1.6201111496441781E-6, -8.9080482400451049E-7, -1.2986396971062758E-7,\n    6.6220322515264914E-7, 1.4848478364900668E-6, 2.3374805791843483E-6,\n    3.2194722340386769E-6, 4.1301541265077671E-6, 5.0688186569894933E-6,\n    6.0347198823886728E-6, 7.02707414858729E-6, 8.0450607734034352E-6,\n    9.0878227795471538E-6, 1.0154467677021023E-5, 1.1244068294343961E-5,\n    1.2355663657921359E-5, 1.3488259918806852E-5, 1.4640831326050915E-5,\n    1.5812321245759761E-5, 1.7001643224932036E-5, 1.8207682099072517E-5,\n    1.9429295142525098E-5, 2.066531326041337E-5, 2.1914542221002632E-5,\n    2.317576392725676E-5, 2.4447737726295642E-5, 2.5729201755407476E-5,\n    2.7018874323216472E-5, 2.8315455324549385E-5, 2.9617627687504222E-5,\n    3.0924058851157025E-5, 3.2233402272312433E-5, 3.3544298959644349E-5,\n    3.4855379033538054E-5, 3.6165263309890842E-5, 3.7472564906099908E-5,\n    3.8775890867417339E-5, 4.0073843811818129E-5, 4.1365023591493628E-5,\n    4.2648028969047453E-5, 4.3921459306441515E-5, 4.5183916264707293E-5,\n    4.6434005512421787E-5, 4.7670338440906264E-5, 4.8891533884101157E-5,\n    5.0096219841039114E-5, 5.1283035198830778E-5, 5.2450631454053306E-5,\n    5.3597674430426493E-5, 5.4722845990655007E-5, 5.5824845740295592E-5,\n    5.6902392721518024E-5, 5.7954227094618651E-5, 5.8979111805149217E-5,\n    5.9975834234523781E-5, 6.0943207831981648E-5, 6.1880073725779615E-5,\n    6.2785302311511141E-5, 6.3657794815456117E-5, 6.4496484830887393E-5,\n    6.53003398252745E-5, 6.60683626163497E-5, 6.6799592815031407E-5,\n    6.7493108233215778E-5, 6.8148026254489589E-5, 6.8763505165843136E-5,\n    6.933874544849947E-5, 6.9872991026014044E-5, 7.0365530467838622E-5,\n    7.0815698146588059E-5, 7.1222875347290437E-5, 7.1586491326952338E-5,\n    7.1906024322819731E-5, 7.2181002507765892E-5, 7.2411004891295263E-5,\n    7.2595662164706983E-5, 7.2734657489021152E-5, 7.2827727224332835E-5,\n    7.2874661599321247E-5, 7.28753053197071E-5, 7.2829558114517116E-5,\n    7.2737375219086072E-5, 7.259876779379302E-5, 7.2413803277605957E-5,\n    7.2182605675578709E-5, 7.19053557795216E-5, 7.1582291321142252E-5,\n    7.1213707057034555E-5, 7.0799954784970173E-5, 7.0341443291025858E-5,\n    6.9838638227169754E-5, 6.9292061919001569E-5, 6.8702293103433526E-5,\n    6.8069966596179048E-5, 6.73957728890042E-5, 6.6680457676776759E-5,\n    6.5924821314442971E-5, 6.5129718204140561E-5, 6.4296056112746146E-5,\n    6.3424795420245181E-5, 6.2516948299391631E-5, 6.1573577827223543E-5,\n    6.0595797029074892E-5, 5.9584767855818646E-5, 5.8541700095162453E-5,\n    5.7467850217897656E-5, 5.6364520160095421E-5, 5.5233056042321538E-5,\n    5.407484682703338E-5, 5.28913229153908E-5, 5.16839546848158E-5,\n    5.04542509686956E-5, 4.9203757479717978E-5, 4.7934055178394621E-5,\n    4.6646758588418319E-5, 4.534351406055989E-5, 4.4025997986895509E-5,\n    4.2695914967223857E-5, 4.1354995929599272E-5, 4.00049962069808E-5,\n    3.864769357205495E-5, 3.7284886232365079E-5, 3.5918390787932718E-5,\n    3.4550040153616048E-5, 3.3181681448515976E-5, 3.1815173854786042E-5,\n    3.0452386448255048E-5, 2.9095196003329898E-5, 2.7745484774677343E-5,\n    2.6405138258244973E-5, 2.5076042934204245E-5, 2.3760083994453468E-5,\n    2.2459143057343081E-5, 2.1175095872317344E-5, 1.9909810017204938E-5,\n    1.86651425909056E-5, 1.7442937904250223E-5, 1.6245025171824621E-5,\n    1.5073216207571485E-5, 1.3929303126990375E-5, 1.2815056058766822E-5,\n    1.1732220868668861E-5, 1.0682516898553821E-5, 9.66763472331852E-6,\n    8.6892339286332588E-6, 7.74894091228239E-6, 6.8483467119289536E-6,\n    5.98900486209976E-6, 5.1724292831771945E-6, 4.4000922051539584E-6,\n    3.6734221288842097E-6, 2.9938018275385224E-6, 2.3625663909337046E-6,\n    1.7810013153717178E-6, 1.2503406415890607E-6, 7.7176514336599218E-7,\n    3.4640056930733058E-7, -2.4684059749934652E-8, -3.4047809529459527E-7,\n    -6.0003084531596918E-7, -8.024530958065625E-7, -9.46918567363048E-7,\n    -1.0326653047250414E-6, -1.0589969971576885E-6, -1.0252842276560738E-6,\n    -9.3096564902411013E-7, -7.75549084957561E-7, -5.5861255434152151E-7,\n    -2.798052170536889E-7, 6.1151760347311639E-8, 4.64464420584718E-7,\n    9.3026531472092782E-7, 1.4586128856612174E-6, 2.0494909373626094E-6,\n    2.7028081909071482E-6, 3.4183979285022823E-6, 4.1960177263693312E-6,\n    5.0353492773808487E-6, 5.9359983041992537E-6, 6.8974945635679622E-6,\n    7.919291942299069E-6, 9.0007686453879648E-6, 1.0141227476584314E-5,\n    1.1339896211632092E-5, 1.2595928064280628E-5, 1.3908402245060705E-5,\n    1.5276324612700639E-5, 1.6698628417952117E-5, 1.8174175139472284E-5,\n    1.97017554113015E-5, 2.1280090041363383E-5, 2.2907831120291197E-5,\n    2.4583563219779369E-5, 2.6305804679545158E-5, 2.8073008981862136E-5,\n    2.9883566212532503E-5, 3.1735804607032409E-5, 3.3627992180475733E-5,\n    3.5558338439912096E-5, 3.7524996177378355E-5, 3.9526063342016061E-5,\n    4.1559584989450462E-5, 4.3623555306533509E-5, 4.5715919709449812E-5,\n    4.7834577013073359E-5, 4.99773816693776E-5, 5.2142146072594284E-5,\n    5.432664292873224E-5, 5.6528607686960307E-5, 5.8745741030286504E-5,\n    6.0975711422867541E-5, 6.3216157711198023E-5, 6.5464691776352668E-5,\n    6.7718901234379027E-5, 6.9976352181849244E-5, 7.2234591983523914E-5,\n    7.4491152098998979E-5, 7.67435509451544E-5, 7.8989296791145736E-5,\n    8.1225890682632787E-5, 8.3450829391888077E-5, 8.5661608390359012E-5,\n    8.78557248402324E-5, 9.00306806014951E-5, 9.2183985250943339E-5,\n    9.4313159109567538E-5, 9.64157362746997E-5, 9.8489267653294952E-5,\n    0.00010053132399268025, 0.00010253949890510026, 0.00010451141188237294,\n    0.00010644471129695142, 0.00010833707738569075, 0.00011018622521262092,\n    0.00011198990760701758, 0.00011374591807309064, 0.00011545209366760439,\n    0.00011710631784177707, 0.000118706523243818, 0.0001202506944784939,\n    0.00012173687082014833, 0.000123163148875627, 0.00012452768519360922,\n    0.00012582869881689148, 0.00012706447377420826, 0.00012823336150824213,\n    0.0001293337832365258, 0.00013036423224200208, 0.00013132327609007499,\n    0.00013220955876905869, 0.00013302180275100284, 0.00013375881096995237,\n    0.00013441946871478586, 0.00013500274543386126, 0.00013550769644878928,\n    0.00013593346457475033, 0.00013627928164486853, 0.00013654446993625991,\n    0.00013672844349547366, 0.00013683070936115979, 0.00013685086868190456,\n    0.00013678861772728934, 0.00013664374879035279, 0.00013641615097974912,\n    0.00013610581090002717, 0.00013571281321857304, 0.00013523734111789792,\n    0.00013467967663207336, 0.00013404020086625718, 0.00013331939409838724,\n    0.00013251783576225326, 0.00013163620431130187, 0.00013067527696266791,\n    0.00012963592932106334, 0.00012851913488230683, 0.00012732596441641337,\n    0.00012605758523031194, 0.00012471526031040207, 0.00012330034734531534,\n    0.0001218142976293815, 0.00012025865484745474, 0.0001186350537419018,\n    0.00011694521866269953, 0.00011519096200172853, 0.00011337418251251331,\n    0.00011149686351678566, 0.00010956107099940059, 0.00010756895159328148,\n    0.00010552273045620686, 0.0001034247090413896, 0.00010127726276395128,\n    9.9082838565512342E-5, 9.6843952379276158E-5, 9.4563186498095364E-5,\n    9.2243186848159155E-5, 8.988666017106003E-5, 8.7496371117116629E-5,\n    8.50751392529726E-5, 8.2625835986588618E-5, 8.0151381412881651E-5,\n    7.7654741083356613E-5, 7.5138922703216009E-5, 7.2606972759504026E-5,\n    7.00619730839798E-5, 6.7507037354479538E-5, 6.494530753865609E-5,\n    6.2379950284040456E-5, 5.98141532584885E-5, 5.7251121445132933E-5,\n    5.4694073396056074E-5, 5.2146237448953239E-5, 4.9610847911147031E-5,\n    4.7091141215358004E-5, 4.4590352051696638E-5, 4.2111709480408394E-5,\n    3.9658433029936824E-5, 3.7233728784915521E-5, 3.4840785468741263E-5,\n    3.2482770525411154E-5, 3.016282620533072E-5, 2.788406565981603E-5,\n    2.5649569049042467E-5, 2.3462379668188381E-5, 2.1325500096526717E-5,\n    1.9241888374227284E-5, 1.721445421161274E-5, 1.5246055235597933E-5,\n    1.3339493278034429E-5, 1.1497510710645551E-5, 9.72278683120656E-6,\n    8.017934305600361E-6, 6.3854956703171976E-6, 4.8279398999398991E-6,\n    3.3476590440812383E-6, 1.946964938198887E-6, 6.280859926365483E-7,\n    -6.0683593583048274E-7, -1.7557485857347968E-6, -2.8166922418236114E-6,\n    -3.7878025910946569E-6, -4.6673134800213943E-6, -5.4535595691196823E-6,\n    -6.14497888111594E-6, -6.740115239084129E-6, -7.2376205910302177E-6,\n    -7.63625721752075E-6, -7.934899819078727E-6, -8.1325374801913567E-6,\n    -8.2282755069112977E-6, -8.2213371351654333E-6, -8.1110651070281375E-6,\n    -7.89692311235813E-6, -7.5784970933484006E-6, -7.1554964096886746E-6,\n    -6.6277548621968024E-6, -5.9952315729350833E-6, -5.258011719985556E-6,\n    -4.4163071252316236E-6, -3.4704566936506327E-6, -2.4209267028049003E-6,\n    -1.2683109413797926E-6, -1.3330695803729466E-8, 1.3431654158431365E-6,\n    2.800201763247949E-6, 4.3566761770372987E-6, 6.0113605759542211E-6,\n    7.7629017481075789E-6, 9.6098222861675326E-6, 1.1550521676206485E-5,\n    1.3583277539688858E-5, 1.5706247027934521E-5, 1.7917468368188944E-5,\n    2.0214862560240735E-5, 2.2596235222359472E-5, 2.505927858511599E-5,\n    2.760157363147922E-5, 3.0220592381399452E-5, 3.2913700318890242E-5,\n    3.5678158959453015E-5, 3.8511128555510778E-5, 4.1409670937321112E-5,\n    4.4370752486684092E-5, 4.7391247240569673E-5, 5.0467940121637246E-5,\n    5.3597530292423046E-5, 5.677663462983924E-5, 6.0001791316442545E-5,\n    6.3269463544777033E-5, 6.6576043330944079E-5, 6.991785543340719E-5,\n    7.32911613728718E-5, 7.6692163548959684E-5, 8.0117009449243422E-5,\n    8.35617959460874E-5, 8.7022573676591956E-5, 9.0495351500830185E-5,\n    9.3976101033451E-5, 9.7460761243581062E-5, 0.00010094524311788908,\n    0.00010442543438154186, 0.00010789720427169666, 0.00011135640835808936,\n    0.0001147988934051779, 0.0001182205022702454, 0.00012161707883176624,\n    0.00012498447294229323, 0.0001283185454000679, 0.00013161517293348144,\n    0.00013487025319248723, 0.00013807970974103018, 0.00014123949704450124,\n    0.00014434560544623667, 0.00014739406612702534, 0.00015038095604161518,\n    0.00015330240282617318, 0.00015615458967067712, 0.00015893376015022878,\n    0.00016163622300928066, 0.00016425835689281136, 0.00016679661501851206,\n    0.00016924752978408084, 0.00017160771730377971, 0.0001738738818684534,\n    0.00017604282032328657, 0.00017811142635762171, 0.00018007669470126436,\n    0.00018193572522176425, 0.00018368572691726206, 0.00018532402179958536,\n    0.00018684804866238828, 0.00018825536672923042, 0.00018954365917661593,\n    0.00019071073652713802, 0.00019175453990800414, 0.00019267314417034952,\n    0.00019346476086490202, 0.00019412774106969879, 0.00019466057806571718,\n    0.00019506190985644556, 0.00019533052152757922, 0.00019546534744320753,\n    0.0001954654732750286, 0.00019533013786131765, 0.00019505873489255446,\n    0.00019465081442081609, 0.00019410608419023119, 0.00019342441078599627,\n    0.00019260582059965728, 0.00019165050060857122, 0.00019055879896767098,\n    0.00018933122541187498, 0.00018796845146770271, 0.00018647131047287176,\n    0.00018484079740288463, 0.00018307806850383678, 0.00018118444073090238,\n    0.00017916139099218676, 0.0001770105551978687, 0.00017473372711478569,\n    0.00017233285702684508, 0.00016981005020188998, 0.00016716756516587151,\n    0.00016440781178542427, 0.00016153334916016156, 0.00015854688332626887,\n    0.00015545126477316978, 0.00015224948577531564, 0.00014894467754133242,\n    0.00014554010718304181, 0.00014203917450704767, 0.00013844540863185237,\n    0.00013476246443365833, 0.00013099411882424759, 0.00012714426686454022,\n    0.00012321691771765818, 0.00011921619044552646, 0.0001151463096532391,\n    0.000111011600985652, 0.00010681648648082019, 0.00010256547978514098,\n    9.8263181235200856E-5, 9.3914272811559309E-5, 8.9523512969846969E-5,\n    8.50957313547334E-5, 8.0635823402511948E-5, 7.6148744838181153E-5,\n    7.1639506073065828E-5, 6.71131665091861E-5, 6.2574828756707508E-5,\n    5.802963277093415E-5, 5.34827499154653E-5, 4.8939376958226752E-5,\n    4.4404730007212039E-5, 3.9884038392877073E-5, 3.5382538504232458E-5,\n    3.0905467585760804E-5, 2.6458057502361098E-5, 2.2045528479622673E-5,\n    1.7673082826770611E-5, 1.3345898649683815E-5, 9.0691235614561081E-6,\n    4.847868397989549E-6, 6.8720094613747906E-7, -3.40786030803719E-6,\n    -7.4323524033368756E-6, -1.1381374092278273E-5, -1.5250091987135075E-5,\n    -1.9033746655653679E-5, -2.2727658658892165E-5, -2.6327234523716897E-5,\n    -2.9827972642487291E-5, -3.3225469092539031E-5, -3.6515423368130022E-5,\n    -3.9693644017569255E-5, -4.2756054178342621E-5, -4.5698697003125723E-5,\n    -4.8517740969680873E-5, -5.1209485067721386E-5, -5.377036385595926E-5,\n    -5.6196952382662759E-5, -5.8485970963187219E-5, -6.0634289808069818E-5,\n    -6.2638933495447153E-5, -6.44970852816859E-5, -6.6206091244301688E-5,\n    -6.7763464251394389E-5, -6.9166887752026386E-5, -7.0414219382136881E-5,\n    -7.1503494380795507E-5, -7.243292881179294E-5, -7.3200922585772309E-5,\n    -7.3806062278326177E-5, -7.42471237397003E-5, -7.4523074491975743E-5,\n    -7.4633075909832431E-5, -7.4576485181240831E-5, -7.4352857044667232E-5,\n    -7.3961945299635368E-5, -7.34037040877386E-5, -7.2678288941452834E-5,\n    -7.1786057598376989E-5, -7.0727570578783022E-5, -6.9503591524635523E-5,\n    -6.81150872985199E-5, -6.6563227841191815E-5, -6.48493857867448E-5,\n    -6.2975135834677557E-5, -6.0942253878425885E-5, -5.8752715890223996E-5,\n    -5.6408696562428681E-5, -5.3912567705756091E-5, -5.1266896405156815E-5,\n    -4.8474442934345367E-5, -4.5538158430312153E-5, -4.2461182329414437E-5,\n    -3.924683956695747E-5, -3.589863754244241E-5, -3.2420262852980136E-5,\n    -2.8815577797631068E-5, -2.5088616655727147E-5, -2.124358174251813E-5,\n    -1.72848392457739E-5, -1.3216914847225056E-5, -9.0444891330377927E-6,\n    -4.772392797758575E-6, -4.05601646452661E-7, 4.0507685999972461E-6,\n    8.5914676911786329E-6, 1.3211116419539222E-5, 1.7904212373149946E-5,\n    2.2665135862842411E-5, 2.748815601750884E-5, 3.2367437041130537E-5,\n    3.7297044624833524E-5, 4.2270952507117932E-5, 4.7283049175127526E-5,\n    5.2327144699694733E-5, 5.7396977696637487E-5, 6.2486222406640614E-5,\n    6.7588495885872489E-5, 7.2697365299288823E-5, 7.7806355308447533E-5,\n    8.2908955545501841E-5, 8.799862816487181E-5, 9.3068815463993217E-5,\n    9.8112947564397334E-5, 0.00010312445014427736, 0.00010809675221358545,\n    0.00011302329392259594, 0.00011789753439483528, 0.00012271295957514298,\n    0.00012746309008361548, 0.00013214148906612232, 0.00013674177003201939,\n    0.00014125760466969275, 0.00014568273063051394, 0.00015001095927181843,\n    0.00015423618334947447, 0.00015835238465067121, 0.00016235364155756059,\n    0.00016623413653241655, 0.00016998816351504871, 0.00017361013522324928,\n    0.00017709459034712758, 0.00018043620062827565, 0.0001836297778147965,\n    0.00018667028048334033, 0.0001895528207193968, 0.00019227267064722805,\n    0.00019482526880097619, 0.00019720622632859745, 0.00019941133302046887,\n    0.00020143656315466476, 0.00020327808115107782, 0.00020493224702677012,\n    0.00020639562164511039, 0.00020766497175150124, 0.00020873727478867859,\n    0.00020960972348483222, 0.00021027973020801212, 0.00021074493108053975,\n    0.00021100318984739917, 0.00021105260149285066, 0.00021089149559977235,\n    0.00021051843944652776, 0.00020993224083643754, 0.00020913195065522686,\n    0.00020811686515213206, 0.00020688652794064396, 0.00020544073171519512,\n    0.00020377951968040495, 0.00020190318668983549, 0.00019981228009152829,\n    0.00019750760027794251, 0.000194990200938246, 0.00019226138901125262,\n    0.00018932272433766229, 0.0001861760190105886, 0.00018282333642374103,\n    0.00017926699001694939, 0.00017550954171911991, 0.00017155380008902581,\n    0.00016740281815474294, 0.00016305989095285664, 0.00015852855276897589,\n    0.00015381257408140267, 0.00014891595821021349, 0.00014384293767433622,\n    0.0001385979702595842, 0.00013318573480094851, 0.00012761112668283037,\n    0.00012187925306122594, 0.00011599542781222138, 0.00010996516621153539,\n    0.00010379417935014356, 9.7488368291381969E-5, 9.10538179752635E-5,\n    8.4496790876048379E-5, 7.7823720419447788E-5, 7.1041204166136267E-5,\n    6.4155996768589324E-5, 5.7175002708532218E-5, 5.0105268822582218E-5,\n    4.2953976623989423E-5, 3.5728434428611317E-5, 2.8436069293559406E-5,\n    2.1084418777204798E-5, 1.3681122529487748E-5, 6.2339137217182516E-6,\n    -1.2493896747298534E-6, -8.7608937511639273E-6, -1.6292637655925352E-5,\n    -2.3836602710283581E-5, -3.1384721635630514E-5, -3.8928887881536811E-5,\n    -4.6460965044100092E-5, -5.397279636380873E-5, -6.1456214292041837E-5,\n    -6.8903050115176007E-5, -7.6305143625160724E-5, -8.3654352825294E-5,\n    -9.0942563659861676E-5, -9.81616997562283E-5, -0.00010530373216785712,\n    -0.00011236068910672906, -0.00011932466565357642, -0.00012618783343430059,\n    -0.00013294245025095389, -0.00013958086965565013, -0.00014609555045580391,\n    -0.00015247906613908728, -0.00015872411420658097, -0.00016482352540261774,\n    -0.00017077027282990631, -0.00017655748093858432, -0.00018217843437798748,\n    -0.00018762658669997802, -0.00019289556890284755, -0.0001979791978049259,\n    -0.00020287148423717819, -0.00020756664104425019, -0.00021205909088358295,\n    -0.00021634347381243289, -0.00022041465465281226, -0.00022426773012459994,\n    -0.00022789803573730261, -0.00023130115243117538, -0.0002344729129586763,\n    -0.00023740940799749538, -0.00024010699198667281, -0.00024256228867760958,\n    -0.0002447721963920789, -0.00024673389297965182, -0.00024844484046728042,\n    -0.00024990278939409982, -0.00025110578282486792, -0.00025205216003579782,\n    -0.00025274055986690793, -0.00025316992373537441, -0.00025333949830475607,\n    -0.00025324883780533631, -0.000252897806001226, -0.00025228657780026472,\n    -0.00025141564050316586, -0.00025028579468876222, -0.00024889815473261789,\n    -0.00024725414895670778, -0.00024535551940827783, -0.00024320432126644485,\n    -0.00024080292187550706, -0.00023815399940440082, -0.00023526054113216162,\n    -0.00023212584135968379, -0.00022875349894854063, -0.00022514741448805356,\n    -0.00022131178709223879, -0.0002172511108287297, -0.00021297017078219726,\n    -0.00020847403875523987, -0.00020376806861016074, -0.00019885789125548888,\n    -0.00019374940928154407, -0.00018844879124975926, -0.00018296246564093838,\n    -0.00017729711446803518, -0.00017145966655944325, -0.00016545729051925791,\n    -0.00015929738737131623, -0.00015298758289428911, -0.00014653571965543718,\n    -0.00013994984875109339, -0.00013323822126227813, -0.00012640927943422903,\n    -0.00011947164758902128, -0.0001124341227807976, -0.00010530566520344737,\n    -9.8095388360967952E-5, -9.081254901102643E-5, -8.3466536892548652E-5,\n    -7.6066864248523942E-5, -6.86231551554298E-5, -6.1145134671037287E-5,\n    -5.3642617812549565E-5, -4.6125498377357459E-5, -3.860373761888757E-5,\n    -3.1087352790241352E-5, -2.3586405568593785E-5, -1.6110990373454504E-5,\n    -8.6712225921093146E-6, -1.2772267257483802E-6, 6.0608755300989045E-6,\n    1.3332977257022158E-5, 2.0528998323199405E-5, 2.7638897416842365E-5,\n    3.4652684089512088E-5, 4.1560430795150659E-5, 4.8352284910551911E-5,\n    5.5018480723005932E-5, 6.1549351370820165E-5, 6.7935340722364459E-5,\n    7.41670151793647E-5, 8.023507539012415E-5, 8.6130367858461686E-5,\n    9.1843896434148152E-5, 9.7366833670741628E-5, 0.00010269053203681732,\n    0.00010780653496664965, 0.0001127065877365903, 0.00011738264815349626,\n    0.00012182689704171387, 0.00012603174851533354, 0.00012998986002258687,\n    0.00013369414214950661, 0.00013713776817014808, 0.00014031418333095621,\n    0.00014321711385709948, 0.00014584057566885734, 0.00014817888279645012,\n    0.00015022665548200824, 0.00015197882795766658, 0.00015343065588914126,\n    0.00015457772347445437, 0.00015541595018786673, 0.00015594159715942476,\n    0.00015615127318092446, 0.00015604194032950672, 0.00015561091920048093,\n    0.00015485589374142635, 0.00015377491568003418, 0.00015236640853860916,\n    0.0001506291712285993, 0.00014856238121899206, 0.00014616559727288246,\n    0.00014343876174701341, 0.00014038220244956833, 0.00013699663405200075,\n    0.00013328315905119652, 0.00012924326827877061, 0.00012487884095481737,\n    0.00012019214428397441, 0.00011518583259216398, 0.0001098629460029416,\n    0.00010422690865288009, 9.8281526445999E-5, 9.2030984347768645E-5,\n    8.5479843219751211E-5, 7.8633036196531386E-5, 7.1495864607084609E-5,\n    6.4073993443311048E-5, 5.6373446378996785E-5, 4.8400600343011222E-5,\n    4.0162179651095513E-5, 3.1665249701112546E-5, 2.291721023721453E-5,\n    1.3925788188864844E-5, 4.6990300911998492E-6, -4.7547059062457111E-6,\n    -1.4426758434929411E-5, -2.4308171698796072E-5, -3.438970465329694E-5,\n    -4.46618405629437E-5, -5.5114796927838859E-5, -6.5738535769227472E-5,\n    -7.6522774263567455E-5, -8.7456995714210571E-5, -9.8530460849346769E-5,\n    -0.00010973221943436285, -0.0001210511221864292, -0.00013247583297864934,\n    -0.0001439948413207512, -0.000155596475102886, -0.00016726891358874094,\n    -0.00017900020064384766, -0.00019077825818454634, -0.00020259089983283994,\n    -0.00021442584476198532, -0.00022627073171741744, -0.00023811313319731248,\n    -0.00024994056977682829, -0.0002617405245598547, -0.00027350045774181627,\n    -0.00028520782126695553, -0.00029685007356325112, -0.00030841469433800259,\n    -0.00031988919941698012, -0.00033126115560985195, -0.0003425181955845583,\n    -0.0003536480327331643, -0.00036463847601166794, -0.00037547744473621637,\n    -0.0003861529833180952, -0.000396653275919924, -0.00040696666101544207,\n    -0.00041708164583531977, -0.00042698692068151136, -0.00043667137309269825,\n    -0.00044612410184349718, -0.00045533443076021212, -0.0004642919223360421,\n    -0.00047298639112883825, -0.00048140791692464043, -0.0004895468576504693,\n    -0.00049739386202003494, -0.00050493988189626937, -0.0005121761843548732,\n    -0.00051909436343329876, -0.00052568635154994891, -0.00053194443057863494,\n    -0.00053786124256370354, -0.00054342980006160052, -0.00054864349609498467,\n    -0.000553496113705935, -0.00055798183509516829, -0.000562095250334637,\n    -0.00056583136564129918, -0.0005691856112003316, -0.00057215384852651429,\n    -0.00057473237735301364, -0.00057691794203730247, -0.00057870773747445859,\n    -0.00058009941450863319, -0.00058109108483401649, -0.00058168132537718886,\n    -0.00058186918215332882, -0.00058165417358929964, -0.00058103629330727891,\n    -0.00058001601236314744, -0.000578594280934499, -0.00057677252945375289,\n    -0.00057455266918245433, -0.00057193709222352613, -0.0005689286709688353,\n    -0.00056553075698012427, -0.00056174717930198561, -0.00055758224220623872,\n    -0.00055304072236770361, -0.00054812786547207327, -0.000542849382257203,\n    -0.00053721144398985725, -0.00053122067738058294, -0.00052488415894006845,\n    -0.00051820940878102471, -0.00051120438387026, -0.00050387747073632895,\n    -0.00049623747763875663, -0.00048829362620553241, -0.00048005554254618437,\n    -0.00047153324784843204, -0.00046273714846702026, -0.00045367802551398985,\n    -0.00044436702396027591, -0.00043481564125910773, -0.0004250357155023216,\n    -0.000415039413121296, -0.00040483921614478083, -0.00039444790902648194,\n    -0.00038387856505583403, -0.00037314453236591996, -0.00036225941955306045,\n    -0.0003512370809230743, -0.00034009160137977496, -0.00032883728097169454,\n    -0.000317488619113553, -0.00030606029849940942, -0.0002945671687248876,\n    -0.0002830242296362995, -0.00027144661442484911, -0.000259849572484526,\n    -0.00024824845205265585, -0.00023665868265235863, -0.00022509575735657088,\n    -0.000213575214893535, -0.00020211262161392166, -0.00019072355334006776,\n    -0.00017942357711797109, -0.00016822823289294939, -0.00015715301513002521,\n    -0.00014621335440026246, -0.00013542459895444689, -0.00012480199630556185,\n    -0.00011436067484164971, -0.00010411562549070025, -9.4081683459222088E-5,\n    -8.42735100661988E-5, -7.4705574694106062E-5, -6.5392136878623263E-5,\n    -5.6347228558635926E-5, -4.7584636507994461E-5, -3.9117884970444147E-5,\n    -3.0960218518927144E-5, -2.3124585160366347E-5, -1.562361970681394E-5,\n    -8.4696274336207922E-6, -1.6745680450948192E-6, 4.7499600322090673E-6,\n    1.0792735008663095E-5, 1.6442926723640639E-5, 2.1690111251259663E-5,\n    2.6524285100909778E-5, 3.093587899408798E-5, 3.4915771199456516E-5,\n    3.8455300408466559E-5, 4.1546278134362233E-5, 4.4181000617833024E-5,\n    4.6352260223095059E-5, 4.8053356308693686E-5, 4.9278105557853174E-5,\n    5.002085175377504E-5, 5.0276474985840025E-5, 5.0040400273288319E-5,\n    4.9308605593557611E-5, 4.8077629303087113E-5, 4.6344576939059571E-5,\n    4.4107127391206595E-5, 4.1363538433490363E-5, 3.8112651606174979E-5,\n    3.4353896439505134E-5, 3.0087294010939342E-5, 2.5313459828621313E-5,\n    2.003360603452384E-5, 1.42495429214499E-5, 7.9636797588693338E-6,\n    1.1790249233183035E-6, -6.1008146700947476E-6, -1.387163483775707E-5,\n    -2.2128636101059503E-5, -3.0866426364401168E-5, -4.0079024297951448E-5,\n    -4.9759863424580913E-5, -5.9901796909589446E-5, -7.0497103051004063E-5,\n    -8.15374914674168E-5, -9.3014109979502015E-5, -0.00010491755218051701,\n    -0.00011723786569029651, -0.00012996456108640237, -0.00014308662150529014,\n    -0.00015659251290554556, -0.00017047019498441871, -0.00018470713273811373,\n    -0.00019929030865548276, -0.00021420623553397147, -0.00022944096990594215,\n    -0.00024498012606267435, -0.00026080889066263594, -0.00027691203790985888,\n    -0.00029327394528751014, -0.0003098786098310886, -0.00032670966492489304,\n    -0.00034375039760482323, -0.00036098376634982192, -0.00037839241934366566,\n    -0.00039595871318817986, -0.000413664732048296, -0.00043149230720884561,\n    -0.00044942303702236603, -0.00046743830722661636, -0.00048551931161009039,\n    -0.00050364707300312793, -0.00052180246457192436, -0.00053996623139215285,\n    -0.00055811901227852774, -0.00057624136184624081, -0.00059431377277979118,\n    -0.00061231669828438681, -0.00063023057469477448, -0.00064803584421601994,\n    -0.00066571297777055088, -0.00068324249792543746, -0.00070060500187377076,\n    -0.00071778118444372615, -0.00073475186110879035, -0.00075149799097249434,\n    -0.00076800069970086508, -0.000784241302375801, -0.00080020132624249163,\n    -0.00081586253332397872, -0.00083120694287608377, -0.00084621685365582323,\n    -0.00086087486597667716, -0.00087516390352408713, -0.00088906723490475429,\n    -0.00090256849490348437, -0.000915651705421536, -0.000928301296070654,\n    -0.00094050212439727857, -0.000952239495711686, -0.00096349918249717952,\n    -0.00097426744337479154, -0.00098453104159937853, -0.00099427726306338727,\n    -0.0010034939337850385, -0.0010121694368581497, -0.0010202927288413429,\n    -0.001027853355564897, -0.0010348414673341016, -0.001041247833508523,\n    -0.0010470638564372486, -0.0010522815847308106, -0.0010568937258511359,\n    -0.0010608936580016003, -0.001064275441299957, -0.0010670338282176687,\n    -0.0010691642732699159, -0.0010706629419413667, -0.0010715267188335692,\n    -0.0010717532150206846, -0.0010713407746010984, -0.00107028848043332,\n    -0.0010685961590454927, -0.0010662643847086485, -0.001063294482664872,\n    -0.0010596885315023704, -0.001055449364670421, -0.0010505805711281404,\n    -0.0010450864951219486, -0.0010389722350875998, -0.0010322436416736367,\n    -0.0010249073148840919, -0.0010169706003393085, -0.001008441584654693,\n    -0.00099932908993829962, -0.00098964266740908546, -0.00097939259013875334,\n    -0.00096858984492107826, -0.00095724612327365282, -0.00094537381157801291,\n    -0.00093298598036508284, -0.00092009637275393657, -0.000906719392052868,\n    -0.00089287008853274985, -0.0008785641453836607, -0.00086381786386679343,\n    -0.00084864814767455783, -0.00083307248651284934, -0.00081710893892032233,\n    -0.00080077611434056, -0.00078409315446385417, -0.00076707971385630376,\n    -0.00074975593989482739, -0.00073214245202753278, -0.00071426032037982714,\n    -0.00069613104372741547, -0.000677776526858224, -0.00065921905734607814,\n    -0.00064048128175973656, -0.00062158618133165611, -0.00060255704711160117,\n    -0.00058341745463091237, -0.00056419123810397872, -0.00054490246419401872,\n    -0.0005255754053710602, -0.000506234512890456, -0.00048690438942095075,\n    -0.00046760976135183906, -0.00044837545080921747, -0.0004292263474118997,\n    -0.00041018737979793367, -0.000391283486953119, -0.00037253958937333173,\n    -0.00035398056009270745, -0.00033563119561020558, -0.00031751618674720087,\n    -0.00029966008946909613, -0.00028208729570412209, -0.00026482200419264233,\n    -0.0002478881914004571, -0.00023130958252965558, -0.00021510962266064034,\n    -0.00019931144805900592, -0.00018393785768083324, -0.00016901128491005768,\n    -0.00015455376956132128, -0.00014058693018169932, -0.00012713193668447589,\n    -0.00011420948334792394, -0.00010183976221184016, -9.0042436904255927E-5,\n    -7.8836616930447607E-5, -6.8240832456020482E-5, -5.8273009615397795E-5,\n    -4.8950446376669532E-5, -4.0289788993231236E-5, -3.2307009072169645E-5,\n    -2.5017381288793126E-5, -1.8435461776115649E-5, -1.2575067217511402E-5,\n    -7.44925467007587E-6, -3.0703021455677794E-6, 5.50310024919176E-7,\n    3.4019170171681481E-6, 5.4746865063127485E-6, 6.75963480178293E-6,\n    7.2486421017717187E-6, 6.9344668451429937E-6, 5.8107591396208019E-6,\n    3.8720732460146049E-6, 1.113879099211528E-6, -2.4674271523554715E-6,\n    -6.8745136060391605E-6, -1.2109104079349869E-5, -1.8171970614544307E-5,\n    -2.5062927027534474E-5, -3.27808235141059E-5, -4.1323542325316962E-5,\n    -5.0687994522817063E-5, -6.0870117823635429E-5, -7.1864875542855246E-5,\n    -8.36662566413671E-5, -9.6267276884686055E-5, -0.00010965998111764202,\n    -0.00012383544665846337, -0.00013878378781458707, -0.00015449416152125427,\n    -0.00017095477410269098, -0.00018815288915444573, -0.00020607483654413045,\n    -0.00022470602252662184, -0.00024403094096844209, -0.00026403318567478175,\n    -0.00028469546381140368, -0.0003059996104123262, -0.00032792660396298453,\n    -0.00035045658304727438, -0.00037356886404563372, -0.00039724195987009264,\n    -0.00042145359972098638, -0.00044618074984874409, -0.00047139963530309334,\n    -0.00049708576265063392, -0.00052321394364073523, -0.00054975831979842973,\n    -0.0005766923879218541, -0.00060398902646070351, -0.00063162052275099478,\n    -0.0006595586010803929, -0.0006877744515572928, -0.000716238759755738,\n    -0.00074492173710740978, -0.00077379315201070475, -0.00080282236162619082,\n    -0.00083197834432664633, -0.00086122973276905412, -0.00089054484755505278,\n    -0.00091989173144550491, -0.00094923818409406023, -0.000978551797263789,\n    -0.0010077999904902831, -0.0010369500471539002, -0.0010659691509231862,\n    -0.0010948244225308628, -0.0011234829568432705, -0.0011519118601835221,\n    -0.001180078287868203, -0.0012079494819169762, -0.0012354928088940437,\n    -0.0012626757978400308, -0.0012894661782525672, -0.0013158319180735618,\n    -0.0013417412616408947, -0.0013671627675620923, -0.0013920653464674271,\n    -0.00141641829859974, -0.0014401913511982675, -0.0014633546956337449,\n    -0.0014858790242520939, -0.0015077355668841035, -0.0015288961269786373,\n    -0.0015493331173170959, -0.0015690195952671071, -0.0015879292975336443,\n    -0.0016060366743661794, -0.0016233169231807717, -0.0016397460215564709,\n    -0.0016553007595658423, -0.0016699587713999611, -0.0016836985662487544,\n    -0.0016964995583981961, -0.0017083420965065107, -0.0017192074920221953,\n    -0.0017290780467074608, -0.0017379370792314551, -0.0017457689507983975,\n    -0.0017525590897767393, -0.0017582940152962416, -0.001762961359780901,\n    -0.0017665498903865788, -0.001769049529313275, -0.0017704513729629872,\n    -0.0017707477099152343, -0.0017699320376934444, -0.0017679990782965992,\n    -0.001764944792471668, -0.0017607663927037018, -0.0017554623549016083,\n    -0.0017490324287590207, -0.0017414776467709388, -0.001732800331888211,\n    -0.0017230041037932726, -0.001712093883781971, -0.0017000758982377657,\n    -0.0016869576806859744, -0.0016727480724172705, -0.0016574572216710665,\n    -0.0016410965813709974, -0.0016236789054061339, -0.0016052182434531928,\n    -0.00158572993433651, -0.0015652305979240778, -0.0015437381255595736,\n    -0.0015212716690318304, -0.0014978516280848202, -0.0014734996364727763,\n    -0.0014482385465666694, -0.0014220924125198943, -0.0013950864720025324,\n    -0.001367247126515194, -0.0013386019202950373, -0.0013091795178280642,\n    -0.0012790096799834727, -0.0012481232387872997, -0.0012165520708542076,\n    -0.0011843290694977626, -0.0011514881155411001, -0.0011180640468513698,\n    -0.0010840926266228415, -0.0010496105104350064, -0.001014655212113481,\n    -0.00097926506842294981, -0.00094347920262272047, -0.0009073374869169521,\n    -0.00087088050383284533, -0.00083414950656148846, -0.00079718637829728886,\n    -0.0007600335906132133, -0.000722734160910259, -0.00068533160898075738,\n    -0.00064786991272628477, -0.00061039346307207969, -0.00057294701812087446,\n    -0.00053557565659017063, -0.0004983247305779192, -0.00046123981770252766,\n    -0.00042436667266402975, -0.00038775117827412808, -0.0003514392960036001,\n    -0.00031547701609633373, -0.00027991030729999618, -0.00024478506626400868,\n    -0.00021014706665606196, -0.00017604190804907028, -0.00014251496463088989,\n    -0.00010961133378963442, -7.7375784627819921E-5, -4.5852706458937513E-5,\n    -1.5086057340335121E-5, 1.4880687303461441E-5, 4.4004585912658195E-5,\n    7.2243281824864192E-5, 9.95550540539973E-5, 0.00012589886776087799,\n    0.00015123442436095472, 0.00017552221121477126, 0.00019872355084687369,\n    0.00022080064963908948, 0.00024171664594437885, 0.00026143565756777369,\n    0.000279922828561301, 0.00029714437528022329, 0.00031306763164842073,\n    0.00032766109358130252, 0.00034089446251521727, 0.00035273868799301814,\n    0.00036316600925614658, 0.0003721499957943554, 0.00037966558680505421,\n    0.0003856891295150952, 0.00039019841631879191, 0.00039317272068691667,\n    0.00039459283180246879, 0.00039444108788010585, 0.00039270140812723353,\n    0.00038935932330597047, 0.00038440200485640114, 0.00037781829254283423,\n    0.00036959872058608842, 0.000359735542246203, 0.00034822275282137276,\n    0.00033505611103036543, 0.00032023315874715784, 0.0003037532390580716,\n    0.000285617512613231, 0.00026582897224579604, 0.00024439245583403617,\n    0.00022131465738298148, 0.00019660413630411043, 0.00017027132487320863,\n    0.00014232853384835942, 0.00011278995623174467, 8.1671669160773163E-5,\n    4.8991633915891478E-5, 1.47696940342215E-5, -2.097242847986271E-5,\n    -5.8211138854329885E-5, -9.692097716440698E-5, -0.00013707462786603591,\n    -0.0001786429312492666, -0.00022159489681090452, -0.00026589771854392588,\n    -0.00031151679213915323, -0.0003584157340927298, -0.00040655640271107166,\n    -0.00045589892100287915, -0.00050640170144599446, -0.00055802147261486,\n    -0.000610713307652392, -0.00066443065456826193, -0.00071912536834350135,\n    -0.000774747744819593, -0.00083124655634824417, -0.00088856908917616566,\n    -0.00094666118253739363, -0.0010054672694237606, -0.0010649304190024091,\n    -0.0011249923806473901, -0.001185593629550675, -0.0012466734138761378,\n    -0.00130816980341842, -0.0013700197397268673, -0.0014321590876531193,\n    -0.0014945226882793592, -0.0015570444131826238, -0.0016196572199890834,\n    -0.0016822932091707186, -0.0017448836820353596, -0.0018073591998597027,\n    -0.0018696496441135302, -0.0019316842777220681, -0.0019933918073121765,\n    -0.0020547004463868667, -0.002115537979371444, -0.0021758318264735446,\n    -0.0022355091092982294, -0.0022944967171583518, -0.0023527213740194412,\n    -0.0024101097060175176, -0.0024665883094873737, -0.0025220838194381732,\n    -0.0025765229784124521, -0.0026298327056640185, -0.0026819401665896404,\n    -0.0027327728423489407, -0.0027822585996063959, -0.0028303257603290674,\n    -0.002876903171573257, -0.0029219202751931085, -0.0029653071774039105,\n    -0.0030069947181328915, -0.0030469145400899805, -0.0030849991574913409,\n    -0.0031211820243682463, -0.003155397602394285, -0.0031875814281638942,\n    -0.0032176701798556249, -0.00324560174321383, -0.0032713152767829021,\n    -0.0032947512763286555, -0.003315851638382009, -0.0033345597228407377,\n    -0.0033508204145657056, -0.0033645801839087865, -0.0033757871461104765,\n    -0.00338439111950599, -0.0033903436824797534, -0.003393598229108943,\n    -0.0033941100234380233, -0.0033918362523272317, -0.0033867360768191006,\n    -0.0033787706819684606, -0.0033679033250825557, -0.0033540993823193309,\n    -0.0033373263935932572, -0.0033175541057396405, -0.0032947545138898022,\n    -0.003268901901011033, -0.0032399728755669538, -0.0032079464072554778,\n    -0.0031728038607833106, -0.00313452902763769, -0.0030931081558178012,\n    -0.0030485299774902293, -0.0030007857345346091, -0.0029498692019475858,\n    -0.0028957767090751329, -0.0028385071586452611, -0.0027780620435751847,\n    -0.0027144454615290426, -0.0026476641272043192, -0.0025777273823273106,\n    -0.002504647203339953, -0.0024284382067626732, -0.00234911765221987,\n    -0.0022667054431170556, -0.0021812241249606797, -0.0020926988813140105,\n    -0.0020011575273846793, -0.0019066305012415919, -0.0018091508526613777,\n    -0.0017087542296065758, -0.0016054788623401902, -0.0014993655451834053,\n    -0.0013904576159254986, -0.0012788009328973452, -0.001164443849721992,\n    -0.0010474371877581738, -0.00092783420625476023, -0.00080569057023636222,\n    -0.00068106431614258964, -0.00055401581524551708, -0.00042460773487217415,\n    -0.00029290499746098108, -0.00015897473748314255, -2.2886256262151735E-5,\n    0.00011528902527340042, 0.00025547761586651479, 0.00039760400519871529,\n    0.00054159071710605791, 0.0006873583647010762, 0.0008348257073556365,\n    0.00098390970949787954, 0.0011345256011745192, 0.0012865869403280688,\n    0.0014400056767368682, 0.0015946922175639822, 0.0017505554944595874,\n    0.0019075030321597656, 0.0020654410185231352, 0.0022242743759453096,\n    0.0023839068340897247, 0.0025442410038720321, 0.0027051784526339598,\n    0.002866619780441317, 0.003028464697439605, 0.0031906121021996387,\n    0.0033529601609844678, 0.0035154063878679344, 0.0036778477256343167,\n    0.0038401806273875593, 0.0040023011387979182, 0.0041641049809130219,\n    0.0043254876334597857, 0.00448634441856299, 0.0046465705848058505,\n    0.0048060613915574205, 0.0049647121934913579, 0.0051224185252203092,\n    0.0052790761859698061, 0.0054345813242156369, 0.0055888305222083655,\n    0.0057417208803088021, 0.0058931501010582718, 0.0060430165729076241,\n    0.0061912194535292059, 0.0063376587526362731, 0.0064822354142346781,\n    0.0066248513982320959, 0.0067654097613306548, 0.0069038147371292017,\n    0.0070399718153623513, 0.0071737878202039387, 0.00730517098756351,\n    0.007434031041305111, 0.0075602792683187705, 0.0076838285923759887,\n    0.0078045936467015, 0.0079224908451949183, 0.0080374384522368756,\n    0.0081493566510156268, 0.0082581676103113538, 0.0083637955496768529,\n    0.0084661668029545976, 0.0085652098800718546, 0.00866085552705686,\n    0.0087530367842208936, 0.0088416890424525951, 0.0089267500975726034,\n    0.0090081602026985085, 0.0090858621185716387, 0.0091598011617994163,\n    0.0092299252509685775, 0.0092961849505867888, 0.0093585335128120312,\n    0.00941692691693108, 0.0094713239065508, 0.0095216860244676012,\n    0.00956797764518308, 0.0096101660050354823, 0.00964822122991932,\n    0.0096821163605673739, 0.0097118273753717746, 0.0097373332107228237,\n    0.00975861577884701, 0.009775659983127457, 0.00978845373089274,\n    0.0097969879436621728, 0.00980125656483812, 0.00980125656483812,\n    0.0097969879436621728, 0.00978845373089274, 0.009775659983127457,\n    0.00975861577884701, 0.0097373332107228237, 0.0097118273753717746,\n    0.0096821163605673739, 0.00964822122991932, 0.0096101660050354823,\n    0.00956797764518308, 0.0095216860244676012, 0.0094713239065508,\n    0.00941692691693108, 0.0093585335128120312, 0.0092961849505867888,\n    0.0092299252509685775, 0.0091598011617994163, 0.0090858621185716387,\n    0.0090081602026985085, 0.0089267500975726034, 0.0088416890424525951,\n    0.0087530367842208936, 0.00866085552705686, 0.0085652098800718546,\n    0.0084661668029545976, 0.0083637955496768529, 0.0082581676103113538,\n    0.0081493566510156268, 0.0080374384522368756, 0.0079224908451949183,\n    0.0078045936467015, 0.0076838285923759887, 0.0075602792683187705,\n    0.007434031041305111, 0.00730517098756351, 0.0071737878202039387,\n    0.0070399718153623513, 0.0069038147371292017, 0.0067654097613306548,\n    0.0066248513982320959, 0.0064822354142346781, 0.0063376587526362731,\n    0.0061912194535292059, 0.0060430165729076241, 0.0058931501010582718,\n    0.0057417208803088021, 0.0055888305222083655, 0.0054345813242156369,\n    0.0052790761859698061, 0.0051224185252203092, 0.0049647121934913579,\n    0.0048060613915574205, 0.0046465705848058505, 0.00448634441856299,\n    0.0043254876334597857, 0.0041641049809130219, 0.0040023011387979182,\n    0.0038401806273875593, 0.0036778477256343167, 0.0035154063878679344,\n    0.0033529601609844678, 0.0031906121021996387, 0.003028464697439605,\n    0.002866619780441317, 0.0027051784526339598, 0.0025442410038720321,\n    0.0023839068340897247, 0.0022242743759453096, 0.0020654410185231352,\n    0.0019075030321597656, 0.0017505554944595874, 0.0015946922175639822,\n    0.0014400056767368682, 0.0012865869403280688, 0.0011345256011745192,\n    0.00098390970949787954, 0.0008348257073556365, 0.0006873583647010762,\n    0.00054159071710605791, 0.00039760400519871529, 0.00025547761586651479,\n    0.00011528902527340042, -2.2886256262151735E-5, -0.00015897473748314255,\n    -0.00029290499746098108, -0.00042460773487217415, -0.00055401581524551708,\n    -0.00068106431614258964, -0.00080569057023636222, -0.00092783420625476023,\n    -0.0010474371877581738, -0.001164443849721992, -0.0012788009328973452,\n    -0.0013904576159254986, -0.0014993655451834053, -0.0016054788623401902,\n    -0.0017087542296065758, -0.0018091508526613777, -0.0019066305012415919,\n    -0.0020011575273846793, -0.0020926988813140105, -0.0021812241249606797,\n    -0.0022667054431170556, -0.00234911765221987, -0.0024284382067626732,\n    -0.002504647203339953, -0.0025777273823273106, -0.0026476641272043192,\n    -0.0027144454615290426, -0.0027780620435751847, -0.0028385071586452611,\n    -0.0028957767090751329, -0.0029498692019475858, -0.0030007857345346091,\n    -0.0030485299774902293, -0.0030931081558178012, -0.00313452902763769,\n    -0.0031728038607833106, -0.0032079464072554778, -0.0032399728755669538,\n    -0.003268901901011033, -0.0032947545138898022, -0.0033175541057396405,\n    -0.0033373263935932572, -0.0033540993823193309, -0.0033679033250825557,\n    -0.0033787706819684606, -0.0033867360768191006, -0.0033918362523272317,\n    -0.0033941100234380233, -0.003393598229108943, -0.0033903436824797534,\n    -0.00338439111950599, -0.0033757871461104765, -0.0033645801839087865,\n    -0.0033508204145657056, -0.0033345597228407377, -0.003315851638382009,\n    -0.0032947512763286555, -0.0032713152767829021, -0.00324560174321383,\n    -0.0032176701798556249, -0.0031875814281638942, -0.003155397602394285,\n    -0.0031211820243682463, -0.0030849991574913409, -0.0030469145400899805,\n    -0.0030069947181328915, -0.0029653071774039105, -0.0029219202751931085,\n    -0.002876903171573257, -0.0028303257603290674, -0.0027822585996063959,\n    -0.0027327728423489407, -0.0026819401665896404, -0.0026298327056640185,\n    -0.0025765229784124521, -0.0025220838194381732, -0.0024665883094873737,\n    -0.0024101097060175176, -0.0023527213740194412, -0.0022944967171583518,\n    -0.0022355091092982294, -0.0021758318264735446, -0.002115537979371444,\n    -0.0020547004463868667, -0.0019933918073121765, -0.0019316842777220681,\n    -0.0018696496441135302, -0.0018073591998597027, -0.0017448836820353596,\n    -0.0016822932091707186, -0.0016196572199890834, -0.0015570444131826238,\n    -0.0014945226882793592, -0.0014321590876531193, -0.0013700197397268673,\n    -0.00130816980341842, -0.0012466734138761378, -0.001185593629550675,\n    -0.0011249923806473901, -0.0010649304190024091, -0.0010054672694237606,\n    -0.00094666118253739363, -0.00088856908917616566, -0.00083124655634824417,\n    -0.000774747744819593, -0.00071912536834350135, -0.00066443065456826193,\n    -0.000610713307652392, -0.00055802147261486, -0.00050640170144599446,\n    -0.00045589892100287915, -0.00040655640271107166, -0.0003584157340927298,\n    -0.00031151679213915323, -0.00026589771854392588, -0.00022159489681090452,\n    -0.0001786429312492666, -0.00013707462786603591, -9.692097716440698E-5,\n    -5.8211138854329885E-5, -2.097242847986271E-5, 1.47696940342215E-5,\n    4.8991633915891478E-5, 8.1671669160773163E-5, 0.00011278995623174467,\n    0.00014232853384835942, 0.00017027132487320863, 0.00019660413630411043,\n    0.00022131465738298148, 0.00024439245583403617, 0.00026582897224579604,\n    0.000285617512613231, 0.0003037532390580716, 0.00032023315874715784,\n    0.00033505611103036543, 0.00034822275282137276, 0.000359735542246203,\n    0.00036959872058608842, 0.00037781829254283423, 0.00038440200485640114,\n    0.00038935932330597047, 0.00039270140812723353, 0.00039444108788010585,\n    0.00039459283180246879, 0.00039317272068691667, 0.00039019841631879191,\n    0.0003856891295150952, 0.00037966558680505421, 0.0003721499957943554,\n    0.00036316600925614658, 0.00035273868799301814, 0.00034089446251521727,\n    0.00032766109358130252, 0.00031306763164842073, 0.00029714437528022329,\n    0.000279922828561301, 0.00026143565756777369, 0.00024171664594437885,\n    0.00022080064963908948, 0.00019872355084687369, 0.00017552221121477126,\n    0.00015123442436095472, 0.00012589886776087799, 9.95550540539973E-5,\n    7.2243281824864192E-5, 4.4004585912658195E-5, 1.4880687303461441E-5,\n    -1.5086057340335121E-5, -4.5852706458937513E-5, -7.7375784627819921E-5,\n    -0.00010961133378963442, -0.00014251496463088989, -0.00017604190804907028,\n    -0.00021014706665606196, -0.00024478506626400868, -0.00027991030729999618,\n    -0.00031547701609633373, -0.0003514392960036001, -0.00038775117827412808,\n    -0.00042436667266402975, -0.00046123981770252766, -0.0004983247305779192,\n    -0.00053557565659017063, -0.00057294701812087446, -0.00061039346307207969,\n    -0.00064786991272628477, -0.00068533160898075738, -0.000722734160910259,\n    -0.0007600335906132133, -0.00079718637829728886, -0.00083414950656148846,\n    -0.00087088050383284533, -0.0009073374869169521, -0.00094347920262272047,\n    -0.00097926506842294981, -0.001014655212113481, -0.0010496105104350064,\n    -0.0010840926266228415, -0.0011180640468513698, -0.0011514881155411001,\n    -0.0011843290694977626, -0.0012165520708542076, -0.0012481232387872997,\n    -0.0012790096799834727, -0.0013091795178280642, -0.0013386019202950373,\n    -0.001367247126515194, -0.0013950864720025324, -0.0014220924125198943,\n    -0.0014482385465666694, -0.0014734996364727763, -0.0014978516280848202,\n    -0.0015212716690318304, -0.0015437381255595736, -0.0015652305979240778,\n    -0.00158572993433651, -0.0016052182434531928, -0.0016236789054061339,\n    -0.0016410965813709974, -0.0016574572216710665, -0.0016727480724172705,\n    -0.0016869576806859744, -0.0017000758982377657, -0.001712093883781971,\n    -0.0017230041037932726, -0.001732800331888211, -0.0017414776467709388,\n    -0.0017490324287590207, -0.0017554623549016083, -0.0017607663927037018,\n    -0.001764944792471668, -0.0017679990782965992, -0.0017699320376934444,\n    -0.0017707477099152343, -0.0017704513729629872, -0.001769049529313275,\n    -0.0017665498903865788, -0.001762961359780901, -0.0017582940152962416,\n    -0.0017525590897767393, -0.0017457689507983975, -0.0017379370792314551,\n    -0.0017290780467074608, -0.0017192074920221953, -0.0017083420965065107,\n    -0.0016964995583981961, -0.0016836985662487544, -0.0016699587713999611,\n    -0.0016553007595658423, -0.0016397460215564709, -0.0016233169231807717,\n    -0.0016060366743661794, -0.0015879292975336443, -0.0015690195952671071,\n    -0.0015493331173170959, -0.0015288961269786373, -0.0015077355668841035,\n    -0.0014858790242520939, -0.0014633546956337449, -0.0014401913511982675,\n    -0.00141641829859974, -0.0013920653464674271, -0.0013671627675620923,\n    -0.0013417412616408947, -0.0013158319180735618, -0.0012894661782525672,\n    -0.0012626757978400308, -0.0012354928088940437, -0.0012079494819169762,\n    -0.001180078287868203, -0.0011519118601835221, -0.0011234829568432705,\n    -0.0010948244225308628, -0.0010659691509231862, -0.0010369500471539002,\n    -0.0010077999904902831, -0.000978551797263789, -0.00094923818409406023,\n    -0.00091989173144550491, -0.00089054484755505278, -0.00086122973276905412,\n    -0.00083197834432664633, -0.00080282236162619082, -0.00077379315201070475,\n    -0.00074492173710740978, -0.000716238759755738, -0.0006877744515572928,\n    -0.0006595586010803929, -0.00063162052275099478, -0.00060398902646070351,\n    -0.0005766923879218541, -0.00054975831979842973, -0.00052321394364073523,\n    -0.00049708576265063392, -0.00047139963530309334, -0.00044618074984874409,\n    -0.00042145359972098638, -0.00039724195987009264, -0.00037356886404563372,\n    -0.00035045658304727438, -0.00032792660396298453, -0.0003059996104123262,\n    -0.00028469546381140368, -0.00026403318567478175, -0.00024403094096844209,\n    -0.00022470602252662184, -0.00020607483654413045, -0.00018815288915444573,\n    -0.00017095477410269098, -0.00015449416152125427, -0.00013878378781458707,\n    -0.00012383544665846337, -0.00010965998111764202, -9.6267276884686055E-5,\n    -8.36662566413671E-5, -7.1864875542855246E-5, -6.0870117823635429E-5,\n    -5.0687994522817063E-5, -4.1323542325316962E-5, -3.27808235141059E-5,\n    -2.5062927027534474E-5, -1.8171970614544307E-5, -1.2109104079349869E-5,\n    -6.8745136060391605E-6, -2.4674271523554715E-6, 1.113879099211528E-6,\n    3.8720732460146049E-6, 5.8107591396208019E-6, 6.9344668451429937E-6,\n    7.2486421017717187E-6, 6.75963480178293E-6, 5.4746865063127485E-6,\n    3.4019170171681481E-6, 5.50310024919176E-7, -3.0703021455677794E-6,\n    -7.44925467007587E-6, -1.2575067217511402E-5, -1.8435461776115649E-5,\n    -2.5017381288793126E-5, -3.2307009072169645E-5, -4.0289788993231236E-5,\n    -4.8950446376669532E-5, -5.8273009615397795E-5, -6.8240832456020482E-5,\n    -7.8836616930447607E-5, -9.0042436904255927E-5, -0.00010183976221184016,\n    -0.00011420948334792394, -0.00012713193668447589, -0.00014058693018169932,\n    -0.00015455376956132128, -0.00016901128491005768, -0.00018393785768083324,\n    -0.00019931144805900592, -0.00021510962266064034, -0.00023130958252965558,\n    -0.0002478881914004571, -0.00026482200419264233, -0.00028208729570412209,\n    -0.00029966008946909613, -0.00031751618674720087, -0.00033563119561020558,\n    -0.00035398056009270745, -0.00037253958937333173, -0.000391283486953119,\n    -0.00041018737979793367, -0.0004292263474118997, -0.00044837545080921747,\n    -0.00046760976135183906, -0.00048690438942095075, -0.000506234512890456,\n    -0.0005255754053710602, -0.00054490246419401872, -0.00056419123810397872,\n    -0.00058341745463091237, -0.00060255704711160117, -0.00062158618133165611,\n    -0.00064048128175973656, -0.00065921905734607814, -0.000677776526858224,\n    -0.00069613104372741547, -0.00071426032037982714, -0.00073214245202753278,\n    -0.00074975593989482739, -0.00076707971385630376, -0.00078409315446385417,\n    -0.00080077611434056, -0.00081710893892032233, -0.00083307248651284934,\n    -0.00084864814767455783, -0.00086381786386679343, -0.0008785641453836607,\n    -0.00089287008853274985, -0.000906719392052868, -0.00092009637275393657,\n    -0.00093298598036508284, -0.00094537381157801291, -0.00095724612327365282,\n    -0.00096858984492107826, -0.00097939259013875334, -0.00098964266740908546,\n    -0.00099932908993829962, -0.001008441584654693, -0.0010169706003393085,\n    -0.0010249073148840919, -0.0010322436416736367, -0.0010389722350875998,\n    -0.0010450864951219486, -0.0010505805711281404, -0.001055449364670421,\n    -0.0010596885315023704, -0.001063294482664872, -0.0010662643847086485,\n    -0.0010685961590454927, -0.00107028848043332, -0.0010713407746010984,\n    -0.0010717532150206846, -0.0010715267188335692, -0.0010706629419413667,\n    -0.0010691642732699159, -0.0010670338282176687, -0.001064275441299957,\n    -0.0010608936580016003, -0.0010568937258511359, -0.0010522815847308106,\n    -0.0010470638564372486, -0.001041247833508523, -0.0010348414673341016,\n    -0.001027853355564897, -0.0010202927288413429, -0.0010121694368581497,\n    -0.0010034939337850385, -0.00099427726306338727, -0.00098453104159937853,\n    -0.00097426744337479154, -0.00096349918249717952, -0.000952239495711686,\n    -0.00094050212439727857, -0.000928301296070654, -0.000915651705421536,\n    -0.00090256849490348437, -0.00088906723490475429, -0.00087516390352408713,\n    -0.00086087486597667716, -0.00084621685365582323, -0.00083120694287608377,\n    -0.00081586253332397872, -0.00080020132624249163, -0.000784241302375801,\n    -0.00076800069970086508, -0.00075149799097249434, -0.00073475186110879035,\n    -0.00071778118444372615, -0.00070060500187377076, -0.00068324249792543746,\n    -0.00066571297777055088, -0.00064803584421601994, -0.00063023057469477448,\n    -0.00061231669828438681, -0.00059431377277979118, -0.00057624136184624081,\n    -0.00055811901227852774, -0.00053996623139215285, -0.00052180246457192436,\n    -0.00050364707300312793, -0.00048551931161009039, -0.00046743830722661636,\n    -0.00044942303702236603, -0.00043149230720884561, -0.000413664732048296,\n    -0.00039595871318817986, -0.00037839241934366566, -0.00036098376634982192,\n    -0.00034375039760482323, -0.00032670966492489304, -0.0003098786098310886,\n    -0.00029327394528751014, -0.00027691203790985888, -0.00026080889066263594,\n    -0.00024498012606267435, -0.00022944096990594215, -0.00021420623553397147,\n    -0.00019929030865548276, -0.00018470713273811373, -0.00017047019498441871,\n    -0.00015659251290554556, -0.00014308662150529014, -0.00012996456108640237,\n    -0.00011723786569029651, -0.00010491755218051701, -9.3014109979502015E-5,\n    -8.15374914674168E-5, -7.0497103051004063E-5, -5.9901796909589446E-5,\n    -4.9759863424580913E-5, -4.0079024297951448E-5, -3.0866426364401168E-5,\n    -2.2128636101059503E-5, -1.387163483775707E-5, -6.1008146700947476E-6,\n    1.1790249233183035E-6, 7.9636797588693338E-6, 1.42495429214499E-5,\n    2.003360603452384E-5, 2.5313459828621313E-5, 3.0087294010939342E-5,\n    3.4353896439505134E-5, 3.8112651606174979E-5, 4.1363538433490363E-5,\n    4.4107127391206595E-5, 4.6344576939059571E-5, 4.8077629303087113E-5,\n    4.9308605593557611E-5, 5.0040400273288319E-5, 5.0276474985840025E-5,\n    5.002085175377504E-5, 4.9278105557853174E-5, 4.8053356308693686E-5,\n    4.6352260223095059E-5, 4.4181000617833024E-5, 4.1546278134362233E-5,\n    3.8455300408466559E-5, 3.4915771199456516E-5, 3.093587899408798E-5,\n    2.6524285100909778E-5, 2.1690111251259663E-5, 1.6442926723640639E-5,\n    1.0792735008663095E-5, 4.7499600322090673E-6, -1.6745680450948192E-6,\n    -8.4696274336207922E-6, -1.562361970681394E-5, -2.3124585160366347E-5,\n    -3.0960218518927144E-5, -3.9117884970444147E-5, -4.7584636507994461E-5,\n    -5.6347228558635926E-5, -6.5392136878623263E-5, -7.4705574694106062E-5,\n    -8.42735100661988E-5, -9.4081683459222088E-5, -0.00010411562549070025,\n    -0.00011436067484164971, -0.00012480199630556185, -0.00013542459895444689,\n    -0.00014621335440026246, -0.00015715301513002521, -0.00016822823289294939,\n    -0.00017942357711797109, -0.00019072355334006776, -0.00020211262161392166,\n    -0.000213575214893535, -0.00022509575735657088, -0.00023665868265235863,\n    -0.00024824845205265585, -0.000259849572484526, -0.00027144661442484911,\n    -0.0002830242296362995, -0.0002945671687248876, -0.00030606029849940942,\n    -0.000317488619113553, -0.00032883728097169454, -0.00034009160137977496,\n    -0.0003512370809230743, -0.00036225941955306045, -0.00037314453236591996,\n    -0.00038387856505583403, -0.00039444790902648194, -0.00040483921614478083,\n    -0.000415039413121296, -0.0004250357155023216, -0.00043481564125910773,\n    -0.00044436702396027591, -0.00045367802551398985, -0.00046273714846702026,\n    -0.00047153324784843204, -0.00048005554254618437, -0.00048829362620553241,\n    -0.00049623747763875663, -0.00050387747073632895, -0.00051120438387026,\n    -0.00051820940878102471, -0.00052488415894006845, -0.00053122067738058294,\n    -0.00053721144398985725, -0.000542849382257203, -0.00054812786547207327,\n    -0.00055304072236770361, -0.00055758224220623872, -0.00056174717930198561,\n    -0.00056553075698012427, -0.0005689286709688353, -0.00057193709222352613,\n    -0.00057455266918245433, -0.00057677252945375289, -0.000578594280934499,\n    -0.00058001601236314744, -0.00058103629330727891, -0.00058165417358929964,\n    -0.00058186918215332882, -0.00058168132537718886, -0.00058109108483401649,\n    -0.00058009941450863319, -0.00057870773747445859, -0.00057691794203730247,\n    -0.00057473237735301364, -0.00057215384852651429, -0.0005691856112003316,\n    -0.00056583136564129918, -0.000562095250334637, -0.00055798183509516829,\n    -0.000553496113705935, -0.00054864349609498467, -0.00054342980006160052,\n    -0.00053786124256370354, -0.00053194443057863494, -0.00052568635154994891,\n    -0.00051909436343329876, -0.0005121761843548732, -0.00050493988189626937,\n    -0.00049739386202003494, -0.0004895468576504693, -0.00048140791692464043,\n    -0.00047298639112883825, -0.0004642919223360421, -0.00045533443076021212,\n    -0.00044612410184349718, -0.00043667137309269825, -0.00042698692068151136,\n    -0.00041708164583531977, -0.00040696666101544207, -0.000396653275919924,\n    -0.0003861529833180952, -0.00037547744473621637, -0.00036463847601166794,\n    -0.0003536480327331643, -0.0003425181955845583, -0.00033126115560985195,\n    -0.00031988919941698012, -0.00030841469433800259, -0.00029685007356325112,\n    -0.00028520782126695553, -0.00027350045774181627, -0.0002617405245598547,\n    -0.00024994056977682829, -0.00023811313319731248, -0.00022627073171741744,\n    -0.00021442584476198532, -0.00020259089983283994, -0.00019077825818454634,\n    -0.00017900020064384766, -0.00016726891358874094, -0.000155596475102886,\n    -0.0001439948413207512, -0.00013247583297864934, -0.0001210511221864292,\n    -0.00010973221943436285, -9.8530460849346769E-5, -8.7456995714210571E-5,\n    -7.6522774263567455E-5, -6.5738535769227472E-5, -5.5114796927838859E-5,\n    -4.46618405629437E-5, -3.438970465329694E-5, -2.4308171698796072E-5,\n    -1.4426758434929411E-5, -4.7547059062457111E-6, 4.6990300911998492E-6,\n    1.3925788188864844E-5, 2.291721023721453E-5, 3.1665249701112546E-5,\n    4.0162179651095513E-5, 4.8400600343011222E-5, 5.6373446378996785E-5,\n    6.4073993443311048E-5, 7.1495864607084609E-5, 7.8633036196531386E-5,\n    8.5479843219751211E-5, 9.2030984347768645E-5, 9.8281526445999E-5,\n    0.00010422690865288009, 0.0001098629460029416, 0.00011518583259216398,\n    0.00012019214428397441, 0.00012487884095481737, 0.00012924326827877061,\n    0.00013328315905119652, 0.00013699663405200075, 0.00014038220244956833,\n    0.00014343876174701341, 0.00014616559727288246, 0.00014856238121899206,\n    0.0001506291712285993, 0.00015236640853860916, 0.00015377491568003418,\n    0.00015485589374142635, 0.00015561091920048093, 0.00015604194032950672,\n    0.00015615127318092446, 0.00015594159715942476, 0.00015541595018786673,\n    0.00015457772347445437, 0.00015343065588914126, 0.00015197882795766658,\n    0.00015022665548200824, 0.00014817888279645012, 0.00014584057566885734,\n    0.00014321711385709948, 0.00014031418333095621, 0.00013713776817014808,\n    0.00013369414214950661, 0.00012998986002258687, 0.00012603174851533354,\n    0.00012182689704171387, 0.00011738264815349626, 0.0001127065877365903,\n    0.00010780653496664965, 0.00010269053203681732, 9.7366833670741628E-5,\n    9.1843896434148152E-5, 8.6130367858461686E-5, 8.023507539012415E-5,\n    7.41670151793647E-5, 6.7935340722364459E-5, 6.1549351370820165E-5,\n    5.5018480723005932E-5, 4.8352284910551911E-5, 4.1560430795150659E-5,\n    3.4652684089512088E-5, 2.7638897416842365E-5, 2.0528998323199405E-5,\n    1.3332977257022158E-5, 6.0608755300989045E-6, -1.2772267257483802E-6,\n    -8.6712225921093146E-6, -1.6110990373454504E-5, -2.3586405568593785E-5,\n    -3.1087352790241352E-5, -3.860373761888757E-5, -4.6125498377357459E-5,\n    -5.3642617812549565E-5, -6.1145134671037287E-5, -6.86231551554298E-5,\n    -7.6066864248523942E-5, -8.3466536892548652E-5, -9.081254901102643E-5,\n    -9.8095388360967952E-5, -0.00010530566520344737, -0.0001124341227807976,\n    -0.00011947164758902128, -0.00012640927943422903, -0.00013323822126227813,\n    -0.00013994984875109339, -0.00014653571965543718, -0.00015298758289428911,\n    -0.00015929738737131623, -0.00016545729051925791, -0.00017145966655944325,\n    -0.00017729711446803518, -0.00018296246564093838, -0.00018844879124975926,\n    -0.00019374940928154407, -0.00019885789125548888, -0.00020376806861016074,\n    -0.00020847403875523987, -0.00021297017078219726, -0.0002172511108287297,\n    -0.00022131178709223879, -0.00022514741448805356, -0.00022875349894854063,\n    -0.00023212584135968379, -0.00023526054113216162, -0.00023815399940440082,\n    -0.00024080292187550706, -0.00024320432126644485, -0.00024535551940827783,\n    -0.00024725414895670778, -0.00024889815473261789, -0.00025028579468876222,\n    -0.00025141564050316586, -0.00025228657780026472, -0.000252897806001226,\n    -0.00025324883780533631, -0.00025333949830475607, -0.00025316992373537441,\n    -0.00025274055986690793, -0.00025205216003579782, -0.00025110578282486792,\n    -0.00024990278939409982, -0.00024844484046728042, -0.00024673389297965182,\n    -0.0002447721963920789, -0.00024256228867760958, -0.00024010699198667281,\n    -0.00023740940799749538, -0.0002344729129586763, -0.00023130115243117538,\n    -0.00022789803573730261, -0.00022426773012459994, -0.00022041465465281226,\n    -0.00021634347381243289, -0.00021205909088358295, -0.00020756664104425019,\n    -0.00020287148423717819, -0.0001979791978049259, -0.00019289556890284755,\n    -0.00018762658669997802, -0.00018217843437798748, -0.00017655748093858432,\n    -0.00017077027282990631, -0.00016482352540261774, -0.00015872411420658097,\n    -0.00015247906613908728, -0.00014609555045580391, -0.00013958086965565013,\n    -0.00013294245025095389, -0.00012618783343430059, -0.00011932466565357642,\n    -0.00011236068910672906, -0.00010530373216785712, -9.81616997562283E-5,\n    -9.0942563659861676E-5, -8.3654352825294E-5, -7.6305143625160724E-5,\n    -6.8903050115176007E-5, -6.1456214292041837E-5, -5.397279636380873E-5,\n    -4.6460965044100092E-5, -3.8928887881536811E-5, -3.1384721635630514E-5,\n    -2.3836602710283581E-5, -1.6292637655925352E-5, -8.7608937511639273E-6,\n    -1.2493896747298534E-6, 6.2339137217182516E-6, 1.3681122529487748E-5,\n    2.1084418777204798E-5, 2.8436069293559406E-5, 3.5728434428611317E-5,\n    4.2953976623989423E-5, 5.0105268822582218E-5, 5.7175002708532218E-5,\n    6.4155996768589324E-5, 7.1041204166136267E-5, 7.7823720419447788E-5,\n    8.4496790876048379E-5, 9.10538179752635E-5, 9.7488368291381969E-5,\n    0.00010379417935014356, 0.00010996516621153539, 0.00011599542781222138,\n    0.00012187925306122594, 0.00012761112668283037, 0.00013318573480094851,\n    0.0001385979702595842, 0.00014384293767433622, 0.00014891595821021349,\n    0.00015381257408140267, 0.00015852855276897589, 0.00016305989095285664,\n    0.00016740281815474294, 0.00017155380008902581, 0.00017550954171911991,\n    0.00017926699001694939, 0.00018282333642374103, 0.0001861760190105886,\n    0.00018932272433766229, 0.00019226138901125262, 0.000194990200938246,\n    0.00019750760027794251, 0.00019981228009152829, 0.00020190318668983549,\n    0.00020377951968040495, 0.00020544073171519512, 0.00020688652794064396,\n    0.00020811686515213206, 0.00020913195065522686, 0.00020993224083643754,\n    0.00021051843944652776, 0.00021089149559977235, 0.00021105260149285066,\n    0.00021100318984739917, 0.00021074493108053975, 0.00021027973020801212,\n    0.00020960972348483222, 0.00020873727478867859, 0.00020766497175150124,\n    0.00020639562164511039, 0.00020493224702677012, 0.00020327808115107782,\n    0.00020143656315466476, 0.00019941133302046887, 0.00019720622632859745,\n    0.00019482526880097619, 0.00019227267064722805, 0.0001895528207193968,\n    0.00018667028048334033, 0.0001836297778147965, 0.00018043620062827565,\n    0.00017709459034712758, 0.00017361013522324928, 0.00016998816351504871,\n    0.00016623413653241655, 0.00016235364155756059, 0.00015835238465067121,\n    0.00015423618334947447, 0.00015001095927181843, 0.00014568273063051394,\n    0.00014125760466969275, 0.00013674177003201939, 0.00013214148906612232,\n    0.00012746309008361548, 0.00012271295957514298, 0.00011789753439483528,\n    0.00011302329392259594, 0.00010809675221358545, 0.00010312445014427736,\n    9.8112947564397334E-5, 9.3068815463993217E-5, 8.799862816487181E-5,\n    8.2908955545501841E-5, 7.7806355308447533E-5, 7.2697365299288823E-5,\n    6.7588495885872489E-5, 6.2486222406640614E-5, 5.7396977696637487E-5,\n    5.2327144699694733E-5, 4.7283049175127526E-5, 4.2270952507117932E-5,\n    3.7297044624833524E-5, 3.2367437041130537E-5, 2.748815601750884E-5,\n    2.2665135862842411E-5, 1.7904212373149946E-5, 1.3211116419539222E-5,\n    8.5914676911786329E-6, 4.0507685999972461E-6, -4.05601646452661E-7,\n    -4.772392797758575E-6, -9.0444891330377927E-6, -1.3216914847225056E-5,\n    -1.72848392457739E-5, -2.124358174251813E-5, -2.5088616655727147E-5,\n    -2.8815577797631068E-5, -3.2420262852980136E-5, -3.589863754244241E-5,\n    -3.924683956695747E-5, -4.2461182329414437E-5, -4.5538158430312153E-5,\n    -4.8474442934345367E-5, -5.1266896405156815E-5, -5.3912567705756091E-5,\n    -5.6408696562428681E-5, -5.8752715890223996E-5, -6.0942253878425885E-5,\n    -6.2975135834677557E-5, -6.48493857867448E-5, -6.6563227841191815E-5,\n    -6.81150872985199E-5, -6.9503591524635523E-5, -7.0727570578783022E-5,\n    -7.1786057598376989E-5, -7.2678288941452834E-5, -7.34037040877386E-5,\n    -7.3961945299635368E-5, -7.4352857044667232E-5, -7.4576485181240831E-5,\n    -7.4633075909832431E-5, -7.4523074491975743E-5, -7.42471237397003E-5,\n    -7.3806062278326177E-5, -7.3200922585772309E-5, -7.243292881179294E-5,\n    -7.1503494380795507E-5, -7.0414219382136881E-5, -6.9166887752026386E-5,\n    -6.7763464251394389E-5, -6.6206091244301688E-5, -6.44970852816859E-5,\n    -6.2638933495447153E-5, -6.0634289808069818E-5, -5.8485970963187219E-5,\n    -5.6196952382662759E-5, -5.377036385595926E-5, -5.1209485067721386E-5,\n    -4.8517740969680873E-5, -4.5698697003125723E-5, -4.2756054178342621E-5,\n    -3.9693644017569255E-5, -3.6515423368130022E-5, -3.3225469092539031E-5,\n    -2.9827972642487291E-5, -2.6327234523716897E-5, -2.2727658658892165E-5,\n    -1.9033746655653679E-5, -1.5250091987135075E-5, -1.1381374092278273E-5,\n    -7.4323524033368756E-6, -3.40786030803719E-6, 6.8720094613747906E-7,\n    4.847868397989549E-6, 9.0691235614561081E-6, 1.3345898649683815E-5,\n    1.7673082826770611E-5, 2.2045528479622673E-5, 2.6458057502361098E-5,\n    3.0905467585760804E-5, 3.5382538504232458E-5, 3.9884038392877073E-5,\n    4.4404730007212039E-5, 4.8939376958226752E-5, 5.34827499154653E-5,\n    5.802963277093415E-5, 6.2574828756707508E-5, 6.71131665091861E-5,\n    7.1639506073065828E-5, 7.6148744838181153E-5, 8.0635823402511948E-5,\n    8.50957313547334E-5, 8.9523512969846969E-5, 9.3914272811559309E-5,\n    9.8263181235200856E-5, 0.00010256547978514098, 0.00010681648648082019,\n    0.000111011600985652, 0.0001151463096532391, 0.00011921619044552646,\n    0.00012321691771765818, 0.00012714426686454022, 0.00013099411882424759,\n    0.00013476246443365833, 0.00013844540863185237, 0.00014203917450704767,\n    0.00014554010718304181, 0.00014894467754133242, 0.00015224948577531564,\n    0.00015545126477316978, 0.00015854688332626887, 0.00016153334916016156,\n    0.00016440781178542427, 0.00016716756516587151, 0.00016981005020188998,\n    0.00017233285702684508, 0.00017473372711478569, 0.0001770105551978687,\n    0.00017916139099218676, 0.00018118444073090238, 0.00018307806850383678,\n    0.00018484079740288463, 0.00018647131047287176, 0.00018796845146770271,\n    0.00018933122541187498, 0.00019055879896767098, 0.00019165050060857122,\n    0.00019260582059965728, 0.00019342441078599627, 0.00019410608419023119,\n    0.00019465081442081609, 0.00019505873489255446, 0.00019533013786131765,\n    0.0001954654732750286, 0.00019546534744320753, 0.00019533052152757922,\n    0.00019506190985644556, 0.00019466057806571718, 0.00019412774106969879,\n    0.00019346476086490202, 0.00019267314417034952, 0.00019175453990800414,\n    0.00019071073652713802, 0.00018954365917661593, 0.00018825536672923042,\n    0.00018684804866238828, 0.00018532402179958536, 0.00018368572691726206,\n    0.00018193572522176425, 0.00018007669470126436, 0.00017811142635762171,\n    0.00017604282032328657, 0.0001738738818684534, 0.00017160771730377971,\n    0.00016924752978408084, 0.00016679661501851206, 0.00016425835689281136,\n    0.00016163622300928066, 0.00015893376015022878, 0.00015615458967067712,\n    0.00015330240282617318, 0.00015038095604161518, 0.00014739406612702534,\n    0.00014434560544623667, 0.00014123949704450124, 0.00013807970974103018,\n    0.00013487025319248723, 0.00013161517293348144, 0.0001283185454000679,\n    0.00012498447294229323, 0.00012161707883176624, 0.0001182205022702454,\n    0.0001147988934051779, 0.00011135640835808936, 0.00010789720427169666,\n    0.00010442543438154186, 0.00010094524311788908, 9.7460761243581062E-5,\n    9.3976101033451E-5, 9.0495351500830185E-5, 8.7022573676591956E-5,\n    8.35617959460874E-5, 8.0117009449243422E-5, 7.6692163548959684E-5,\n    7.32911613728718E-5, 6.991785543340719E-5, 6.6576043330944079E-5,\n    6.3269463544777033E-5, 6.0001791316442545E-5, 5.677663462983924E-5,\n    5.3597530292423046E-5, 5.0467940121637246E-5, 4.7391247240569673E-5,\n    4.4370752486684092E-5, 4.1409670937321112E-5, 3.8511128555510778E-5,\n    3.5678158959453015E-5, 3.2913700318890242E-5, 3.0220592381399452E-5,\n    2.760157363147922E-5, 2.505927858511599E-5, 2.2596235222359472E-5,\n    2.0214862560240735E-5, 1.7917468368188944E-5, 1.5706247027934521E-5,\n    1.3583277539688858E-5, 1.1550521676206485E-5, 9.6098222861675326E-6,\n    7.7629017481075789E-6, 6.0113605759542211E-6, 4.3566761770372987E-6,\n    2.800201763247949E-6, 1.3431654158431365E-6, -1.3330695803729466E-8,\n    -1.2683109413797926E-6, -2.4209267028049003E-6, -3.4704566936506327E-6,\n    -4.4163071252316236E-6, -5.258011719985556E-6, -5.9952315729350833E-6,\n    -6.6277548621968024E-6, -7.1554964096886746E-6, -7.5784970933484006E-6,\n    -7.89692311235813E-6, -8.1110651070281375E-6, -8.2213371351654333E-6,\n    -8.2282755069112977E-6, -8.1325374801913567E-6, -7.934899819078727E-6,\n    -7.63625721752075E-6, -7.2376205910302177E-6, -6.740115239084129E-6,\n    -6.14497888111594E-6, -5.4535595691196823E-6, -4.6673134800213943E-6,\n    -3.7878025910946569E-6, -2.8166922418236114E-6, -1.7557485857347968E-6,\n    -6.0683593583048274E-7, 6.280859926365483E-7, 1.946964938198887E-6,\n    3.3476590440812383E-6, 4.8279398999398991E-6, 6.3854956703171976E-6,\n    8.017934305600361E-6, 9.72278683120656E-6, 1.1497510710645551E-5,\n    1.3339493278034429E-5, 1.5246055235597933E-5, 1.721445421161274E-5,\n    1.9241888374227284E-5, 2.1325500096526717E-5, 2.3462379668188381E-5,\n    2.5649569049042467E-5, 2.788406565981603E-5, 3.016282620533072E-5,\n    3.2482770525411154E-5, 3.4840785468741263E-5, 3.7233728784915521E-5,\n    3.9658433029936824E-5, 4.2111709480408394E-5, 4.4590352051696638E-5,\n    4.7091141215358004E-5, 4.9610847911147031E-5, 5.2146237448953239E-5,\n    5.4694073396056074E-5, 5.7251121445132933E-5, 5.98141532584885E-5,\n    6.2379950284040456E-5, 6.494530753865609E-5, 6.7507037354479538E-5,\n    7.00619730839798E-5, 7.2606972759504026E-5, 7.5138922703216009E-5,\n    7.7654741083356613E-5, 8.0151381412881651E-5, 8.2625835986588618E-5,\n    8.50751392529726E-5, 8.7496371117116629E-5, 8.988666017106003E-5,\n    9.2243186848159155E-5, 9.4563186498095364E-5, 9.6843952379276158E-5,\n    9.9082838565512342E-5, 0.00010127726276395128, 0.0001034247090413896,\n    0.00010552273045620686, 0.00010756895159328148, 0.00010956107099940059,\n    0.00011149686351678566, 0.00011337418251251331, 0.00011519096200172853,\n    0.00011694521866269953, 0.0001186350537419018, 0.00012025865484745474,\n    0.0001218142976293815, 0.00012330034734531534, 0.00012471526031040207,\n    0.00012605758523031194, 0.00012732596441641337, 0.00012851913488230683,\n    0.00012963592932106334, 0.00013067527696266791, 0.00013163620431130187,\n    0.00013251783576225326, 0.00013331939409838724, 0.00013404020086625718,\n    0.00013467967663207336, 0.00013523734111789792, 0.00013571281321857304,\n    0.00013610581090002717, 0.00013641615097974912, 0.00013664374879035279,\n    0.00013678861772728934, 0.00013685086868190456, 0.00013683070936115979,\n    0.00013672844349547366, 0.00013654446993625991, 0.00013627928164486853,\n    0.00013593346457475033, 0.00013550769644878928, 0.00013500274543386126,\n    0.00013441946871478586, 0.00013375881096995237, 0.00013302180275100284,\n    0.00013220955876905869, 0.00013132327609007499, 0.00013036423224200208,\n    0.0001293337832365258, 0.00012823336150824213, 0.00012706447377420826,\n    0.00012582869881689148, 0.00012452768519360922, 0.000123163148875627,\n    0.00012173687082014833, 0.0001202506944784939, 0.000118706523243818,\n    0.00011710631784177707, 0.00011545209366760439, 0.00011374591807309064,\n    0.00011198990760701758, 0.00011018622521262092, 0.00010833707738569075,\n    0.00010644471129695142, 0.00010451141188237294, 0.00010253949890510026,\n    0.00010053132399268025, 9.8489267653294952E-5, 9.64157362746997E-5,\n    9.4313159109567538E-5, 9.2183985250943339E-5, 9.00306806014951E-5,\n    8.78557248402324E-5, 8.5661608390359012E-5, 8.3450829391888077E-5,\n    8.1225890682632787E-5, 7.8989296791145736E-5, 7.67435509451544E-5,\n    7.4491152098998979E-5, 7.2234591983523914E-5, 6.9976352181849244E-5,\n    6.7718901234379027E-5, 6.5464691776352668E-5, 6.3216157711198023E-5,\n    6.0975711422867541E-5, 5.8745741030286504E-5, 5.6528607686960307E-5,\n    5.432664292873224E-5, 5.2142146072594284E-5, 4.99773816693776E-5,\n    4.7834577013073359E-5, 4.5715919709449812E-5, 4.3623555306533509E-5,\n    4.1559584989450462E-5, 3.9526063342016061E-5, 3.7524996177378355E-5,\n    3.5558338439912096E-5, 3.3627992180475733E-5, 3.1735804607032409E-5,\n    2.9883566212532503E-5, 2.8073008981862136E-5, 2.6305804679545158E-5,\n    2.4583563219779369E-5, 2.2907831120291197E-5, 2.1280090041363383E-5,\n    1.97017554113015E-5, 1.8174175139472284E-5, 1.6698628417952117E-5,\n    1.5276324612700639E-5, 1.3908402245060705E-5, 1.2595928064280628E-5,\n    1.1339896211632092E-5, 1.0141227476584314E-5, 9.0007686453879648E-6,\n    7.919291942299069E-6, 6.8974945635679622E-6, 5.9359983041992537E-6,\n    5.0353492773808487E-6, 4.1960177263693312E-6, 3.4183979285022823E-6,\n    2.7028081909071482E-6, 2.0494909373626094E-6, 1.4586128856612174E-6,\n    9.3026531472092782E-7, 4.64464420584718E-7, 6.1151760347311639E-8,\n    -2.798052170536889E-7, -5.5861255434152151E-7, -7.75549084957561E-7,\n    -9.3096564902411013E-7, -1.0252842276560738E-6, -1.0589969971576885E-6,\n    -1.0326653047250414E-6, -9.46918567363048E-7, -8.024530958065625E-7,\n    -6.0003084531596918E-7, -3.4047809529459527E-7, -2.4684059749934652E-8,\n    3.4640056930733058E-7, 7.7176514336599218E-7, 1.2503406415890607E-6,\n    1.7810013153717178E-6, 2.3625663909337046E-6, 2.9938018275385224E-6,\n    3.6734221288842097E-6, 4.4000922051539584E-6, 5.1724292831771945E-6,\n    5.98900486209976E-6, 6.8483467119289536E-6, 7.74894091228239E-6,\n    8.6892339286332588E-6, 9.66763472331852E-6, 1.0682516898553821E-5,\n    1.1732220868668861E-5, 1.2815056058766822E-5, 1.3929303126990375E-5,\n    1.5073216207571485E-5, 1.6245025171824621E-5, 1.7442937904250223E-5,\n    1.86651425909056E-5, 1.9909810017204938E-5, 2.1175095872317344E-5,\n    2.2459143057343081E-5, 2.3760083994453468E-5, 2.5076042934204245E-5,\n    2.6405138258244973E-5, 2.7745484774677343E-5, 2.9095196003329898E-5,\n    3.0452386448255048E-5, 3.1815173854786042E-5, 3.3181681448515976E-5,\n    3.4550040153616048E-5, 3.5918390787932718E-5, 3.7284886232365079E-5,\n    3.864769357205495E-5, 4.00049962069808E-5, 4.1354995929599272E-5,\n    4.2695914967223857E-5, 4.4025997986895509E-5, 4.534351406055989E-5,\n    4.6646758588418319E-5, 4.7934055178394621E-5, 4.9203757479717978E-5,\n    5.04542509686956E-5, 5.16839546848158E-5, 5.28913229153908E-5,\n    5.407484682703338E-5, 5.5233056042321538E-5, 5.6364520160095421E-5,\n    5.7467850217897656E-5, 5.8541700095162453E-5, 5.9584767855818646E-5,\n    6.0595797029074892E-5, 6.1573577827223543E-5, 6.2516948299391631E-5,\n    6.3424795420245181E-5, 6.4296056112746146E-5, 6.5129718204140561E-5,\n    6.5924821314442971E-5, 6.6680457676776759E-5, 6.73957728890042E-5,\n    6.8069966596179048E-5, 6.8702293103433526E-5, 6.9292061919001569E-5,\n    6.9838638227169754E-5, 7.0341443291025858E-5, 7.0799954784970173E-5,\n    7.1213707057034555E-5, 7.1582291321142252E-5, 7.19053557795216E-5,\n    7.2182605675578709E-5, 7.2413803277605957E-5, 7.259876779379302E-5,\n    7.2737375219086072E-5, 7.2829558114517116E-5, 7.28753053197071E-5,\n    7.2874661599321247E-5, 7.2827727224332835E-5, 7.2734657489021152E-5,\n    7.2595662164706983E-5, 7.2411004891295263E-5, 7.2181002507765892E-5,\n    7.1906024322819731E-5, 7.1586491326952338E-5, 7.1222875347290437E-5,\n    7.0815698146588059E-5, 7.0365530467838622E-5, 6.9872991026014044E-5,\n    6.933874544849947E-5, 6.8763505165843136E-5, 6.8148026254489589E-5,\n    6.7493108233215778E-5, 6.6799592815031407E-5, 6.60683626163497E-5,\n    6.53003398252745E-5, 6.4496484830887393E-5, 6.3657794815456117E-5,\n    6.2785302311511141E-5, 6.1880073725779615E-5, 6.0943207831981648E-5,\n    5.9975834234523781E-5, 5.8979111805149217E-5, 5.7954227094618651E-5,\n    5.6902392721518024E-5, 5.5824845740295592E-5, 5.4722845990655007E-5,\n    5.3597674430426493E-5, 5.2450631454053306E-5, 5.1283035198830778E-5,\n    5.0096219841039114E-5, 4.8891533884101157E-5, 4.7670338440906264E-5,\n    4.6434005512421787E-5, 4.5183916264707293E-5, 4.3921459306441515E-5,\n    4.2648028969047453E-5, 4.1365023591493628E-5, 4.0073843811818129E-5,\n    3.8775890867417339E-5, 3.7472564906099908E-5, 3.6165263309890842E-5,\n    3.4855379033538054E-5, 3.3544298959644349E-5, 3.2233402272312433E-5,\n    3.0924058851157025E-5, 2.9617627687504222E-5, 2.8315455324549385E-5,\n    2.7018874323216472E-5, 2.5729201755407476E-5, 2.4447737726295642E-5,\n    2.317576392725676E-5, 2.1914542221002632E-5, 2.066531326041337E-5,\n    1.9429295142525098E-5, 1.8207682099072517E-5, 1.7001643224932036E-5,\n    1.5812321245759761E-5, 1.4640831326050915E-5, 1.3488259918806852E-5,\n    1.2355663657921359E-5, 1.1244068294343961E-5, 1.0154467677021023E-5,\n    9.0878227795471538E-6, 8.0450607734034352E-6, 7.02707414858729E-6,\n    6.0347198823886728E-6, 5.0688186569894933E-6, 4.1301541265077671E-6,\n    3.2194722340386769E-6, 2.3374805791843483E-6, 1.4848478364900668E-6,\n    6.6220322515264914E-7, -1.2986396971062758E-7, -8.9080482400451049E-7,\n    -1.6201111496441781E-6, -2.3173158174938519E-6, -2.9819930282196895E-6,\n    -3.613758531091397E-6, -4.2122697908211394E-6, -4.7772261026012992E-6,\n    -5.3083686555584956E-6, -5.805480544906218E-6, -6.2683867331377039E-6,\n    -6.6969539606614822E-6, -7.0910906063432378E-6, -7.4507464984711574E-6,\n    -7.7759126767239838E-6, -8.0666211057754949E-6, -8.32294434122285E-6,\n    -8.5449951485812053E-6, -8.7329260761409759E-6, -8.88692898253116E-6,\n    -9.0072345198866871E-6, -9.094111573562431E-6, -9.14786665938555E-6,\n    -9.1688432794818416E-6, -9.1574212377564568E-6, -9.1140159161502E-6,\n    -9.0390775128344513E-6, -8.9330902435456675E-6, -8.7965715072965588E-6,\n    -8.6300710177383264E-6, -8.4341699014797523E-6, -8.2094797647004884E-6,\n    -7.9566417294275249E-6, -7.67632544086913E-6, -7.3692280472275311E-6,\n    -7.0360731534357457E-6, -6.67760975028489E-6, -6.2946111204303363E-6,\n    -5.8878737227788495E-6, -5.4582160567809325E-6, -5.0064775081610934E-6,\n    -4.5335171776341378E-6, -4.040212694163183E-6, -3.5274590143259873E-6,\n    -2.9961672093607185E-6, -2.447263241463013E-6, -1.8816867309167002E-6,\n    -1.3003897156312284E-6, -7.0433540466328691E-7, -9.4496927293442417E-8,\n    5.2814392077469056E-7, 1.1625979325381969E-6, 1.8078697445875429E-6,\n    2.4629590902346493E-6, 3.1268620493495671E-6, 3.79857229339882E-6,\n    4.4770823241902543E-6, 5.1613847048501134E-6, 5.8504732815824411E-6,\n    6.5433443947723335E-6, 7.238998078028753E-6, 7.9364392437814871E-6,\n    8.6346788540749915E-6, 9.33273507523067E-6, 1.0029634415075446E-5,\n    1.0724412841473243E-5, 1.1416116880915969E-5, 1.2103804695975602E-5,\n    1.2786547140449147E-5, 1.3463428791062063E-5, 1.4133548954635892E-5,\n    1.4796022649666871E-5, 1.5449981561292519E-5, 1.6094574968673389E-5,\n    1.6728970643852772E-5, 1.7352355721200528E-5, 1.7963937536591107E-5,\n    1.8562944435505986E-5, 1.9148626549303231E-5, 1.9720256538929332E-5,\n    2.0277130305406397E-5, 2.0818567666465649E-5, 2.1343912998749454E-5,\n    2.1852535845047346E-5, 2.2343831486080071E-5, 2.2817221476397191E-5,\n    2.3272154143992289E-5, 2.3708105053297517E-5, 2.4124577431260391E-5,\n    2.4521102556257562E-5, 2.4897240109644185E-5, 2.5252578489791793E-5,\n    2.5586735088506675E-5, 2.5899356529775386E-5, 2.619011887082754E-5,\n    2.6458727765554377E-5, 2.6704918590366269E-5, 2.692845653261936E-5,\n    2.7129136641789413E-5, 2.730678384360961E-5, 2.7461252917440294E-5,\n    2.7592428437177957E-5, 2.7700224676055107E-5, 2.7784585475725156E-5,\n    2.7845484080066639E-5, 2.7882922934184012E-5, 2.7896933449118354E-5,\n    2.7887575732823946E-5, 2.7854938288001238E-5, 2.7799137677415888E-5,\n    2.7720318157366964E-5, 2.7618651280004487E-5, 2.7494335465227416E-5,\n    2.7347595542927186E-5, 2.7178682266372887E-5, 2.6987871797562893E-5,\n    2.677546516539752E-5, 2.6541787697554395E-5, 2.628718842697359E-5,\n    2.6012039473885235E-5, 2.5716735404334979E-5, 2.5401692566184892E-5,\n    2.5067348403587934E-5, 2.4714160750953402E-5, 2.4342607107438728E-5,\n    2.3953183893018173E-5, 2.3546405687196115E-5, 2.31228044514436E-5,\n    2.2682928736450413E-5, 2.2227342875295135E-5, 2.1756626163644674E-5,\n    2.1271372028101078E-5, 2.0772187183822946E-5, 2.0259690782549475E-5,\n    1.9734513552161437E-5, 1.9197296928912663E-5, 1.8648692183468978E-5,\n    1.8089359541887669E-5, 1.7519967302669326E-5, 1.694119095100974E-5,\n    1.6353712271375338E-5, 1.5758218459516767E-5, 1.5155401235029398E-5,\n    1.4545955955558598E-5, 1.3930580733739237E-5, 1.3309975557942205E-5,\n    1.2684841417894794E-5, 1.2055879436220176E-5, 1.1423790006930579E-5,\n    1.0789271941888246E-5, 1.0153021626234533E-5, 9.5157321837637931E-6,\n    8.8780926532016312E-6, 8.240787176325602E-6, 7.6044941988425125E-6,\n    6.9698856849150151E-6, 6.3376263462047869E-6, 5.7083728862766363E-6,\n    5.0827732611768615E-6, 4.4614659569803942E-6, 3.8450792850659135E-6,\n    3.234230695854837E-6, 2.629526111717696E-6, 2.0315592797257733E-6,\n    1.4409111448909516E-6, 8.5814924450883927E-7, 2.8382712418892622E-7,\n    -2.8151622387859605E-7, -8.3735689989998686E-7, -1.383186612213568E-6,\n    -1.9185131693299415E-6, -2.4428609478603164E-6, -2.9557713359436079E-6,\n    -3.4568031518232425E-6, -3.945533037255433E-6, -4.4215558254647326E-6,\n    -4.8844848833996859E-6, -5.33395242807143E-6, -5.7696098167971789E-6,\n    -6.1911278112016431E-6, -6.5981968148642458E-6, -6.9905270845354627E-6,\n    -7.3678489148780718E-6, -7.7299127967229322E-6, -8.07648954886458E-6,\n    -8.40737042345087E-6, -8.7223671850579569E-6, -9.0213121635722357E-6,\n    -9.3040582810328041E-6, -9.5704790526211224E-6, -9.8204685620134072E-6,\n    -1.0053941411344067E-5, -1.0270832646057546E-5, -1.0471097654954678E-5,\n    -1.0654712045770102E-5, -1.0821671496644061E-5, -1.0971991583880117E-5,\n    -1.1105707586406366E-5, -1.1222874267385292E-5, -1.132356563344008E-5,\n    -1.1407874671992246E-5, -1.1475913067227454E-5, -1.1527810895229482E-5,\n    -1.156371629884477E-5, -1.1583795142859844E-5, -1.1588230650095331E-5,\n    -1.1577223019038122E-5, -1.1550989023652616E-5, -1.15097615960282E-5,\n    -1.1453789392537145E-5, -1.1383336344191984E-5, -1.1298681191905591E-5,\n    -1.1200117007370956E-5, -1.1087950700289115E-5, -1.0962502512685686E-5,\n    -1.0824105501066012E-5, -1.0673105007168169E-5, -1.0509858118081588E-5,\n    -1.0334733116505387E-5, -1.0148108921926812E-5, -9.9503745235055513E-6,\n    -9.74192840545257E-6, -9.52317796569581E-6, -9.2945389286270783E-6,\n    -9.05643475272327E-6, -8.8092960338383254E-6, -8.5535599049574462E-6,\n    -8.2896694332052022E-6, -8.0180730148949285E-6, -7.73922376940231E-6,\n    -7.4535789326422546E-6, -7.1615992509199462E-6, -6.86374837592118E-6,\n    -6.5604922615993231E-6, -6.2522985637060454E-6, -5.939636042703997E-6,\n    -5.6229739707888761E-6, -5.302781543737121E-6, -4.9795272982808465E-6,\n    -4.6536785357029E-6, -4.3257007523262289E-6, -3.99605707756007E-6,\n    -3.6652077201492647E-6, -3.33360942325612E-6, -3.0017149289884611E-6,\n    -2.6699724529702621E-6, -2.3388251695311668E-6, -2.0087107080755471E-6,\n    -1.680060661169955E-6, -1.3533001048691739E-6, -1.0288471317817417E-6,\n    -7.071123973516443E-7, -3.8849867981722595E-7, -7.3400454281158414E-8,\n    2.3779651869300063E-7, 5.4471558956560589E-7, 8.4698960101872882E-7,\n    1.1442612535186016E-6, 1.4361834549213785E-6, 1.7224196538211341E-6,\n    2.0026441563637843E-6, 2.2765424262747742E-6, 2.5438113678717535E-6,\n    2.8041595918565526E-6, 3.0573076637077552E-6, 3.302988334514535E-6,\n    3.5409467541209015E-6, 3.7709406664711482E-6, 3.99274058707157E-6,\n    4.2061299625076077E-6, 4.4109053119794427E-6, 4.6068763508424758E-6,\n    4.7938660961615171E-6, 4.9717109543131412E-6, 5.1402607906904284E-6,\n    5.2993789815898326E-6, 5.448942448379698E-6, 5.5888416740749581E-6,\n    5.7189807024605524E-6, 5.8392771199306891E-6, 5.9496620202302234E-6,\n    6.0500799523051377E-6, 6.1404888514893769E-6, 6.220859954274798E-6,\n    6.2911776969300375E-6, 6.3514395982520589E-6, 6.4016561267535234E-6,\n    6.4418505526048911E-6, 6.47205878466846E-6, 6.49232919297681E-6,\n    6.5027224170246655E-6, 6.503311160257553E-6, 6.4941799711553965E-6,\n    6.475425011323127E-6, 6.4471538110129318E-6, 6.4094850125161493E-6,\n    6.3625481018733676E-6, 6.3064831293638428E-6, 6.2414404192440576E-6,\n    6.1675802692164393E-6, 6.0850726401171991E-6, 5.9940968363207729E-6,\n    5.8948411773662372E-6, 5.7875026613169812E-6, 5.67228662037189E-6,\n    5.5494063692509016E-6, 5.41908284688272E-6, 5.2815442519263989E-6,\n    5.13702567266087E-6, 4.9857687117801795E-6, 4.8280211066323155E-6,\n    4.6640363454417545E-6, 4.4940732800548263E-6, 4.3183957357481159E-6,\n    4.13727211863641E-6, 3.9509750212179745E-6, 3.7597808265890518E-6,\n    3.5639693118587786E-6, 3.3638232512898645E-6, 3.1596280196878E-6,\n    2.9516711965533956E-6, 2.7402421715097328E-6, 2.5256317515079827E-6,\n    2.308131770307366E-6, 2.0880347007194544E-6, 1.8656332700964433E-6,\n    1.6412200795365511E-6, 1.4150872272667715E-6, 1.1875259366578932E-6,\n    9.5882618931145E-7, 7.292763636511053E-7, 4.9916287943697831E-7,\n    2.6876984861195787E-7, 3.8378732873823815E-8, -1.9173199164350412E-7,\n    -4.2128716220917257E-7, -6.5001524950074086E-7, -8.7764866943191027E-7,\n    -1.1039240864758388E-6, -1.3285827081688008E-6, -1.5513705704977971E-6,\n    -1.7720388138855177E-6, -1.9903439495066154E-6, -2.2060481156805997E-6,\n    -2.4189193241050724E-6, -2.6287316957064414E-6, -2.8352656859041235E-6,\n    -3.0383082990981719E-6, -3.2376532922062486E-6, -3.4331013670953198E-6,\n    -3.6244603517644109E-6, -3.8115453701583713E-6, -3.9941790005005879E-6,\n    -4.1721914220573069E-6, -4.3454205502556372E-6, -4.5137121600993381E-6,\n    -4.6769199978372511E-6, -4.8349058808617648E-6, -4.9875397858235141E-6,\n    -5.1346999249709855E-6, -5.2762728107355575E-6, -5.4121533085985347E-6,\n    -5.5422446782944106E-6, -5.6664586034157311E-6, -5.784715209505169E-6,\n    -5.8969430707288845E-6, -6.0030792052458276E-6, -6.1030690593965958E-6,\n    -6.19686648085331E-6, -6.2844336808821913E-6, -6.3657411858863765E-6,\n    -6.44076777840752E-6, -6.5095004277778194E-6, -6.5719342106266188E-6,\n    -6.62807222145622E-6, -6.6779254735145738E-6, -6.7215127902011652E-6,\n    -6.7588606872556066E-6, -6.7900032459851984E-6, -6.8149819778005826E-6,\n    -6.8338456803349806E-6, -6.8466502854331244E-6, -6.85345869930275E-6,\n    -6.8543406351302244E-6, -6.8493724384685187E-6, -6.8386369057126558E-6,\n    -6.8222230959837637E-6, -6.8002261367491918E-6, -6.7727470235105266E-6,\n    -6.7398924138967791E-6, -6.7017744165038062E-6, -6.6585103748249614E-6,\n    -6.6102226466210031E-6, -6.5570383790801764E-6, -6.4990892801212894E-6,\n    -6.4365113861946513E-6, -6.3694448269364891E-6, -6.2980335870335421E-6,\n    -6.22242526565438E-6, -6.1427708338039252E-6, -6.0592243899567269E-6,\n    -5.9719429143230787E-6, -5.8810860221010009E-6, -5.7868157160637029E-6,\n    -5.6892961388307319E-6, -5.5886933251668034E-6, -5.4851749546496811E-6,\n    -5.378910105043241E-6, -5.2700690067089075E-6, -5.158822798382274E-6,\n    -5.0453432846375394E-6, -4.9298026953560519E-6, -4.81237344750985E-6,\n    -4.6932279095637484E-6, -4.5725381687933965E-6, -4.4504758018099191E-6,\n    -4.3272116485729032E-6, -4.2029155901673771E-6, -4.0777563306109123E-6,\n    -3.9519011829499759E-6, -3.8255158598941323E-6, -3.6987642692300706E-6,\n    -3.5718083142457096E-6, -3.4448076993880551E-6, -3.3179197413653405E-6,\n    -3.1912991858982049E-6, -3.0650980303109161E-6, -2.9394653521455864E-6,\n    -2.8145471439719363E-6, -2.6904861545531488E-6, -2.5674217365195385E-6,\n    -2.4454897006896513E-6 },\n\n  /* Expression: 0.005\n   * Referenced by: '<Root>/Thrd'\n   */\n  0.005,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Memory11'\n   */\n  0.0,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Memory7'\n   */\n  0.0,\n\n  /* Expression: 1\n   * Referenced by: '<Root>/Memory3'\n   */\n  1.0,\n\n  /* Expression: 1\n   * Referenced by: '<Root>/Memory4'\n   */\n  1.0,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Memory9'\n   */\n  0.0,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Memory5'\n   */\n  0.0,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Memory6'\n   */\n  0.0,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Memory10'\n   */\n  0.0,\n\n  /* Computed Parameter: Analogoutput_P1_Size\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parModuleId\n   * Referenced by: '<Root>/Analog output '\n   */\n  1.0,\n\n  /* Computed Parameter: Analogoutput_P2_Size\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parSampleTime\n   * Referenced by: '<Root>/Analog output '\n   */\n  -1.0,\n\n  /* Computed Parameter: Analogoutput_P3_Size\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parPciSlot\n   * Referenced by: '<Root>/Analog output '\n   */\n  -1.0,\n\n  /* Computed Parameter: Analogoutput_P4_Size\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parDacChannels\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 1.0, 3.0 },\n\n  /* Computed Parameter: Analogoutput_P5_Size\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parDacRanges\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 4.0, 4.0 },\n\n  /* Computed Parameter: Analogoutput_P6_Size\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parDacInitValues\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 0.0, 0.0 },\n\n  /* Computed Parameter: Analogoutput_P7_Size\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 1.0, 2.0 },\n\n  /* Expression: parDacResets\n   * Referenced by: '<Root>/Analog output '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: 1\n   * Referenced by: '<Root>/Whisker Trig'\n   */\n  1.0,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Whisker Trig'\n   */\n  0.0,\n\n  /* Expression: 2.5\n   * Referenced by: '<Root>/Npxls Trig'\n   */\n  2.5,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Npxls Trig'\n   */\n  0.0,\n\n  /* Expression: 1\n   * Referenced by: '<Root>/Pupil Trig'\n   */\n  1.0,\n\n  /* Expression: 0\n   * Referenced by: '<Root>/Pupil Trig'\n   */\n  0.0,\n\n  /* Expression: 1\n   * Referenced by: '<S6>/Constant4'\n   */\n  1.0,\n\n  /* Computed Parameter: Digitaloutput_P1_Size\n   * Referenced by: '<Root>/Digital output '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parModuleId\n   * Referenced by: '<Root>/Digital output '\n   */\n  1.0,\n\n  /* Computed Parameter: Digitaloutput_P2_Size\n   * Referenced by: '<Root>/Digital output '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parSampleTime\n   * Referenced by: '<Root>/Digital output '\n   */\n  0.001,\n\n  /* Computed Parameter: Digitaloutput_P3_Size\n   * Referenced by: '<Root>/Digital output '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parPciSlot\n   * Referenced by: '<Root>/Digital output '\n   */\n  -1.0,\n\n  /* Computed Parameter: Digitaloutput_P4_Size\n   * Referenced by: '<Root>/Digital output '\n   */\n  { 1.0, 15.0 },\n\n  /* Expression: parDoChannels\n   * Referenced by: '<Root>/Digital output '\n   */\n  { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 15.0,\n    16.0 },\n\n  /* Computed Parameter: Digitaloutput_P5_Size\n   * Referenced by: '<Root>/Digital output '\n   */\n  { 1.0, 15.0 },\n\n  /* Expression: parDoInitValues\n   * Referenced by: '<Root>/Digital output '\n   */\n  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },\n\n  /* Computed Parameter: Digitaloutput_P6_Size\n   * Referenced by: '<Root>/Digital output '\n   */\n  { 1.0, 15.0 },\n\n  /* Expression: parDoResets\n   * Referenced by: '<Root>/Digital output '\n   */\n  { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },\n\n  /* Computed Parameter: Digitalinput_P1_Size\n   * Referenced by: '<Root>/Digital input '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parModuleId\n   * Referenced by: '<Root>/Digital input '\n   */\n  1.0,\n\n  /* Computed Parameter: Digitalinput_P2_Size\n   * Referenced by: '<Root>/Digital input '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parSampleTime\n   * Referenced by: '<Root>/Digital input '\n   */\n  0.001,\n\n  /* Computed Parameter: Digitalinput_P3_Size\n   * Referenced by: '<Root>/Digital input '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parPciSlot\n   * Referenced by: '<Root>/Digital input '\n   */\n  -1.0,\n\n  /* Computed Parameter: Digitalinput_P4_Size\n   * Referenced by: '<Root>/Digital input '\n   */\n  { 1.0, 1.0 },\n\n  /* Expression: parDiChannels\n   * Referenced by: '<Root>/Digital input '\n   */\n  14.0\n};\n\nATTN_cal_type *ATTN_cal = &ATTN_cal_impl;\n"},{"name":"ATTN_cal.h","type":"header","group":"data","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Data files","code":"#ifndef RTW_HEADER_ATTN_cal_h_\n#define RTW_HEADER_ATTN_cal_h_\n#include \"rtwtypes.h\"\n\n/* Storage class 'PageSwitching', for system '<Root>' */\nstruct ATTN_cal_type {\n  real_T SampleTime;                   /* Variable: SampleTime\n                                        * Referenced by: '<Root>/SampleTime'\n                                        */\n  real_T T_npxls;                      /* Variable: T_npxls\n                                        * Referenced by: '<Root>/Npxls Trig'\n                                        */\n  real_T T_pupil;                      /* Variable: T_pupil\n                                        * Referenced by: '<Root>/Pupil Trig'\n                                        */\n  real_T T_whisk;                      /* Variable: T_whisk\n                                        * Referenced by: '<Root>/Whisker Trig'\n                                        */\n  real_T maxFrame;                     /* Variable: maxFrame\n                                        * Referenced by: '<Root>/Constant'\n                                        */\n  real_T rewardDuration;               /* Variable: rewardDuration\n                                        * Referenced by: '<Root>/rewardDuration'\n                                        */\n  real_T targetSide;                   /* Variable: targetSide\n                                        * Referenced by: '<Root>/targetSide'\n                                        */\n  real_T trainingStage;                /* Variable: trainingStage\n                                        * Referenced by: '<Root>/trainingStage'\n                                        */\n  real_T triangleAmplitude;            /* Variable: triangleAmplitude\n                                        * Referenced by: '<Root>/triangleAmplitude'\n                                        */\n  real_T triangleDuration;             /* Variable: triangleDuration\n                                        * Referenced by: '<Root>/triangleDuration'\n                                        */\n  real_T Memory8_InitialCondition;     /* Expression: 0\n                                        * Referenced by: '<Root>/Memory8'\n                                        */\n  real_T Memory2_InitialCondition;     /* Expression: 1\n                                        * Referenced by: '<Root>/Memory2'\n                                        */\n  real_T Memory1_InitialCondition;     /* Expression: 0\n                                        * Referenced by: '<Root>/Memory1'\n                                        */\n  real_T Memory_InitialCondition;      /* Expression: 0\n                                        * Referenced by: '<Root>/Memory'\n                                        */\n  real_T Setup_P1_Size[2];             /* Computed Parameter: Setup_P1_Size\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P1;                     /* Expression: parPciSlot\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P2_Size[2];             /* Computed Parameter: Setup_P2_Size\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P2;                     /* Expression: parModuleId\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P3_Size[2];             /* Computed Parameter: Setup_P3_Size\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P3;                     /* Expression: parTriggerSignal\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P4_Size[2];             /* Computed Parameter: Setup_P4_Size\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P4[2];                  /* Expression: parAdcChannels\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P5_Size[2];             /* Computed Parameter: Setup_P5_Size\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P5;                     /* Expression: parAdcMode\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P6_Size[2];             /* Computed Parameter: Setup_P6_Size\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P6[2];                  /* Expression: parAdcRanges\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P7_Size[2];             /* Computed Parameter: Setup_P7_Size\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P7[2];                  /* Expression: parDacChannels\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P8_Size[2];             /* Computed Parameter: Setup_P8_Size\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P8[2];                  /* Expression: parDacRanges\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P9_Size[2];             /* Computed Parameter: Setup_P9_Size\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Setup_P9[8];                  /* Expression: parDioFirstControl\n                                        * Referenced by: '<Root>/Setup '\n                                        */\n  real_T Analoginput_P1_Size[2];      /* Computed Parameter: Analoginput_P1_Size\n                                       * Referenced by: '<Root>/Analog input '\n                                       */\n  real_T Analoginput_P1;               /* Expression: parModuleId\n                                        * Referenced by: '<Root>/Analog input '\n                                        */\n  real_T Analoginput_P2_Size[2];      /* Computed Parameter: Analoginput_P2_Size\n                                       * Referenced by: '<Root>/Analog input '\n                                       */\n  real_T Analoginput_P2;               /* Expression: parSampleTime\n                                        * Referenced by: '<Root>/Analog input '\n                                        */\n  real_T Analoginput_P3_Size[2];      /* Computed Parameter: Analoginput_P3_Size\n                                       * Referenced by: '<Root>/Analog input '\n                                       */\n  real_T Analoginput_P3;               /* Expression: parPciSlot\n                                        * Referenced by: '<Root>/Analog input '\n                                        */\n  real_T Analoginput_P4_Size[2];      /* Computed Parameter: Analoginput_P4_Size\n                                       * Referenced by: '<Root>/Analog input '\n                                       */\n  real_T Analoginput_P4[2];            /* Expression: parAdcChannels\n                                        * Referenced by: '<Root>/Analog input '\n                                        */\n  real_T Analoginput_P5_Size[2];      /* Computed Parameter: Analoginput_P5_Size\n                                       * Referenced by: '<Root>/Analog input '\n                                       */\n  real_T Analoginput_P5;               /* Expression: parAdcMode\n                                        * Referenced by: '<Root>/Analog input '\n                                        */\n  real_T Analoginput_P6_Size[2];      /* Computed Parameter: Analoginput_P6_Size\n                                       * Referenced by: '<Root>/Analog input '\n                                       */\n  real_T Analoginput_P6;               /* Expression: parAdcRate\n                                        * Referenced by: '<Root>/Analog input '\n                                        */\n  real_T Analoginput_P7_Size[2];      /* Computed Parameter: Analoginput_P7_Size\n                                       * Referenced by: '<Root>/Analog input '\n                                       */\n  real_T Analoginput_P7[2];            /* Expression: parAdcRanges\n                                        * Referenced by: '<Root>/Analog input '\n                                        */\n  real_T Analoginput_P8_Size[2];      /* Computed Parameter: Analoginput_P8_Size\n                                       * Referenced by: '<Root>/Analog input '\n                                       */\n  real_T Analoginput_P8[2];            /* Expression: parAdcInitValues\n                                        * Referenced by: '<Root>/Analog input '\n                                        */\n  real_T Analoginput_P9_Size[2];      /* Computed Parameter: Analoginput_P9_Size\n                                       * Referenced by: '<Root>/Analog input '\n                                       */\n  real_T Analoginput_P9[2];            /* Expression: parAdcResets\n                                        * Referenced by: '<Root>/Analog input '\n                                        */\n  real_T GeneratedFilterBlock_InitialSta;/* Expression: 0\n                                          * Referenced by: '<S1>/Generated Filter Block'\n                                          */\n  real_T GeneratedFilterBlock_Coefficien[4030];\n  /* Expression: [-2.4454897006896513e-06 -2.56742173651953851e-06 -2.6904861545531488e-06 -2.81454714397193635e-06 -2.93946535214558641e-06 -3.06509803031091609e-06 -3.19129918589820491e-06 -3.31791974136534052e-06 -3.44480769938805513e-06 -3.57180831424570957e-06 -3.6987642692300706e-06 -3.8255158598941323e-06 -3.9519011829499759e-06 -4.07775633061091228e-06 -4.20291559016737714e-06 -4.32721164857290318e-06 -4.45047580180991913e-06 -4.57253816879339651e-06 -4.69322790956374843e-06 -4.8123734475098501e-06 -4.92980269535605193e-06 -5.04534328463753935e-06 -5.15882279838227398e-06 -5.27006900670890746e-06 -5.37891010504324102e-06 -5.48517495464968105e-06 -5.58869332516680343e-06 -5.68929613883073187e-06 -5.78681571606370287e-06 -5.88108602210100086e-06 -5.97194291432307867e-06 -6.05922438995672689e-06 -6.14277083380392516e-06 -6.22242526565437995e-06 -6.29803358703354215e-06 -6.36944482693648908e-06 -6.43651138619465127e-06 -6.49908928012128943e-06 -6.55703837908017639e-06 -6.61022264662100308e-06 -6.6585103748249614e-06 -6.70177441650380619e-06 -6.73989241389677914e-06 -6.77274702351052664e-06 -6.80022613674919182e-06 -6.82222309598376366e-06 -6.83863690571265582e-06 -6.84937243846851868e-06 -6.85434063513022441e-06 -6.8534586993027498e-06 -6.84665028543312436e-06 -6.83384568033498058e-06 -6.81498197780058264e-06 -6.79000324598519844e-06 -6.7588606872556066e-06 -6.7215127902011652e-06 -6.6779254735145738e-06 -6.62807222145621961e-06 -6.57193421062661881e-06 -6.50950042777781941e-06 -6.44076777840752028e-06 -6.36574118588637646e-06 -6.28443368088219129e-06 -6.19686648085330975e-06 -6.10306905939659581e-06 -6.00307920524582762e-06 -5.89694307072888454e-06 -5.78471520950516905e-06 -5.66645860341573113e-06 -5.54224467829441058e-06 -5.41215330859853472e-06 -5.27627281073555752e-06 -5.13469992497098551e-06 -4.98753978582351413e-06 -4.83490588086176477e-06 -4.67691999783725106e-06 -4.51371216009933806e-06 -4.34542055025563724e-06 -4.17219142205730692e-06 -3.99417900050058786e-06 -3.81154537015837133e-06 -3.62446035176441086e-06 -3.43310136709531978e-06 -3.23765329220624862e-06 -3.03830829909817188e-06 -2.83526568590412352e-06 -2.62873169570644138e-06 -2.41891932410507237e-06 -2.20604811568059974e-06 -1.99034394950661538e-06 -1.77203881388551769e-06 -1.55137057049779708e-06 -1.32858270816880078e-06 -1.10392408647583881e-06 -8.77648669431910269e-07 -6.50015249500740855e-07 -4.21287162209172574e-07 -1.91731991643504118e-07 3.83787328738238149e-08 2.68769848611957874e-07 4.99162879436978308e-07 7.29276363651105298e-07 9.58826189311450054e-07 1.18752593665789316e-06 1.41508722726677149e-06 1.64122007953655106e-06 1.86563327009644334e-06 2.08803470071945437e-06 2.30813177030736605e-06 2.5256317515079827e-06 2.7402421715097328e-06 2.95167119655339559e-06 3.15962801968779996e-06 3.36382325128986446e-06 3.56396931185877859e-06 3.7597808265890518e-06 3.95097502121797448e-06 4.13727211863640978e-06 4.31839573574811592e-06 4.49407328005482627e-06 4.66403634544175454e-06 4.82802110663231549e-06 4.98576871178017947e-06 5.13702567266087042e-06 5.28154425192639895e-06 5.4190828468827203e-06 5.54940636925090163e-06 5.67228662037188987e-06 5.7875026613169812e-06 5.8948411773662372e-06 5.99409683632077295e-06 6.08507264011719913e-06 6.1675802692164393e-06 6.24144041924405756e-06 6.30648312936384278e-06 6.36254810187336759e-06 6.40948501251614932e-06 6.44715381101293179e-06 6.47542501132312705e-06 6.49417997115539655e-06 6.50331116025755296e-06 6.50272241702466551e-06 6.49232919297680992e-06 6.47205878466845959e-06 6.4418505526048911e-06 6.4016561267535234e-06 6.35143959825205895e-06 6.29117769693003751e-06 6.22085995427479805e-06 6.1404888514893769e-06 6.0500799523051377e-06 5.9496620202302234e-06 5.83927711993068915e-06 5.71898070246055245e-06 5.58884167407495812e-06 5.44894244837969805e-06 5.29937898158983258e-06 5.14026079069042842e-06 4.97171095431314121e-06 4.79386609616151712e-06 4.60687635084247577e-06 4.41090531197944271e-06 4.20612996250760769e-06 3.99274058707156991e-06 3.7709406664711482e-06 3.5409467541209015e-06 3.30298833451453504e-06 3.0573076637077552e-06 2.80415959185655258e-06 2.54381136787175355e-06 2.27654242627477419e-06 2.00264415636378432e-06 1.72241965382113412e-06 1.43618345492137853e-06 1.14426125351860158e-06 8.46989601018728823e-07 5.4471558956560589e-07 2.37796518693000635e-07 -7.34004542811584135e-08 -3.88498679817225954e-07 -7.07112397351644295e-07 -1.02884713178174172e-06 -1.35330010486917395e-06 -1.68006066116995498e-06 -2.0087107080755471e-06 -2.33882516953116683e-06 -2.66997245297026213e-06 -3.00171492898846112e-06 -3.33360942325612003e-06 -3.6652077201492647e-06 -3.99605707756006983e-06 -4.32570075232622893e-06 -4.65367853570289989e-06 -4.97952729828084654e-06 -5.30278154373712104e-06 -5.6229739707888761e-06 -5.93963604270399697e-06 -6.2522985637060454e-06 -6.56049226159932314e-06 -6.86374837592118038e-06 -7.16159925091994618e-06 -7.45357893264225459e-06 -7.73922376940230983e-06 -8.01807301489492852e-06 -8.28966943320520219e-06 -8.5535599049574462e-06 -8.80929603383832544e-06 -9.05643475272327051e-06 -9.29453892862707827e-06 -9.52317796569580977e-06 -9.74192840545257e-06 -9.95037452350555126e-06 -1.01481089219268115e-05 -1.03347331165053871e-05 -1.05098581180815878e-05 -1.06731050071681686e-05 -1.08241055010660116e-05 -1.09625025126856862e-05 -1.10879507002891151e-05 -1.12001170073709565e-05 -1.12986811919055909e-05 -1.13833363441919839e-05 -1.14537893925371451e-05 -1.15097615960282006e-05 -1.15509890236526157e-05 -1.1577223019038122e-05 -1.15882306500953313e-05 -1.15837951428598438e-05 -1.15637162988447701e-05 -1.15278108952294818e-05 -1.14759130672274535e-05 -1.14078746719922455e-05 -1.13235656334400798e-05 -1.12228742673852921e-05 -1.11057075864063662e-05 -1.0971991583880117e-05 -1.0821671496644061e-05 -1.06547120457701022e-05 -1.04710976549546779e-05 -1.02708326460575458e-05 -1.00539414113440673e-05 -9.82046856201340718e-06 -9.57047905262112241e-06 -9.30405828103280406e-06 -9.02131216357223566e-06 -8.72236718505795695e-06 -8.4073704234508707e-06 -8.07648954886457953e-06 -7.72991279672293217e-06 -7.36784891487807181e-06 -6.9905270845354627e-06 -6.59819681486424579e-06 -6.19112781120164306e-06 -5.76960981679717894e-06 -5.33395242807143018e-06 -4.88448488339968594e-06 -4.42155582546473257e-06 -3.945533037255433e-06 -3.45680315182324252e-06 -2.95577133594360786e-06 -2.44286094786031638e-06 -1.91851316932994151e-06 -1.38318661221356801e-06 -8.37356899899986856e-07 -2.81516223878596048e-07 2.83827124188926216e-07 8.58149244508839269e-07 1.44091114489095163e-06 2.03155927972577335e-06 2.62952611171769604e-06 3.23423069585483704e-06 3.84507928506591353e-06 4.4614659569803942e-06 5.08277326117686149e-06 5.70837288627663626e-06 6.3376263462047869e-06 6.96988568491501509e-06 7.60449419884251246e-06 8.24078717632560202e-06 8.87809265320163121e-06 9.51573218376379308e-06 1.01530216262345328e-05 1.07892719418882461e-05 1.14237900069305794e-05 1.20558794362201756e-05 1.26848414178947936e-05 1.33099755579422045e-05 1.39305807337392365e-05 1.45459559555585976e-05 1.51554012350293981e-05 1.57582184595167666e-05 1.6353712271375338e-05 1.69411909510097405e-05 1.75199673026693256e-05 1.8089359541887669e-05 1.86486921834689776e-05 1.91972969289126635e-05 1.97345135521614366e-05 2.02596907825494753e-05 2.07721871838229464e-05 2.12713720281010781e-05 2.17566261636446737e-05 2.22273428752951346e-05 2.26829287364504133e-05 2.31228044514435997e-05 2.35464056871961148e-05 2.39531838930181726e-05 2.43426071074387285e-05 2.47141607509534023e-05 2.50673484035879341e-05 2.54016925661848918e-05 2.57167354043349785e-05 2.60120394738852346e-05 2.62871884269735896e-05 2.65417876975543952e-05 2.67754651653975205e-05 2.69878717975628928e-05 2.7178682266372887e-05 2.73475955429271858e-05 2.74943354652274162e-05 2.76186512800044874e-05 2.77203181573669635e-05 2.77991376774158878e-05 2.78549382880012382e-05 2.78875757328239463e-05 2.78969334491183536e-05 2.78829229341840118e-05 2.78454840800666389e-05 2.77845854757251558e-05 2.77002246760551068e-05 2.75924284371779565e-05 2.74612529174402938e-05 2.73067838436096104e-05 2.71291366417894129e-05 2.69284565326193599e-05 2.67049185903662687e-05 2.64587277655543766e-05 2.61901188708275404e-05 2.58993565297753857e-05 2.55867350885066752e-05 2.52525784897917933e-05 2.48972401096441854e-05 2.45211025562575617e-05 2.41245774312603908e-05 2.37081050532975166e-05 2.32721541439922889e-05 2.28172214763971909e-05 2.23438314860800712e-05 2.18525358450473465e-05 2.13439129987494537e-05 2.0818567666465649e-05 2.02771303054063974e-05 1.97202565389293319e-05 1.91486265493032306e-05 1.85629444355059863e-05 1.79639375365911069e-05 1.73523557212005281e-05 1.67289706438527722e-05 1.60945749686733894e-05 1.54499815612925192e-05 1.47960226496668713e-05 1.4133548954635892e-05 1.34634287910620626e-05 1.27865471404491475e-05 1.21038046959756022e-05 1.14161168809159688e-05 1.07244128414732429e-05 1.00296344150754457e-05 9.33273507523066983e-06 8.63467885407499148e-06 7.9364392437814871e-06 7.23899807802875304e-06 6.54334439477233353e-06 5.85047328158244113e-06 5.16138470485011343e-06 4.47708232419025432e-06 3.79857229339882008e-06 3.12686204934956706e-06 2.46295909023464931e-06 1.80786974458754295e-06 1.16259793253819691e-06 5.28143920774690558e-07 -9.44969272934424172e-08 -7.04335404663286907e-07 -1.30038971563122837e-06 -1.8816867309167002e-06 -2.447263241463013e-06 -2.99616720936071847e-06 -3.52745901432598728e-06 -4.04021269416318299e-06 -4.53351717763413782e-06 -5.00647750816109337e-06 -5.45821605678093252e-06 -5.8878737227788495e-06 -6.2946111204303363e-06 -6.67760975028488961e-06 -7.03607315343574571e-06 -7.36922804722753114e-06 -7.67632544086913082e-06 -7.95664172942752489e-06 -8.20947976470048841e-06 -8.43416990147975231e-06 -8.6300710177383264e-06 -8.7965715072965588e-06 -8.93309024354566746e-06 -9.03907751283445127e-06 -9.11401591615019931e-06 -9.1574212377564568e-06 -9.16884327948184165e-06 -9.14786665938555032e-06 -9.09411157356243098e-06 -9.0072345198866871e-06 -8.88692898253116069e-06 -8.73292607614097593e-06 -8.54499514858120532e-06 -8.32294434122285033e-06 -8.06662110577549486e-06 -7.77591267672398382e-06 -7.4507464984711574e-06 -7.09109060634323785e-06 -6.69695396066148219e-06 -6.26838673313770388e-06 -5.80548054490621798e-06 -5.3083686555584956e-06 -4.77722610260129916e-06 -4.21226979082113935e-06 -3.61375853109139703e-06 -2.98199302821968954e-06 -2.31731581749385189e-06 -1.62011114964417814e-06 -8.90804824004510489e-07 -1.29863969710627579e-07 6.62203225152649141e-07 1.48484783649006684e-06 2.33748057918434828e-06 3.21947223403867692e-06 4.13015412650776714e-06 5.06881865698949329e-06 6.03471988238867284e-06 7.02707414858729014e-06 8.04506077340343519e-06 9.08782277954715384e-06 1.01544676770210228e-05 1.12440682943439615e-05 1.23556636579213591e-05 1.3488259918806852e-05 1.46408313260509151e-05 1.58123212457597607e-05 1.70016432249320362e-05 1.82076820990725168e-05 1.94292951425250978e-05 2.06653132604133703e-05 2.19145422210026323e-05 2.31757639272567605e-05 2.4447737726295642e-05 2.5729201755407476e-05 2.70188743232164719e-05 2.83154553245493851e-05 2.96176276875042219e-05 3.09240588511570247e-05 3.22334022723124334e-05 3.35442989596443491e-05 3.48553790335380537e-05 3.61652633098908421e-05 3.74725649060999081e-05 3.87758908674173391e-05 4.00738438118181285e-05 4.1365023591493628e-05 4.26480289690474526e-05 4.3921459306441515e-05 4.51839162647072929e-05 4.6434005512421787e-05 4.76703384409062639e-05 4.88915338841011568e-05 5.00962198410391136e-05 5.12830351988307785e-05 5.2450631454053306e-05 5.35976744304264929e-05 5.47228459906550071e-05 5.58248457402955924e-05 5.69023927215180235e-05 5.79542270946186509e-05 5.89791118051492171e-05 5.9975834234523781e-05 6.09432078319816482e-05 6.18800737257796152e-05 6.27853023115111409e-05 6.36577948154561172e-05 6.44964848308873925e-05 6.53003398252745027e-05 6.60683626163496992e-05 6.67995928150314069e-05 6.74931082332157781e-05 6.81480262544895886e-05 6.87635051658431356e-05 6.93387454484994703e-05 6.98729910260140441e-05 7.03655304678386224e-05 7.08156981465880587e-05 7.12228753472904375e-05 7.15864913269523376e-05 7.19060243228197312e-05 7.21810025077658919e-05 7.24110048912952631e-05 7.25956621647069826e-05 7.27346574890211524e-05 7.28277272243328352e-05 7.28746615993212471e-05 7.28753053197070942e-05 7.28295581145171162e-05 7.27373752190860721e-05 7.259876779379302e-05 7.24138032776059574e-05 7.21826056755787092e-05 7.19053557795216037e-05 7.15822913211422516e-05 7.12137070570345549e-05 7.0799954784970173e-05 7.03414432910258583e-05 6.98386382271697537e-05 6.92920619190015694e-05 6.87022931034335263e-05 6.80699665961790484e-05 6.7395772889004195e-05 6.66804576767767587e-05 6.59248213144429706e-05 6.51297182041405613e-05 6.42960561127461455e-05 6.34247954202451808e-05 6.2516948299391631e-05 6.15735778272235435e-05 6.05957970290748924e-05 5.95847678558186463e-05 5.85417000951624531e-05 5.7467850217897656e-05 5.63645201600954207e-05 5.52330560423215381e-05 5.40748468270333798e-05 5.2891322915390803e-05 5.16839546848158e-05 5.0454250968695602e-05 4.92037574797179775e-05 4.79340551783946213e-05 4.66467585884183187e-05 4.53435140605598899e-05 4.40259979868955087e-05 4.26959149672238568e-05 4.1354995929599272e-05 4.00049962069807979e-05 3.86476935720549497e-05 3.72848862323650791e-05 3.59183907879327184e-05 3.45500401536160477e-05 3.3181681448515976e-05 3.18151738547860425e-05 3.04523864482550484e-05 2.90951960033298979e-05 2.77454847746773432e-05 2.64051382582449733e-05 2.50760429342042453e-05 2.37600839944534683e-05 2.2459143057343081e-05 2.11750958723173445e-05 1.99098100172049377e-05 1.86651425909056001e-05 1.74429379042502226e-05 1.62450251718246207e-05 1.50732162075714855e-05 1.3929303126990375e-05 1.28150560587668223e-05 1.17322208686688612e-05 1.06825168985538214e-05 9.66763472331852023e-06 8.68923392863325877e-06 7.74894091228238957e-06 6.8483467119289536e-06 5.98900486209975996e-06 5.17242928317719447e-06 4.40009220515395842e-06 3.67342212888420972e-06 2.99380182753852236e-06 2.36256639093370463e-06 1.78100131537171785e-06 1.25034064158906065e-06 7.71765143365992182e-07 3.46400569307330583e-07 -2.46840597499346523e-08 -3.40478095294595267e-07 -6.00030845315969178e-07 -8.024530958065625e-07 -9.46918567363047958e-07 -1.03266530472504136e-06 -1.05899699715768848e-06 -1.02528422765607383e-06 -9.30965649024110128e-07 -7.75549084957560998e-07 -5.58612554341521511e-07 -2.79805217053688895e-07 6.11517603473116393e-08 4.64464420584718024e-07 9.3026531472092782e-07 1.45861288566121736e-06 2.04949093736260938e-06 2.70280819090714819e-06 3.41839792850228234e-06 4.19601772636933121e-06 5.03534927738084869e-06 5.93599830419925369e-06 6.89749456356796217e-06 7.91929194229906904e-06 9.00076864538796475e-06 1.01412274765843135e-05 1.13398962116320919e-05 1.25959280642806281e-05 1.39084022450607053e-05 1.52763246127006391e-05 1.66986284179521173e-05 1.81741751394722837e-05 1.97017554113015015e-05 2.12800900413633826e-05 2.29078311202911969e-05 2.45835632197793695e-05 2.63058046795451575e-05 2.80730089818621362e-05 2.98835662125325028e-05 3.17358046070324089e-05 3.36279921804757333e-05 3.5558338439912096e-05 3.75249961773783551e-05 3.95260633420160609e-05 4.15595849894504621e-05 4.36235553065335093e-05 4.57159197094498117e-05 4.78345770130733587e-05 4.99773816693776003e-05 5.21421460725942837e-05 5.43266429287322404e-05 5.65286076869603071e-05 5.87457410302865045e-05 6.09757114228675411e-05 6.32161577111980228e-05 6.54646917763526681e-05 6.77189012343790267e-05 6.99763521818492443e-05 7.22345919835239142e-05 7.44911520989989794e-05 7.67435509451544007e-05 7.89892967911457356e-05 8.1225890682632787e-05 8.3450829391888077e-05 8.56616083903590116e-05 8.78557248402323963e-05 9.00306806014951013e-05 9.21839852509433389e-05 9.43131591095675383e-05 9.6415736274699701e-05 9.84892676532949523e-05 0.000100531323992680249 0.000102539498905100258 0.000104511411882372938 0.000106444711296951419 0.000108337077385690754 0.000110186225212620924 0.000111989907607017579 0.000113745918073090643 0.000115452093667604386 0.000117106317841777068 0.000118706523243817996 0.0001202506944784939 0.000121736870820148333 0.000123163148875626995 0.000124527685193609217 0.000125828698816891481 0.000127064473774208262 0.000128233361508242128 0.000129333783236525797 0.000130364232242002079 0.000131323276090074986 0.000132209558769058686 0.000133021802751002836 0.000133758810969952368 0.000134419468714785858 0.000135002745433861264 0.00013550769644878928 0.000135933464574750334 0.000136279281644868534 0.000136544469936259908 0.000136728443495473658 0.000136830709361159794 0.000136850868681904559 0.000136788617727289343 0.000136643748790352788 0.000136416150979749119 0.000136105810900027165 0.000135712813218573039 0.000135237341117897919 0.000134679676632073358 0.000134040200866257178 0.000133319394098387241 0.00013251783576225326 0.00013163620431130187 0.000130675276962667906 0.000129635929321063342 0.000128519134882306828 0.000127325964416413366 0.000126057585230311941 0.000124715260310402073 0.00012330034734531534 0.000121814297629381504 0.000120258654847454744 0.000118635053741901803 0.000116945218662699532 0.000115190962001728535 0.000113374182512513311 0.000111496863516785655 0.00010956107099940059 0.000107568951593281479 0.000105522730456206857 0.000103424709041389598 0.000101277262763951276 9.90828385655123417e-05 9.68439523792761581e-05 9.45631864980953644e-05 9.22431868481591552e-05 8.988666017106003e-05 8.74963711171166287e-05 8.50751392529726049e-05 8.26258359865886184e-05 8.01513814128816508e-05 7.76547410833566132e-05 7.51389227032160092e-05 7.26069727595040265e-05 7.00619730839798004e-05 6.75070373544795383e-05 6.49453075386560903e-05 6.23799502840404564e-05 5.98141532584885012e-05 5.72511214451329329e-05 5.46940733960560736e-05 5.21462374489532391e-05 4.96108479111470306e-05 4.70911412153580042e-05 4.45903520516966378e-05 4.21117094804083936e-05 3.96584330299368243e-05 3.72337287849155207e-05 3.48407854687412627e-05 3.24827705254111538e-05 3.01628262053307201e-05 2.78840656598160303e-05 2.56495690490424667e-05 2.34623796681883814e-05 2.1325500096526717e-05 1.92418883742272843e-05 1.72144542116127404e-05 1.52460552355979332e-05 1.33394932780344288e-05 1.14975107106455506e-05 9.72278683120655966e-06 8.01793430560036103e-06 6.3854956703171976e-06 4.82793989993989907e-06 3.34765904408123832e-06 1.94696493819888697e-06 6.28085992636548305e-07 -6.06835935830482742e-07 -1.75574858573479678e-06 -2.81669224182361141e-06 -3.78780259109465694e-06 -4.66731348002139432e-06 -5.45355956911968232e-06 -6.14497888111593973e-06 -6.74011523908412897e-06 -7.2376205910302177e-06 -7.63625721752075011e-06 -7.93489981907872697e-06 -8.13253748019135667e-06 -8.2282755069112977e-06 -8.22133713516543325e-06 -8.11106510702813748e-06 -7.89692311235812947e-06 -7.57849709334840063e-06 -7.15549640968867456e-06 -6.62775486219680243e-06 -5.99523157293508326e-06 -5.25801171998555602e-06 -4.41630712523162357e-06 -3.47045669365063267e-06 -2.42092670280490033e-06 -1.26831094137979261e-06 -1.33306958037294656e-08 1.34316541584313651e-06 2.80020176324794903e-06 4.35667617703729869e-06 6.01136057595422113e-06 7.76290174810757893e-06 9.60982228616753257e-06 1.15505216762064847e-05 1.3583277539688858e-05 1.57062470279345205e-05 1.79174683681889438e-05 2.02148625602407352e-05 2.25962352223594721e-05 2.50592785851159898e-05 2.76015736314792198e-05 3.02205923813994524e-05 3.2913700318890242e-05 3.56781589594530152e-05 3.85111285555107778e-05 4.14096709373211119e-05 4.4370752486684092e-05 4.73912472405696726e-05 5.0467940121637246e-05 5.35975302924230463e-05 5.67766346298392399e-05 6.00017913164425449e-05 6.32694635447770328e-05 6.65760433309440787e-05 6.99178554334071897e-05 7.32911613728717983e-05 7.66921635489596843e-05 8.01170094492434224e-05 8.35617959460873956e-05 8.70225736765919565e-05 9.04953515008301854e-05 9.39761010334509971e-05 9.74607612435810617e-05 0.000100945243117889078 0.000104425434381541862 0.000107897204271696658 0.000111356408358089364 0.000114798893405177902 0.000118220502270245404 0.00012161707883176624 0.000124984472942293233 0.000128318545400067896 0.000131615172933481438 0.000134870253192487228 0.000138079709741030179 0.000141239497044501241 0.000144345605446236672 0.000147394066127025343 0.000150380956041615185 0.000153302402826173179 0.000156154589670677124 0.000158933760150228778 0.000161636223009280661 0.000164258356892811364 0.000166796615018512063 0.000169247529784080837 0.000171607717303779713 0.000173873881868453405 0.000176042820323286573 0.00017811142635762171 0.000180076694701264357 0.000181935725221764246 0.000183685726917262062 0.00018532402179958536 0.000186848048662388285 0.000188255366729230418 0.000189543659176615931 0.000190710736527138021 0.000191754539908004136 0.000192673144170349517 0.000193464760864902024 0.000194127741069698791 0.000194660578065717184 0.000195061909856445565 0.000195330521527579222 0.000195465347443207532 0.000195465473275028596 0.000195330137861317646 0.000195058734892554459 0.000194650814420816093 0.00019410608419023119 0.000193424410785996266 0.00019260582059965728 0.000191650500608571222 0.000190558798967670981 0.000189331225411874977 0.000187968451467702714 0.000186471310472871761 0.000184840797402884634 0.000183078068503836783 0.000181184440730902381 0.000179161390992186762 0.000177010555197868705 0.000174733727114785695 0.000172332857026845083 0.000169810050201889983 0.000167167565165871507 0.000164407811785424268 0.000161533349160161558 0.00015854688332626887 0.000155451264773169779 0.000152249485775315642 0.000148944677541332422 0.000145540107183041813 0.000142039174507047674 0.000138445408631852375 0.000134762464433658329 0.000130994118824247587 0.000127144266864540219 0.000123216917717658181 0.00011921619044552646 0.000115146309653239097 0.000111011600985652003 0.000106816486480820188 0.000102565479785140983 9.82631812352008555e-05 9.39142728115593088e-05 8.95235129698469687e-05 8.50957313547334043e-05 8.06358234025119481e-05 7.61487448381811534e-05 7.16395060730658283e-05 6.71131665091860975e-05 6.25748287567075078e-05 5.80296327709341504e-05 5.34827499154652975e-05 4.89393769582267523e-05 4.4404730007212039e-05 3.9884038392877073e-05 3.53825385042324584e-05 3.09054675857608037e-05 2.6458057502361098e-05 2.20455284796226731e-05 1.76730828267706107e-05 1.33458986496838148e-05 9.06912356145610812e-06 4.84786839798954901e-06 6.87200946137479062e-07 -3.40786030803718986e-06 -7.4323524033368756e-06 -1.13813740922782728e-05 -1.52500919871350752e-05 -1.9033746655653679e-05 -2.27276586588921652e-05 -2.63272345237168974e-05 -2.98279726424872906e-05 -3.32254690925390313e-05 -3.65154233681300216e-05 -3.96936440175692549e-05 -4.27560541783426207e-05 -4.56986970031257229e-05 -4.85177409696808726e-05 -5.12094850677213858e-05 -5.37703638559592598e-05 -5.61969523826627595e-05 -5.84859709631872191e-05 -6.06342898080698177e-05 -6.26389334954471531e-05 -6.44970852816859042e-05 -6.62060912443016882e-05 -6.77634642513943888e-05 -6.91668877520263856e-05 -7.04142193821368807e-05 -7.15034943807955073e-05 -7.243292881179294e-05 -7.32009225857723086e-05 -7.38060622783261774e-05 -7.42471237397002989e-05 -7.45230744919757435e-05 -7.46330759098324311e-05 -7.45764851812408312e-05 -7.43528570446672321e-05 -7.39619452996353679e-05 -7.34037040877385941e-05 -7.26782889414528336e-05 -7.1786057598376989e-05 -7.07275705787830219e-05 -6.95035915246355228e-05 -6.81150872985199018e-05 -6.65632278411918153e-05 -6.48493857867447963e-05 -6.29751358346775574e-05 -6.09422538784258847e-05 -5.87527158902239959e-05 -5.64086965624286809e-05 -5.39125677057560908e-05 -5.12668964051568154e-05 -4.84744429343453672e-05 -4.55381584303121535e-05 -4.2461182329414437e-05 -3.92468395669574697e-05 -3.58986375424424101e-05 -3.24202628529801363e-05 -2.8815577797631068e-05 -2.50886166557271471e-05 -2.12435817425181303e-05 -1.72848392457738985e-05 -1.32169148472250564e-05 -9.04448913303779275e-06 -4.77239279775857503e-06 -4.05601646452660992e-07 4.05076859999724614e-06 8.59146769117863293e-06 1.3211116419539222e-05 1.79042123731499464e-05 2.26651358628424106e-05 2.74881560175088403e-05 3.23674370411305366e-05 3.72970446248335242e-05 4.2270952507117932e-05 4.72830491751275264e-05 5.23271446996947335e-05 5.73969776966374871e-05 6.24862224066406144e-05 6.75884958858724891e-05 7.2697365299288823e-05 7.78063553084475335e-05 8.2908955545501841e-05 8.79986281648718102e-05 9.30688154639932171e-05 9.81129475643973336e-05 0.00010312445014427736 0.00010809675221358545 0.000113023293922595943 0.000117897534394835281 0.000122712959575142978 0.000127463090083615476 0.000132141489066122324 0.000136741770032019387 0.000141257604669692754 0.00014568273063051394 0.000150010959271818428 0.00015423618334947447 0.00015835238465067121 0.000162353641557560585 0.000166234136532416552 0.000169988163515048709 0.000173610135223249278 0.000177094590347127583 0.000180436200628275649 0.000183629777814796498 0.00018667028048334033 0.000189552820719396799 0.000192272670647228051 0.000194825268800976194 0.000197206226328597447 0.000199411333020468873 0.000201436563154664761 0.000203278081151077815 0.000204932247026770115 0.000206395621645110393 0.000207664971751501243 0.000208737274788678591 0.000209609723484832216 0.000210279730208012122 0.000210744931080539749 0.000211003189847399166 0.000211052601492850656 0.000210891495599772346 0.000210518439446527757 0.000209932240836437539 0.000209131950655226862 0.000208116865152132061 0.000206886527940643958 0.00020544073171519512 0.000203779519680404953 0.000201903186689835487 0.00019981228009152829 0.000197507600277942511 0.000194990200938245997 0.000192261389011252621 0.000189322724337662293 0.000186176019010588596 0.000182823336423741032 0.000179266990016949389 0.000175509541719119909 0.00017155380008902581 0.000167402818154742936 0.000163059890952856642 0.000158528552768975894 0.000153812574081402666 0.000148915958210213493 0.000143842937674336217 0.000138597970259584199 0.000133185734800948515 0.000127611126682830372 0.000121879253061225935 0.000115995427812221375 0.000109965166211535388 0.000103794179350143558 9.74883682913819688e-05 9.1053817975263502e-05 8.44967908760483791e-05 7.78237204194477878e-05 7.10412041661362674e-05 6.41559967685893237e-05 5.71750027085322178e-05 5.01052688225822184e-05 4.29539766239894229e-05 3.57284344286113172e-05 2.84360692935594058e-05 2.10844187772047981e-05 1.36811225294877479e-05 6.23391372171825159e-06 -1.24938967472985343e-06 -8.76089375116392728e-06 -1.62926376559253517e-05 -2.38366027102835812e-05 -3.13847216356305137e-05 -3.8928887881536811e-05 -4.64609650441000915e-05 -5.39727963638087299e-05 -6.14562142920418368e-05 -6.89030501151760073e-05 -7.63051436251607236e-05 -8.36543528252940011e-05 -9.09425636598616759e-05 -9.81616997562283011e-05 -0.000105303732167857123 -0.000112360689106729065 -0.00011932466565357642 -0.000126187833434300594 -0.000132942450250953887 -0.000139580869655650134 -0.000146095550455803907 -0.000152479066139087278 -0.000158724114206580967 -0.000164823525402617738 -0.000170770272829906311 -0.000176557480938584324 -0.00018217843437798748 -0.000187626586699978024 -0.000192895568902847549 -0.000197979197804925905 -0.00020287148423717819 -0.000207566641044250192 -0.000212059090883582951 -0.000216343473812432891 -0.00022041465465281226 -0.000224267730124599939 -0.000227898035737302609 -0.000231301152431175375 -0.000234472912958676296 -0.000237409407997495384 -0.000240106991986672812 -0.00024256228867760958 -0.000244772196392078903 -0.000246733892979651823 -0.000248444840467280416 -0.000249902789394099818 -0.000251105782824867919 -0.000252052160035797824 -0.00025274055986690793 -0.000253169923735374407 -0.000253339498304756068 -0.000253248837805336309 -0.000252897806001226022 -0.000252286577800264723 -0.000251415640503165863 -0.000250285794688762217 -0.000248898154732617887 -0.000247254148956707782 -0.000245355519408277834 -0.000243204321266444855 -0.00024080292187550706 -0.000238153999404400825 -0.000235260541132161616 -0.000232125841359683791 -0.000228753498948540629 -0.000225147414488053557 -0.000221311787092238793 -0.000217251110828729695 -0.000212970170782197265 -0.000208474038755239872 -0.000203768068610160743 -0.000198857891255488882 -0.000193749409281544072 -0.000188448791249759258 -0.000182962465640938379 -0.000177297114468035182 -0.000171459666559443247 -0.000165457290519257914 -0.000159297387371316234 -0.000152987582894289115 -0.000146535719655437177 -0.000139949848751093385 -0.000133238221262278126 -0.000126409279434229027 -0.000119471647589021275 -0.000112434122780797602 -0.000105305665203447375 -9.80953883609679523e-05 -9.081254901102643e-05 -8.3466536892548652e-05 -7.60668642485239424e-05 -6.86231551554298012e-05 -6.11451346710372866e-05 -5.36426178125495653e-05 -4.61254983773574592e-05 -3.86037376188875695e-05 -3.10873527902413518e-05 -2.35864055685937852e-05 -1.61109903734545036e-05 -8.67122259210931456e-06 -1.27722672574838017e-06 6.06087553009890447e-06 1.33329772570221576e-05 2.05289983231994045e-05 2.76388974168423647e-05 3.46526840895120878e-05 4.15604307951506594e-05 4.83522849105519115e-05 5.50184807230059316e-05 6.15493513708201652e-05 6.79353407223644588e-05 7.41670151793647061e-05 8.02350753901241498e-05 8.6130367858461686e-05 9.18438964341481524e-05 9.73668336707416278e-05 0.00010269053203681732 0.000107806534966649651 0.0001127065877365903 0.000117382648153496256 0.000121826897041713868 0.000126031748515333537 0.00012998986002258687 0.000133694142149506614 0.000137137768170148081 0.000140314183330956209 0.000143217113857099483 0.000145840575668857337 0.000148178882796450121 0.000150226655482008239 0.00015197882795766658 0.000153430655889141257 0.000154577723474454371 0.000155415950187866731 0.000155941597159424763 0.000156151273180924459 0.000156041940329506716 0.000155610919200480931 0.000154855893741426346 0.000153774915680034179 0.000152366408538609163 0.000150629171228599303 0.000148562381218992061 0.000146165597272882459 0.000143438761747013413 0.000140382202449568325 0.00013699663405200075 0.000133283159051196521 0.000129243268278770614 0.000124878840954817372 0.000120192144283974407 0.000115185832592163984 0.000109862946002941604 0.000104226908652880085 9.82815264459989933e-05 9.20309843477686446e-05 8.54798432197512111e-05 7.86330361965313857e-05 7.14958646070846095e-05 6.40739934433110484e-05 5.6373446378996785e-05 4.8400600343011222e-05 4.01621796510955129e-05 3.16652497011125455e-05 2.29172102372145301e-05 1.3925788188864844e-05 4.69903009119984919e-06 -4.75470590624571114e-06 -1.44267584349294114e-05 -2.43081716987960721e-05 -3.43897046532969404e-05 -4.46618405629437034e-05 -5.5114796927838859e-05 -6.5738535769227472e-05 -7.65227742635674551e-05 -8.74569957142105707e-05 -9.85304608493467687e-05 -0.000109732219434362851 -0.000121051122186429205 -0.000132475832978649335 -0.000143994841320751202 -0.000155596475102885994 -0.000167268913588740939 -0.000179000200643847661 -0.000190778258184546342 -0.000202590899832839937 -0.00021442584476198532 -0.000226270731717417438 -0.000238113133197312475 -0.000249940569776828294 -0.000261740524559854698 -0.000273500457741816274 -0.000285207821266955533 -0.000296850073563251118 -0.000308414694338002586 -0.000319889199416980121 -0.000331261155609851947 -0.000342518195584558304 -0.000353648032733164296 -0.000364638476011667936 -0.00037547744473621637 -0.000386152983318095201 -0.000396653275919924019 -0.000406966661015442069 -0.000417081645835319767 -0.000426986920681511357 -0.00043667137309269825 -0.000446124101843497177 -0.000455334430760212115 -0.0004642919223360421 -0.000472986391128838249 -0.00048140791692464043 -0.000489546857650469298 -0.000497393862020034942 -0.000504939881896269375 -0.000512176184354873202 -0.000519094363433298756 -0.000525686351549948909 -0.000531944430578634936 -0.000537861242563703545 -0.000543429800061600524 -0.000548643496094984671 -0.000553496113705934968 -0.000557981835095168292 -0.000562095250334637003 -0.000565831365641299177 -0.000569185611200331604 -0.000572153848526514293 -0.000574732377353013636 -0.000576917942037302473 -0.00057870773747445859 -0.000580099414508633191 -0.00058109108483401649 -0.000581681325377188859 -0.00058186918215332882 -0.000581654173589299644 -0.000581036293307278908 -0.000580016012363147437 -0.000578594280934498955 -0.000576772529453752894 -0.000574552669182454333 -0.000571937092223526134 -0.0005689286709688353 -0.000565530756980124269 -0.000561747179301985613 -0.000557582242206238724 -0.000553040722367703608 -0.000548127865472073273 -0.000542849382257202975 -0.000537211443989857253 -0.00053122067738058294 -0.000524884158940068448 -0.000518209408781024707 -0.000511204383870260035 -0.000503877470736328946 -0.00049623747763875663 -0.00048829362620553241 -0.000480055542546184368 -0.000471533247848432045 -0.000462737148467020265 -0.000453678025513989849 -0.000444367023960275912 -0.000434815641259107735 -0.000425035715502321602 -0.000415039413121295984 -0.00040483921614478083 -0.000394447909026481936 -0.000383878565055834032 -0.00037314453236591996 -0.000362259419553060454 -0.000351237080923074297 -0.000340091601379774965 -0.000328837280971694542 -0.000317488619113553007 -0.000306060298499409415 -0.000294567168724887605 -0.000283024229636299497 -0.00027144661442484911 -0.000259849572484526024 -0.000248248452052655846 -0.000236658682652358628 -0.000225095757356570875 -0.000213575214893534988 -0.000202112621613921665 -0.000190723553340067759 -0.000179423577117971095 -0.000168228232892949394 -0.000157153015130025208 -0.000146213354400262464 -0.000135424598954446895 -0.000124801996305561855 -0.000114360674841649707 -0.000104115625490700252 -9.4081683459222088e-05 -8.42735100661988023e-05 -7.47055746941060621e-05 -6.53921368786232634e-05 -5.63472285586359264e-05 -4.75846365079944612e-05 -3.91178849704441466e-05 -3.09602185189271437e-05 -2.31245851603663468e-05 -1.56236197068139401e-05 -8.46962743362079221e-06 -1.67456804509481925e-06 4.74996003220906733e-06 1.07927350086630955e-05 1.64429267236406392e-05 2.16901112512596634e-05 2.65242851009097778e-05 3.093587899408798e-05 3.49157711994565158e-05 3.84553004084665592e-05 4.15462781343622331e-05 4.41810006178330241e-05 4.63522602230950585e-05 4.80533563086936862e-05 4.92781055578531737e-05 5.002085175377504e-05 5.02764749858400253e-05 5.0040400273288319e-05 4.93086055935576105e-05 4.80776293030871126e-05 4.63445769390595714e-05 4.41071273912065954e-05 4.13635384334903631e-05 3.81126516061749794e-05 3.43538964395051342e-05 3.00872940109393417e-05 2.53134598286213126e-05 2.00336060345238403e-05 1.42495429214499006e-05 7.96367975886933377e-06 1.17902492331830349e-06 -6.10081467009474758e-06 -1.38716348377570699e-05 -2.2128636101059503e-05 -3.08664263644011676e-05 -4.00790242979514482e-05 -4.97598634245809127e-05 -5.99017969095894462e-05 -7.0497103051004063e-05 -8.15374914674168007e-05 -9.30141099795020145e-05 -0.000104917552180517007 -0.000117237865690296509 -0.000129964561086402374 -0.000143086621505290136 -0.000156592512905545558 -0.000170470194984418706 -0.000184707132738113732 -0.000199290308655482762 -0.000214206235533971465 -0.000229440969905942154 -0.000244980126062674353 -0.000260808890662635943 -0.000276912037909858881 -0.000293273945287510142 -0.000309878609831088598 -0.000326709664924893037 -0.000343750397604823232 -0.000360983766349821922 -0.000378392419343665659 -0.000395958713188179865 -0.000413664732048296007 -0.00043149230720884561 -0.000449423037022366031 -0.000467438307226616359 -0.00048551931161009039 -0.000503647073003127927 -0.000521802464571924363 -0.000539966231392152848 -0.000558119012278527737 -0.000576241361846240811 -0.000594313772779791181 -0.000612316698284386812 -0.000630230574694774478 -0.000648035844216019938 -0.000665712977770550884 -0.000683242497925437456 -0.000700605001873770756 -0.000717781184443726152 -0.000734751861108790352 -0.000751497990972494335 -0.000768000699700865084 -0.000784241302375801022 -0.000800201326242491631 -0.000815862533323978719 -0.000831206942876083765 -0.000846216853655823225 -0.000860874865976677165 -0.000875163903524087128 -0.000889067234904754289 -0.000902568494903484373 -0.000915651705421536037 -0.00092830129607065397 -0.000940502124397278572 -0.000952239495711686016 -0.000963499182497179517 -0.00097426744337479154 -0.000984531041599378534 -0.000994277263063387271 -0.00100349393378503849 -0.00101216943685814974 -0.00102029272884134286 -0.00102785335556489698 -0.00103484146733410164 -0.00104124783350852297 -0.00104706385643724858 -0.00105228158473081061 -0.00105689372585113586 -0.00106089365800160029 -0.00106427544129995702 -0.00106703382821766871 -0.00106916427326991586 -0.00107066294194136671 -0.00107152671883356922 -0.00107175321502068458 -0.00107134077460109838 -0.00107028848043332005 -0.0010685961590454927 -0.00106626438470864855 -0.00106329448266487205 -0.00105968853150237036 -0.001055449364670421 -0.0010505805711281404 -0.00104508649512194862 -0.00103897223508759976 -0.00103224364167363671 -0.00102490731488409192 -0.0010169706003393085 -0.00100844158465469304 -0.000999329089938299619 -0.000989642667409085458 -0.000979392590138753339 -0.000968589844921078258 -0.000957246123273652817 -0.000945373811578012913 -0.000932985980365082842 -0.000920096372753936571 -0.000906719392052867984 -0.000892870088532749851 -0.000878564145383660703 -0.000863817863866793434 -0.000848648147674557827 -0.000833072486512849344 -0.000817108938920322334 -0.000800776114340560029 -0.000784093154463854172 -0.00076707971385630376 -0.000749755939894827393 -0.00073214245202753278 -0.000714260320379827142 -0.000696131043727415467 -0.000677776526858223983 -0.000659219057346078141 -0.000640481281759736564 -0.000621586181331656106 -0.000602557047111601171 -0.000583417454630912372 -0.000564191238103978719 -0.000544902464194018722 -0.000525575405371060201 -0.000506234512890455955 -0.000486904389420950753 -0.000467609761351839065 -0.000448375450809217473 -0.000429226347411899704 -0.000410187379797933671 -0.000391283486953119023 -0.000372539589373331733 -0.000353980560092707452 -0.000335631195610205577 -0.000317516186747200874 -0.000299660089469096127 -0.000282087295704122089 -0.000264822004192642334 -0.000247888191400457098 -0.00023130958252965558 -0.000215109622660640337 -0.000199311448059005916 -0.00018393785768083324 -0.000169011284910057676 -0.00015455376956132128 -0.000140586930181699324 -0.000127131936684475886 -0.000114209483347923945 -0.000101839762211840165 -9.00424369042559272e-05 -7.88366169304476072e-05 -6.82408324560204819e-05 -5.82730096153977954e-05 -4.89504463766695316e-05 -4.0289788993231236e-05 -3.23070090721696453e-05 -2.50173812887931255e-05 -1.8435461776115649e-05 -1.25750672175114022e-05 -7.44925467007586967e-06 -3.07030214556777943e-06 5.50310024919176004e-07 3.4019170171681481e-06 5.47468650631274853e-06 6.75963480178293031e-06 7.24864210177171868e-06 6.93446684514299373e-06 5.81075913962080191e-06 3.87207324601460485e-06 1.11387909921152798e-06 -2.46742715235547146e-06 -6.87451360603916046e-06 -1.21091040793498686e-05 -1.81719706145443069e-05 -2.50629270275344737e-05 -3.27808235141059011e-05 -4.13235423253169624e-05 -5.06879945228170633e-05 -6.0870117823635429e-05 -7.18648755428552457e-05 -8.36662566413671018e-05 -9.62672768846860555e-05 -0.000109659981117642019 -0.000123835446658463372 -0.000138783787814587074 -0.000154494161521254273 -0.000170954774102690982 -0.000188152889154445733 -0.000206074836544130455 -0.000224706022526621844 -0.000244030940968442087 -0.000264033185674781754 -0.000284695463811403683 -0.000305999610412326204 -0.000327926603962984528 -0.000350456583047274381 -0.000373568864045633719 -0.000397241959870092644 -0.000421453599720986378 -0.000446180749848744092 -0.00047139963530309334 -0.000497085762650633918 -0.000523213943640735233 -0.000549758319798429726 -0.000576692387921854104 -0.000603989026460703508 -0.000631620522750994781 -0.0006595586010803929 -0.000687774451557292797 -0.000716238759755738041 -0.000744921737107409783 -0.000773793152010704747 -0.000802822361626190817 -0.000831978344326646333 -0.000861229732769054125 -0.000890544847555052783 -0.000919891731445504905 -0.000949238184094060235 -0.000978551797263789089 -0.00100779999049028309 -0.00103695004715390017 -0.00106596915092318622 -0.00109482442253086283 -0.0011234829568432705 -0.0011519118601835221 -0.001180078287868203 -0.00120794948191697621 -0.00123549280889404369 -0.0012626757978400308 -0.00128946617825256718 -0.00131583191807356178 -0.00134174126164089474 -0.00136716276756209234 -0.00139206534646742707 -0.00141641829859974 -0.00144019135119826747 -0.00146335469563374488 -0.00148587902425209389 -0.00150773556688410353 -0.00152889612697863731 -0.00154933311731709589 -0.00156901959526710715 -0.00158792929753364428 -0.00160603667436617936 -0.00162331692318077171 -0.00163974602155647089 -0.00165530075956584226 -0.00166995877139996108 -0.00168369856624875445 -0.00169649955839819614 -0.00170834209650651075 -0.00171920749202219528 -0.00172907804670746081 -0.00173793707923145511 -0.00174576895079839745 -0.00175255908977673932 -0.00175829401529624158 -0.00176296135978090099 -0.00176654989038657877 -0.00176904952931327504 -0.00177045137296298724 -0.00177074770991523427 -0.00176993203769344439 -0.00176799907829659915 -0.00176494479247166799 -0.00176076639270370179 -0.00175546235490160827 -0.00174903242875902067 -0.00174147764677093884 -0.00173280033188821098 -0.00172300410379327257 -0.00171209388378197104 -0.00170007589823776574 -0.00168695768068597438 -0.00167274807241727047 -0.00165745722167106647 -0.00164109658137099744 -0.00162367890540613389 -0.00160521824345319277 -0.00158572993433650999 -0.00156523059792407779 -0.0015437381255595736 -0.00152127166903183041 -0.00149785162808482018 -0.00147349963647277625 -0.00144823854656666944 -0.00142209241251989435 -0.00139508647200253235 -0.00136724712651519397 -0.00133860192029503725 -0.00130917951782806422 -0.00127900967998347275 -0.00124812323878729968 -0.00121655207085420757 -0.0011843290694977626 -0.00115148811554110012 -0.00111806404685136978 -0.00108409262662284155 -0.00104961051043500641 -0.00101465521211348102 -0.000979265068422949811 -0.000943479202622720466 -0.000907337486916952101 -0.000870880503832845328 -0.000834149506561488461 -0.00079718637829728886 -0.000760033590613213303 -0.000722734160910259017 -0.000685331608980757384 -0.00064786991272628477 -0.000610393463072079687 -0.000572947018120874459 -0.000535575656590170628 -0.000498324730577919201 -0.000461239817702527657 -0.000424366672664029752 -0.00038775117827412808 -0.000351439296003600097 -0.000315477016096333727 -0.000279910307299996181 -0.000244785066264008679 -0.000210147066656061956 -0.00017604190804907028 -0.000142514964630889894 -0.000109611333789634419 -7.73757846278199209e-05 -4.58527064589375131e-05 -1.50860573403351211e-05 1.48806873034614414e-05 4.40045859126581948e-05 7.22432818248641923e-05 9.95550540539972992e-05 0.000125898867760877985 0.000151234424360954724 0.000175522211214771263 0.000198723550846873691 0.000220800649639089485 0.000241716645944378851 0.00026143565756777369 0.000279922828561300998 0.000297144375280223292 0.000313067631648420732 0.000327661093581302517 0.000340894462515217267 0.000352738687993018143 0.000363166009256146575 0.000372149995794355398 0.000379665586805054205 0.000385689129515095195 0.000390198416318791907 0.000393172720686916675 0.000394592831802468788 0.000394441087880105848 0.000392701408127233526 0.000389359323305970466 0.00038440200485640114 0.000377818292542834229 0.000369598720586088419 0.000359735542246202987 0.00034822275282137276 0.000335056111030365429 0.000320233158747157843 0.0003037532390580716 0.000285617512613230997 0.000265828972245796041 0.000244392455834036167 0.000221314657382981481 0.000196604136304110431 0.000170271324873208626 0.000142328533848359423 0.000112789956231744673 8.16716691607731634e-05 4.89916339158914783e-05 1.47696940342215004e-05 -2.09724284798627105e-05 -5.8211138854329885e-05 -9.69209771644069805e-05 -0.000137074627866035905 -0.000178642931249266599 -0.000221594896810904516 -0.000265897718543925876 -0.000311516792139153226 -0.000358415734092729804 -0.000406556402711071658 -0.00045589892100287915 -0.000506401701445994461 -0.000558021472614860024 -0.000610713307652391985 -0.000664430654568261931 -0.000719125368343501354 -0.000774747744819593047 -0.00083124655634824417 -0.000888569089176165661 -0.000946661182537393629 -0.00100546726942376055 -0.00106493041900240911 -0.00112499238064739013 -0.00118559362955067502 -0.0012466734138761378 -0.00130816980341841999 -0.00137001973972686731 -0.00143215908765311926 -0.00149452268827935915 -0.0015570444131826238 -0.00161965721998908341 -0.00168229320917071858 -0.00174488368203535964 -0.00180735919985970271 -0.00186964964411353023 -0.00193168427772206813 -0.00199339180731217648 -0.00205470044638686672 -0.00211553797937144399 -0.00217583182647354458 -0.00223550910929822943 -0.00229449671715835184 -0.00235272137401944118 -0.00241010970601751758 -0.00246658830948737369 -0.00252208381943817318 -0.00257652297841245211 -0.00262983270566401845 -0.00268194016658964036 -0.00273277284234894067 -0.00278225859960639591 -0.00283032576032906736 -0.002876903171573257 -0.00292192027519310848 -0.0029653071774039105 -0.00300699471813289151 -0.00304691454008998051 -0.00308499915749134088 -0.00312118202436824626 -0.00315539760239428495 -0.00318758142816389419 -0.00321767017985562492 -0.00324560174321383019 -0.00327131527678290205 -0.00329475127632865555 -0.00331585163838200902 -0.00333455972284073775 -0.00335082041456570556 -0.00336458018390878646 -0.00337578714611047647 -0.00338439111950598979 -0.00339034368247975336 -0.00339359822910894303 -0.00339411002343802332 -0.00339183625232723166 -0.00338673607681910056 -0.00337877068196846056 -0.00336790332508255571 -0.00335409938231933085 -0.00333732639359325721 -0.00331755410573964047 -0.00329475451388980224 -0.00326890190101103298 -0.00323997287556695383 -0.00320794640725547775 -0.0031728038607833106 -0.00313452902763768993 -0.00309310815581780117 -0.00304852997749022929 -0.00300078573453460909 -0.00294986920194758575 -0.00289577670907513289 -0.00283850715864526109 -0.00277806204357518467 -0.00271444546152904264 -0.00264766412720431922 -0.00257772738232731058 -0.00250464720333995298 -0.00242843820676267317 -0.00234911765221987008 -0.00226670544311705557 -0.00218122412496067966 -0.00209269888131401053 -0.00200115752738467927 -0.00190663050124159194 -0.00180915085266137774 -0.00170875422960657577 -0.00160547886234019017 -0.00149936554518340526 -0.00139045761592549865 -0.00127880093289734517 -0.00116444384972199202 -0.00104743718775817383 -0.000927834206254760227 -0.000805690570236362218 -0.000681064316142589643 -0.000554015815245517077 -0.000424607734872174149 -0.00029290499746098108 -0.000158974737483142547 -2.28862562621517346e-05 0.000115289025273400425 0.000255477615866514789 0.000397604005198715289 0.000541590717106057908 0.000687358364701076197 0.000834825707355636498 0.000983909709497879544 0.00113452560117451918 0.00128658694032806882 0.00144000567673686821 0.00159469221756398222 0.00175055549445958742 0.00190750303215976558 0.00206544101852313517 0.00222427437594530965 0.00238390683408972468 0.00254424100387203207 0.00270517845263395975 0.00286661978044131698 0.00302846469743960501 0.00319061210219963873 0.00335296016098446783 0.00351540638786793438 0.00367784772563431667 0.00384018062738755933 0.00400230113879791825 0.00416410498091302188 0.00432548763345978575 0.00448634441856298957 0.00464657058480585049 0.00480606139155742053 0.00496471219349135795 0.00512241852522030919 0.00527907618596980613 0.00543458132421563694 0.00558883052220836545 0.00574172088030880205 0.00589315010105827177 0.00604301657290762413 0.00619121945352920592 0.0063376587526362731 0.00648223541423467806 0.00662485139823209591 0.00676540976133065478 0.00690381473712920173 0.00703997181536235132 0.00717378782020393867 0.00730517098756350985 0.00743403104130511104 0.00756027926831877046 0.00768382859237598873 0.00780459364670149994 0.00792249084519491831 0.0080374384522368756 0.00814935665101562678 0.00825816761031135382 0.0083637955496768529 0.00846616680295459757 0.00856520988007185465 0.00866085552705686025 0.00875303678422089358 0.00884168904245259506 0.00892675009757260343 0.00900816020269850845 0.00908586211857163872 0.00915980116179941628 0.00922992525096857745 0.00929618495058678884 0.00935853351281203116 0.00941692691693108049 0.00947132390655079995 0.00952168602446760125 0.00956797764518308065 0.0096101660050354823 0.00964822122991931992 0.00968211636056737386 0.0097118273753717746 0.00973733321072282366 0.00975861577884700945 0.00977565998312745696 0.00978845373089273947 0.00979698794366217277 0.00980125656483812023 0.00980125656483812023 0.00979698794366217277 0.00978845373089273947 0.00977565998312745696 0.00975861577884700945 0.00973733321072282366 0.0097118273753717746 0.00968211636056737386 0.00964822122991931992 0.0096101660050354823 0.00956797764518308065 0.00952168602446760125 0.00947132390655079995 0.00941692691693108049 0.00935853351281203116 0.00929618495058678884 0.00922992525096857745 0.00915980116179941628 0.00908586211857163872 0.00900816020269850845 0.00892675009757260343 0.00884168904245259506 0.00875303678422089358 0.00866085552705686025 0.00856520988007185465 0.00846616680295459757 0.0083637955496768529 0.00825816761031135382 0.00814935665101562678 0.0080374384522368756 0.00792249084519491831 0.00780459364670149994 0.00768382859237598873 0.00756027926831877046 0.00743403104130511104 0.00730517098756350985 0.00717378782020393867 0.00703997181536235132 0.00690381473712920173 0.00676540976133065478 0.00662485139823209591 0.00648223541423467806 0.0063376587526362731 0.00619121945352920592 0.00604301657290762413 0.00589315010105827177 0.00574172088030880205 0.00558883052220836545 0.00543458132421563694 0.00527907618596980613 0.00512241852522030919 0.00496471219349135795 0.00480606139155742053 0.00464657058480585049 0.00448634441856298957 0.00432548763345978575 0.00416410498091302188 0.00400230113879791825 0.00384018062738755933 0.00367784772563431667 0.00351540638786793438 0.00335296016098446783 0.00319061210219963873 0.00302846469743960501 0.00286661978044131698 0.00270517845263395975 0.00254424100387203207 0.00238390683408972468 0.00222427437594530965 0.00206544101852313517 0.00190750303215976558 0.00175055549445958742 0.00159469221756398222 0.00144000567673686821 0.00128658694032806882 0.00113452560117451918 0.000983909709497879544 0.000834825707355636498 0.000687358364701076197 0.000541590717106057908 0.000397604005198715289 0.000255477615866514789 0.000115289025273400425 -2.28862562621517346e-05 -0.000158974737483142547 -0.00029290499746098108 -0.000424607734872174149 -0.000554015815245517077 -0.000681064316142589643 -0.000805690570236362218 -0.000927834206254760227 -0.00104743718775817383 -0.00116444384972199202 -0.00127880093289734517 -0.00139045761592549865 -0.00149936554518340526 -0.00160547886234019017 -0.00170875422960657577 -0.00180915085266137774 -0.00190663050124159194 -0.00200115752738467927 -0.00209269888131401053 -0.00218122412496067966 -0.00226670544311705557 -0.00234911765221987008 -0.00242843820676267317 -0.00250464720333995298 -0.00257772738232731058 -0.00264766412720431922 -0.00271444546152904264 -0.00277806204357518467 -0.00283850715864526109 -0.00289577670907513289 -0.00294986920194758575 -0.00300078573453460909 -0.00304852997749022929 -0.00309310815581780117 -0.00313452902763768993 -0.0031728038607833106 -0.00320794640725547775 -0.00323997287556695383 -0.00326890190101103298 -0.00329475451388980224 -0.00331755410573964047 -0.00333732639359325721 -0.00335409938231933085 -0.00336790332508255571 -0.00337877068196846056 -0.00338673607681910056 -0.00339183625232723166 -0.00339411002343802332 -0.00339359822910894303 -0.00339034368247975336 -0.00338439111950598979 -0.00337578714611047647 -0.00336458018390878646 -0.00335082041456570556 -0.00333455972284073775 -0.00331585163838200902 -0.00329475127632865555 -0.00327131527678290205 -0.00324560174321383019 -0.00321767017985562492 -0.00318758142816389419 -0.00315539760239428495 -0.00312118202436824626 -0.00308499915749134088 -0.00304691454008998051 -0.00300699471813289151 -0.0029653071774039105 -0.00292192027519310848 -0.002876903171573257 -0.00283032576032906736 -0.00278225859960639591 -0.00273277284234894067 -0.00268194016658964036 -0.00262983270566401845 -0.00257652297841245211 -0.00252208381943817318 -0.00246658830948737369 -0.00241010970601751758 -0.00235272137401944118 -0.00229449671715835184 -0.00223550910929822943 -0.00217583182647354458 -0.00211553797937144399 -0.00205470044638686672 -0.00199339180731217648 -0.00193168427772206813 -0.00186964964411353023 -0.00180735919985970271 -0.00174488368203535964 -0.00168229320917071858 -0.00161965721998908341 -0.0015570444131826238 -0.00149452268827935915 -0.00143215908765311926 -0.00137001973972686731 -0.00130816980341841999 -0.0012466734138761378 -0.00118559362955067502 -0.00112499238064739013 -0.00106493041900240911 -0.00100546726942376055 -0.000946661182537393629 -0.000888569089176165661 -0.00083124655634824417 -0.000774747744819593047 -0.000719125368343501354 -0.000664430654568261931 -0.000610713307652391985 -0.000558021472614860024 -0.000506401701445994461 -0.00045589892100287915 -0.000406556402711071658 -0.000358415734092729804 -0.000311516792139153226 -0.000265897718543925876 -0.000221594896810904516 -0.000178642931249266599 -0.000137074627866035905 -9.69209771644069805e-05 -5.8211138854329885e-05 -2.09724284798627105e-05 1.47696940342215004e-05 4.89916339158914783e-05 8.16716691607731634e-05 0.000112789956231744673 0.000142328533848359423 0.000170271324873208626 0.000196604136304110431 0.000221314657382981481 0.000244392455834036167 0.000265828972245796041 0.000285617512613230997 0.0003037532390580716 0.000320233158747157843 0.000335056111030365429 0.00034822275282137276 0.000359735542246202987 0.000369598720586088419 0.000377818292542834229 0.00038440200485640114 0.000389359323305970466 0.000392701408127233526 0.000394441087880105848 0.000394592831802468788 0.000393172720686916675 0.000390198416318791907 0.000385689129515095195 0.000379665586805054205 0.000372149995794355398 0.000363166009256146575 0.000352738687993018143 0.000340894462515217267 0.000327661093581302517 0.000313067631648420732 0.000297144375280223292 0.000279922828561300998 0.00026143565756777369 0.000241716645944378851 0.000220800649639089485 0.000198723550846873691 0.000175522211214771263 0.000151234424360954724 0.000125898867760877985 9.95550540539972992e-05 7.22432818248641923e-05 4.40045859126581948e-05 1.48806873034614414e-05 -1.50860573403351211e-05 -4.58527064589375131e-05 -7.73757846278199209e-05 -0.000109611333789634419 -0.000142514964630889894 -0.00017604190804907028 -0.000210147066656061956 -0.000244785066264008679 -0.000279910307299996181 -0.000315477016096333727 -0.000351439296003600097 -0.00038775117827412808 -0.000424366672664029752 -0.000461239817702527657 -0.000498324730577919201 -0.000535575656590170628 -0.000572947018120874459 -0.000610393463072079687 -0.00064786991272628477 -0.000685331608980757384 -0.000722734160910259017 -0.000760033590613213303 -0.00079718637829728886 -0.000834149506561488461 -0.000870880503832845328 -0.000907337486916952101 -0.000943479202622720466 -0.000979265068422949811 -0.00101465521211348102 -0.00104961051043500641 -0.00108409262662284155 -0.00111806404685136978 -0.00115148811554110012 -0.0011843290694977626 -0.00121655207085420757 -0.00124812323878729968 -0.00127900967998347275 -0.00130917951782806422 -0.00133860192029503725 -0.00136724712651519397 -0.00139508647200253235 -0.00142209241251989435 -0.00144823854656666944 -0.00147349963647277625 -0.00149785162808482018 -0.00152127166903183041 -0.0015437381255595736 -0.00156523059792407779 -0.00158572993433650999 -0.00160521824345319277 -0.00162367890540613389 -0.00164109658137099744 -0.00165745722167106647 -0.00167274807241727047 -0.00168695768068597438 -0.00170007589823776574 -0.00171209388378197104 -0.00172300410379327257 -0.00173280033188821098 -0.00174147764677093884 -0.00174903242875902067 -0.00175546235490160827 -0.00176076639270370179 -0.00176494479247166799 -0.00176799907829659915 -0.00176993203769344439 -0.00177074770991523427 -0.00177045137296298724 -0.00176904952931327504 -0.00176654989038657877 -0.00176296135978090099 -0.00175829401529624158 -0.00175255908977673932 -0.00174576895079839745 -0.00173793707923145511 -0.00172907804670746081 -0.00171920749202219528 -0.00170834209650651075 -0.00169649955839819614 -0.00168369856624875445 -0.00166995877139996108 -0.00165530075956584226 -0.00163974602155647089 -0.00162331692318077171 -0.00160603667436617936 -0.00158792929753364428 -0.00156901959526710715 -0.00154933311731709589 -0.00152889612697863731 -0.00150773556688410353 -0.00148587902425209389 -0.00146335469563374488 -0.00144019135119826747 -0.00141641829859974 -0.00139206534646742707 -0.00136716276756209234 -0.00134174126164089474 -0.00131583191807356178 -0.00128946617825256718 -0.0012626757978400308 -0.00123549280889404369 -0.00120794948191697621 -0.001180078287868203 -0.0011519118601835221 -0.0011234829568432705 -0.00109482442253086283 -0.00106596915092318622 -0.00103695004715390017 -0.00100779999049028309 -0.000978551797263789089 -0.000949238184094060235 -0.000919891731445504905 -0.000890544847555052783 -0.000861229732769054125 -0.000831978344326646333 -0.000802822361626190817 -0.000773793152010704747 -0.000744921737107409783 -0.000716238759755738041 -0.000687774451557292797 -0.0006595586010803929 -0.000631620522750994781 -0.000603989026460703508 -0.000576692387921854104 -0.000549758319798429726 -0.000523213943640735233 -0.000497085762650633918 -0.00047139963530309334 -0.000446180749848744092 -0.000421453599720986378 -0.000397241959870092644 -0.000373568864045633719 -0.000350456583047274381 -0.000327926603962984528 -0.000305999610412326204 -0.000284695463811403683 -0.000264033185674781754 -0.000244030940968442087 -0.000224706022526621844 -0.000206074836544130455 -0.000188152889154445733 -0.000170954774102690982 -0.000154494161521254273 -0.000138783787814587074 -0.000123835446658463372 -0.000109659981117642019 -9.62672768846860555e-05 -8.36662566413671018e-05 -7.18648755428552457e-05 -6.0870117823635429e-05 -5.06879945228170633e-05 -4.13235423253169624e-05 -3.27808235141059011e-05 -2.50629270275344737e-05 -1.81719706145443069e-05 -1.21091040793498686e-05 -6.87451360603916046e-06 -2.46742715235547146e-06 1.11387909921152798e-06 3.87207324601460485e-06 5.81075913962080191e-06 6.93446684514299373e-06 7.24864210177171868e-06 6.75963480178293031e-06 5.47468650631274853e-06 3.4019170171681481e-06 5.50310024919176004e-07 -3.07030214556777943e-06 -7.44925467007586967e-06 -1.25750672175114022e-05 -1.8435461776115649e-05 -2.50173812887931255e-05 -3.23070090721696453e-05 -4.0289788993231236e-05 -4.89504463766695316e-05 -5.82730096153977954e-05 -6.82408324560204819e-05 -7.88366169304476072e-05 -9.00424369042559272e-05 -0.000101839762211840165 -0.000114209483347923945 -0.000127131936684475886 -0.000140586930181699324 -0.00015455376956132128 -0.000169011284910057676 -0.00018393785768083324 -0.000199311448059005916 -0.000215109622660640337 -0.00023130958252965558 -0.000247888191400457098 -0.000264822004192642334 -0.000282087295704122089 -0.000299660089469096127 -0.000317516186747200874 -0.000335631195610205577 -0.000353980560092707452 -0.000372539589373331733 -0.000391283486953119023 -0.000410187379797933671 -0.000429226347411899704 -0.000448375450809217473 -0.000467609761351839065 -0.000486904389420950753 -0.000506234512890455955 -0.000525575405371060201 -0.000544902464194018722 -0.000564191238103978719 -0.000583417454630912372 -0.000602557047111601171 -0.000621586181331656106 -0.000640481281759736564 -0.000659219057346078141 -0.000677776526858223983 -0.000696131043727415467 -0.000714260320379827142 -0.00073214245202753278 -0.000749755939894827393 -0.00076707971385630376 -0.000784093154463854172 -0.000800776114340560029 -0.000817108938920322334 -0.000833072486512849344 -0.000848648147674557827 -0.000863817863866793434 -0.000878564145383660703 -0.000892870088532749851 -0.000906719392052867984 -0.000920096372753936571 -0.000932985980365082842 -0.000945373811578012913 -0.000957246123273652817 -0.000968589844921078258 -0.000979392590138753339 -0.000989642667409085458 -0.000999329089938299619 -0.00100844158465469304 -0.0010169706003393085 -0.00102490731488409192 -0.00103224364167363671 -0.00103897223508759976 -0.00104508649512194862 -0.0010505805711281404 -0.001055449364670421 -0.00105968853150237036 -0.00106329448266487205 -0.00106626438470864855 -0.0010685961590454927 -0.00107028848043332005 -0.00107134077460109838 -0.00107175321502068458 -0.00107152671883356922 -0.00107066294194136671 -0.00106916427326991586 -0.00106703382821766871 -0.00106427544129995702 -0.00106089365800160029 -0.00105689372585113586 -0.00105228158473081061 -0.00104706385643724858 -0.00104124783350852297 -0.00103484146733410164 -0.00102785335556489698 -0.00102029272884134286 -0.00101216943685814974 -0.00100349393378503849 -0.000994277263063387271 -0.000984531041599378534 -0.00097426744337479154 -0.000963499182497179517 -0.000952239495711686016 -0.000940502124397278572 -0.00092830129607065397 -0.000915651705421536037 -0.000902568494903484373 -0.000889067234904754289 -0.000875163903524087128 -0.000860874865976677165 -0.000846216853655823225 -0.000831206942876083765 -0.000815862533323978719 -0.000800201326242491631 -0.000784241302375801022 -0.000768000699700865084 -0.000751497990972494335 -0.000734751861108790352 -0.000717781184443726152 -0.000700605001873770756 -0.000683242497925437456 -0.000665712977770550884 -0.000648035844216019938 -0.000630230574694774478 -0.000612316698284386812 -0.000594313772779791181 -0.000576241361846240811 -0.000558119012278527737 -0.000539966231392152848 -0.000521802464571924363 -0.000503647073003127927 -0.00048551931161009039 -0.000467438307226616359 -0.000449423037022366031 -0.00043149230720884561 -0.000413664732048296007 -0.000395958713188179865 -0.000378392419343665659 -0.000360983766349821922 -0.000343750397604823232 -0.000326709664924893037 -0.000309878609831088598 -0.000293273945287510142 -0.000276912037909858881 -0.000260808890662635943 -0.000244980126062674353 -0.000229440969905942154 -0.000214206235533971465 -0.000199290308655482762 -0.000184707132738113732 -0.000170470194984418706 -0.000156592512905545558 -0.000143086621505290136 -0.000129964561086402374 -0.000117237865690296509 -0.000104917552180517007 -9.30141099795020145e-05 -8.15374914674168007e-05 -7.0497103051004063e-05 -5.99017969095894462e-05 -4.97598634245809127e-05 -4.00790242979514482e-05 -3.08664263644011676e-05 -2.2128636101059503e-05 -1.38716348377570699e-05 -6.10081467009474758e-06 1.17902492331830349e-06 7.96367975886933377e-06 1.42495429214499006e-05 2.00336060345238403e-05 2.53134598286213126e-05 3.00872940109393417e-05 3.43538964395051342e-05 3.81126516061749794e-05 4.13635384334903631e-05 4.41071273912065954e-05 4.63445769390595714e-05 4.80776293030871126e-05 4.93086055935576105e-05 5.0040400273288319e-05 5.02764749858400253e-05 5.002085175377504e-05 4.92781055578531737e-05 4.80533563086936862e-05 4.63522602230950585e-05 4.41810006178330241e-05 4.15462781343622331e-05 3.84553004084665592e-05 3.49157711994565158e-05 3.093587899408798e-05 2.65242851009097778e-05 2.16901112512596634e-05 1.64429267236406392e-05 1.07927350086630955e-05 4.74996003220906733e-06 -1.67456804509481925e-06 -8.46962743362079221e-06 -1.56236197068139401e-05 -2.31245851603663468e-05 -3.09602185189271437e-05 -3.91178849704441466e-05 -4.75846365079944612e-05 -5.63472285586359264e-05 -6.53921368786232634e-05 -7.47055746941060621e-05 -8.42735100661988023e-05 -9.4081683459222088e-05 -0.000104115625490700252 -0.000114360674841649707 -0.000124801996305561855 -0.000135424598954446895 -0.000146213354400262464 -0.000157153015130025208 -0.000168228232892949394 -0.000179423577117971095 -0.000190723553340067759 -0.000202112621613921665 -0.000213575214893534988 -0.000225095757356570875 -0.000236658682652358628 -0.000248248452052655846 -0.000259849572484526024 -0.00027144661442484911 -0.000283024229636299497 -0.000294567168724887605 -0.000306060298499409415 -0.000317488619113553007 -0.000328837280971694542 -0.000340091601379774965 -0.000351237080923074297 -0.000362259419553060454 -0.00037314453236591996 -0.000383878565055834032 -0.000394447909026481936 -0.00040483921614478083 -0.000415039413121295984 -0.000425035715502321602 -0.000434815641259107735 -0.000444367023960275912 -0.000453678025513989849 -0.000462737148467020265 -0.000471533247848432045 -0.000480055542546184368 -0.00048829362620553241 -0.00049623747763875663 -0.000503877470736328946 -0.000511204383870260035 -0.000518209408781024707 -0.000524884158940068448 -0.00053122067738058294 -0.000537211443989857253 -0.000542849382257202975 -0.000548127865472073273 -0.000553040722367703608 -0.000557582242206238724 -0.000561747179301985613 -0.000565530756980124269 -0.0005689286709688353 -0.000571937092223526134 -0.000574552669182454333 -0.000576772529453752894 -0.000578594280934498955 -0.000580016012363147437 -0.000581036293307278908 -0.000581654173589299644 -0.00058186918215332882 -0.000581681325377188859 -0.00058109108483401649 -0.000580099414508633191 -0.00057870773747445859 -0.000576917942037302473 -0.000574732377353013636 -0.000572153848526514293 -0.000569185611200331604 -0.000565831365641299177 -0.000562095250334637003 -0.000557981835095168292 -0.000553496113705934968 -0.000548643496094984671 -0.000543429800061600524 -0.000537861242563703545 -0.000531944430578634936 -0.000525686351549948909 -0.000519094363433298756 -0.000512176184354873202 -0.000504939881896269375 -0.000497393862020034942 -0.000489546857650469298 -0.00048140791692464043 -0.000472986391128838249 -0.0004642919223360421 -0.000455334430760212115 -0.000446124101843497177 -0.00043667137309269825 -0.000426986920681511357 -0.000417081645835319767 -0.000406966661015442069 -0.000396653275919924019 -0.000386152983318095201 -0.00037547744473621637 -0.000364638476011667936 -0.000353648032733164296 -0.000342518195584558304 -0.000331261155609851947 -0.000319889199416980121 -0.000308414694338002586 -0.000296850073563251118 -0.000285207821266955533 -0.000273500457741816274 -0.000261740524559854698 -0.000249940569776828294 -0.000238113133197312475 -0.000226270731717417438 -0.00021442584476198532 -0.000202590899832839937 -0.000190778258184546342 -0.000179000200643847661 -0.000167268913588740939 -0.000155596475102885994 -0.000143994841320751202 -0.000132475832978649335 -0.000121051122186429205 -0.000109732219434362851 -9.85304608493467687e-05 -8.74569957142105707e-05 -7.65227742635674551e-05 -6.5738535769227472e-05 -5.5114796927838859e-05 -4.46618405629437034e-05 -3.43897046532969404e-05 -2.43081716987960721e-05 -1.44267584349294114e-05 -4.75470590624571114e-06 4.69903009119984919e-06 1.3925788188864844e-05 2.29172102372145301e-05 3.16652497011125455e-05 4.01621796510955129e-05 4.8400600343011222e-05 5.6373446378996785e-05 6.40739934433110484e-05 7.14958646070846095e-05 7.86330361965313857e-05 8.54798432197512111e-05 9.20309843477686446e-05 9.82815264459989933e-05 0.000104226908652880085 0.000109862946002941604 0.000115185832592163984 0.000120192144283974407 0.000124878840954817372 0.000129243268278770614 0.000133283159051196521 0.00013699663405200075 0.000140382202449568325 0.000143438761747013413 0.000146165597272882459 0.000148562381218992061 0.000150629171228599303 0.000152366408538609163 0.000153774915680034179 0.000154855893741426346 0.000155610919200480931 0.000156041940329506716 0.000156151273180924459 0.000155941597159424763 0.000155415950187866731 0.000154577723474454371 0.000153430655889141257 0.00015197882795766658 0.000150226655482008239 0.000148178882796450121 0.000145840575668857337 0.000143217113857099483 0.000140314183330956209 0.000137137768170148081 0.000133694142149506614 0.00012998986002258687 0.000126031748515333537 0.000121826897041713868 0.000117382648153496256 0.0001127065877365903 0.000107806534966649651 0.00010269053203681732 9.73668336707416278e-05 9.18438964341481524e-05 8.6130367858461686e-05 8.02350753901241498e-05 7.41670151793647061e-05 6.79353407223644588e-05 6.15493513708201652e-05 5.50184807230059316e-05 4.83522849105519115e-05 4.15604307951506594e-05 3.46526840895120878e-05 2.76388974168423647e-05 2.05289983231994045e-05 1.33329772570221576e-05 6.06087553009890447e-06 -1.27722672574838017e-06 -8.67122259210931456e-06 -1.61109903734545036e-05 -2.35864055685937852e-05 -3.10873527902413518e-05 -3.86037376188875695e-05 -4.61254983773574592e-05 -5.36426178125495653e-05 -6.11451346710372866e-05 -6.86231551554298012e-05 -7.60668642485239424e-05 -8.3466536892548652e-05 -9.081254901102643e-05 -9.80953883609679523e-05 -0.000105305665203447375 -0.000112434122780797602 -0.000119471647589021275 -0.000126409279434229027 -0.000133238221262278126 -0.000139949848751093385 -0.000146535719655437177 -0.000152987582894289115 -0.000159297387371316234 -0.000165457290519257914 -0.000171459666559443247 -0.000177297114468035182 -0.000182962465640938379 -0.000188448791249759258 -0.000193749409281544072 -0.000198857891255488882 -0.000203768068610160743 -0.000208474038755239872 -0.000212970170782197265 -0.000217251110828729695 -0.000221311787092238793 -0.000225147414488053557 -0.000228753498948540629 -0.000232125841359683791 -0.000235260541132161616 -0.000238153999404400825 -0.00024080292187550706 -0.000243204321266444855 -0.000245355519408277834 -0.000247254148956707782 -0.000248898154732617887 -0.000250285794688762217 -0.000251415640503165863 -0.000252286577800264723 -0.000252897806001226022 -0.000253248837805336309 -0.000253339498304756068 -0.000253169923735374407 -0.00025274055986690793 -0.000252052160035797824 -0.000251105782824867919 -0.000249902789394099818 -0.000248444840467280416 -0.000246733892979651823 -0.000244772196392078903 -0.00024256228867760958 -0.000240106991986672812 -0.000237409407997495384 -0.000234472912958676296 -0.000231301152431175375 -0.000227898035737302609 -0.000224267730124599939 -0.00022041465465281226 -0.000216343473812432891 -0.000212059090883582951 -0.000207566641044250192 -0.00020287148423717819 -0.000197979197804925905 -0.000192895568902847549 -0.000187626586699978024 -0.00018217843437798748 -0.000176557480938584324 -0.000170770272829906311 -0.000164823525402617738 -0.000158724114206580967 -0.000152479066139087278 -0.000146095550455803907 -0.000139580869655650134 -0.000132942450250953887 -0.000126187833434300594 -0.00011932466565357642 -0.000112360689106729065 -0.000105303732167857123 -9.81616997562283011e-05 -9.09425636598616759e-05 -8.36543528252940011e-05 -7.63051436251607236e-05 -6.89030501151760073e-05 -6.14562142920418368e-05 -5.39727963638087299e-05 -4.64609650441000915e-05 -3.8928887881536811e-05 -3.13847216356305137e-05 -2.38366027102835812e-05 -1.62926376559253517e-05 -8.76089375116392728e-06 -1.24938967472985343e-06 6.23391372171825159e-06 1.36811225294877479e-05 2.10844187772047981e-05 2.84360692935594058e-05 3.57284344286113172e-05 4.29539766239894229e-05 5.01052688225822184e-05 5.71750027085322178e-05 6.41559967685893237e-05 7.10412041661362674e-05 7.78237204194477878e-05 8.44967908760483791e-05 9.1053817975263502e-05 9.74883682913819688e-05 0.000103794179350143558 0.000109965166211535388 0.000115995427812221375 0.000121879253061225935 0.000127611126682830372 0.000133185734800948515 0.000138597970259584199 0.000143842937674336217 0.000148915958210213493 0.000153812574081402666 0.000158528552768975894 0.000163059890952856642 0.000167402818154742936 0.00017155380008902581 0.000175509541719119909 0.000179266990016949389 0.000182823336423741032 0.000186176019010588596 0.000189322724337662293 0.000192261389011252621 0.000194990200938245997 0.000197507600277942511 0.00019981228009152829 0.000201903186689835487 0.000203779519680404953 0.00020544073171519512 0.000206886527940643958 0.000208116865152132061 0.000209131950655226862 0.000209932240836437539 0.000210518439446527757 0.000210891495599772346 0.000211052601492850656 0.000211003189847399166 0.000210744931080539749 0.000210279730208012122 0.000209609723484832216 0.000208737274788678591 0.000207664971751501243 0.000206395621645110393 0.000204932247026770115 0.000203278081151077815 0.000201436563154664761 0.000199411333020468873 0.000197206226328597447 0.000194825268800976194 0.000192272670647228051 0.000189552820719396799 0.00018667028048334033 0.000183629777814796498 0.000180436200628275649 0.000177094590347127583 0.000173610135223249278 0.000169988163515048709 0.000166234136532416552 0.000162353641557560585 0.00015835238465067121 0.00015423618334947447 0.000150010959271818428 0.00014568273063051394 0.000141257604669692754 0.000136741770032019387 0.000132141489066122324 0.000127463090083615476 0.000122712959575142978 0.000117897534394835281 0.000113023293922595943 0.00010809675221358545 0.00010312445014427736 9.81129475643973336e-05 9.30688154639932171e-05 8.79986281648718102e-05 8.2908955545501841e-05 7.78063553084475335e-05 7.2697365299288823e-05 6.75884958858724891e-05 6.24862224066406144e-05 5.73969776966374871e-05 5.23271446996947335e-05 4.72830491751275264e-05 4.2270952507117932e-05 3.72970446248335242e-05 3.23674370411305366e-05 2.74881560175088403e-05 2.26651358628424106e-05 1.79042123731499464e-05 1.3211116419539222e-05 8.59146769117863293e-06 4.05076859999724614e-06 -4.05601646452660992e-07 -4.77239279775857503e-06 -9.04448913303779275e-06 -1.32169148472250564e-05 -1.72848392457738985e-05 -2.12435817425181303e-05 -2.50886166557271471e-05 -2.8815577797631068e-05 -3.24202628529801363e-05 -3.58986375424424101e-05 -3.92468395669574697e-05 -4.2461182329414437e-05 -4.55381584303121535e-05 -4.84744429343453672e-05 -5.12668964051568154e-05 -5.39125677057560908e-05 -5.64086965624286809e-05 -5.87527158902239959e-05 -6.09422538784258847e-05 -6.29751358346775574e-05 -6.48493857867447963e-05 -6.65632278411918153e-05 -6.81150872985199018e-05 -6.95035915246355228e-05 -7.07275705787830219e-05 -7.1786057598376989e-05 -7.26782889414528336e-05 -7.34037040877385941e-05 -7.39619452996353679e-05 -7.43528570446672321e-05 -7.45764851812408312e-05 -7.46330759098324311e-05 -7.45230744919757435e-05 -7.42471237397002989e-05 -7.38060622783261774e-05 -7.32009225857723086e-05 -7.243292881179294e-05 -7.15034943807955073e-05 -7.04142193821368807e-05 -6.91668877520263856e-05 -6.77634642513943888e-05 -6.62060912443016882e-05 -6.44970852816859042e-05 -6.26389334954471531e-05 -6.06342898080698177e-05 -5.84859709631872191e-05 -5.61969523826627595e-05 -5.37703638559592598e-05 -5.12094850677213858e-05 -4.85177409696808726e-05 -4.56986970031257229e-05 -4.27560541783426207e-05 -3.96936440175692549e-05 -3.65154233681300216e-05 -3.32254690925390313e-05 -2.98279726424872906e-05 -2.63272345237168974e-05 -2.27276586588921652e-05 -1.9033746655653679e-05 -1.52500919871350752e-05 -1.13813740922782728e-05 -7.4323524033368756e-06 -3.40786030803718986e-06 6.87200946137479062e-07 4.84786839798954901e-06 9.06912356145610812e-06 1.33458986496838148e-05 1.76730828267706107e-05 2.20455284796226731e-05 2.6458057502361098e-05 3.09054675857608037e-05 3.53825385042324584e-05 3.9884038392877073e-05 4.4404730007212039e-05 4.89393769582267523e-05 5.34827499154652975e-05 5.80296327709341504e-05 6.25748287567075078e-05 6.71131665091860975e-05 7.16395060730658283e-05 7.61487448381811534e-05 8.06358234025119481e-05 8.50957313547334043e-05 8.95235129698469687e-05 9.39142728115593088e-05 9.82631812352008555e-05 0.000102565479785140983 0.000106816486480820188 0.000111011600985652003 0.000115146309653239097 0.00011921619044552646 0.000123216917717658181 0.000127144266864540219 0.000130994118824247587 0.000134762464433658329 0.000138445408631852375 0.000142039174507047674 0.000145540107183041813 0.000148944677541332422 0.000152249485775315642 0.000155451264773169779 0.00015854688332626887 0.000161533349160161558 0.000164407811785424268 0.000167167565165871507 0.000169810050201889983 0.000172332857026845083 0.000174733727114785695 0.000177010555197868705 0.000179161390992186762 0.000181184440730902381 0.000183078068503836783 0.000184840797402884634 0.000186471310472871761 0.000187968451467702714 0.000189331225411874977 0.000190558798967670981 0.000191650500608571222 0.00019260582059965728 0.000193424410785996266 0.00019410608419023119 0.000194650814420816093 0.000195058734892554459 0.000195330137861317646 0.000195465473275028596 0.000195465347443207532 0.000195330521527579222 0.000195061909856445565 0.000194660578065717184 0.000194127741069698791 0.000193464760864902024 0.000192673144170349517 0.000191754539908004136 0.000190710736527138021 0.000189543659176615931 0.000188255366729230418 0.000186848048662388285 0.00018532402179958536 0.000183685726917262062 0.000181935725221764246 0.000180076694701264357 0.00017811142635762171 0.000176042820323286573 0.000173873881868453405 0.000171607717303779713 0.000169247529784080837 0.000166796615018512063 0.000164258356892811364 0.000161636223009280661 0.000158933760150228778 0.000156154589670677124 0.000153302402826173179 0.000150380956041615185 0.000147394066127025343 0.000144345605446236672 0.000141239497044501241 0.000138079709741030179 0.000134870253192487228 0.000131615172933481438 0.000128318545400067896 0.000124984472942293233 0.00012161707883176624 0.000118220502270245404 0.000114798893405177902 0.000111356408358089364 0.000107897204271696658 0.000104425434381541862 0.000100945243117889078 9.74607612435810617e-05 9.39761010334509971e-05 9.04953515008301854e-05 8.70225736765919565e-05 8.35617959460873956e-05 8.01170094492434224e-05 7.66921635489596843e-05 7.32911613728717983e-05 6.99178554334071897e-05 6.65760433309440787e-05 6.32694635447770328e-05 6.00017913164425449e-05 5.67766346298392399e-05 5.35975302924230463e-05 5.0467940121637246e-05 4.73912472405696726e-05 4.4370752486684092e-05 4.14096709373211119e-05 3.85111285555107778e-05 3.56781589594530152e-05 3.2913700318890242e-05 3.02205923813994524e-05 2.76015736314792198e-05 2.50592785851159898e-05 2.25962352223594721e-05 2.02148625602407352e-05 1.79174683681889438e-05 1.57062470279345205e-05 1.3583277539688858e-05 1.15505216762064847e-05 9.60982228616753257e-06 7.76290174810757893e-06 6.01136057595422113e-06 4.35667617703729869e-06 2.80020176324794903e-06 1.34316541584313651e-06 -1.33306958037294656e-08 -1.26831094137979261e-06 -2.42092670280490033e-06 -3.47045669365063267e-06 -4.41630712523162357e-06 -5.25801171998555602e-06 -5.99523157293508326e-06 -6.62775486219680243e-06 -7.15549640968867456e-06 -7.57849709334840063e-06 -7.89692311235812947e-06 -8.11106510702813748e-06 -8.22133713516543325e-06 -8.2282755069112977e-06 -8.13253748019135667e-06 -7.93489981907872697e-06 -7.63625721752075011e-06 -7.2376205910302177e-06 -6.74011523908412897e-06 -6.14497888111593973e-06 -5.45355956911968232e-06 -4.66731348002139432e-06 -3.78780259109465694e-06 -2.81669224182361141e-06 -1.75574858573479678e-06 -6.06835935830482742e-07 6.28085992636548305e-07 1.94696493819888697e-06 3.34765904408123832e-06 4.82793989993989907e-06 6.3854956703171976e-06 8.01793430560036103e-06 9.72278683120655966e-06 1.14975107106455506e-05 1.33394932780344288e-05 1.52460552355979332e-05 1.72144542116127404e-05 1.92418883742272843e-05 2.1325500096526717e-05 2.34623796681883814e-05 2.56495690490424667e-05 2.78840656598160303e-05 3.01628262053307201e-05 3.24827705254111538e-05 3.48407854687412627e-05 3.72337287849155207e-05 3.96584330299368243e-05 4.21117094804083936e-05 4.45903520516966378e-05 4.70911412153580042e-05 4.96108479111470306e-05 5.21462374489532391e-05 5.46940733960560736e-05 5.72511214451329329e-05 5.98141532584885012e-05 6.23799502840404564e-05 6.49453075386560903e-05 6.75070373544795383e-05 7.00619730839798004e-05 7.26069727595040265e-05 7.51389227032160092e-05 7.76547410833566132e-05 8.01513814128816508e-05 8.26258359865886184e-05 8.50751392529726049e-05 8.74963711171166287e-05 8.988666017106003e-05 9.22431868481591552e-05 9.45631864980953644e-05 9.68439523792761581e-05 9.90828385655123417e-05 0.000101277262763951276 0.000103424709041389598 0.000105522730456206857 0.000107568951593281479 0.00010956107099940059 0.000111496863516785655 0.000113374182512513311 0.000115190962001728535 0.000116945218662699532 0.000118635053741901803 0.000120258654847454744 0.000121814297629381504 0.00012330034734531534 0.000124715260310402073 0.000126057585230311941 0.000127325964416413366 0.000128519134882306828 0.000129635929321063342 0.000130675276962667906 0.00013163620431130187 0.00013251783576225326 0.000133319394098387241 0.000134040200866257178 0.000134679676632073358 0.000135237341117897919 0.000135712813218573039 0.000136105810900027165 0.000136416150979749119 0.000136643748790352788 0.000136788617727289343 0.000136850868681904559 0.000136830709361159794 0.000136728443495473658 0.000136544469936259908 0.000136279281644868534 0.000135933464574750334 0.00013550769644878928 0.000135002745433861264 0.000134419468714785858 0.000133758810969952368 0.000133021802751002836 0.000132209558769058686 0.000131323276090074986 0.000130364232242002079 0.000129333783236525797 0.000128233361508242128 0.000127064473774208262 0.000125828698816891481 0.000124527685193609217 0.000123163148875626995 0.000121736870820148333 0.0001202506944784939 0.000118706523243817996 0.000117106317841777068 0.000115452093667604386 0.000113745918073090643 0.000111989907607017579 0.000110186225212620924 0.000108337077385690754 0.000106444711296951419 0.000104511411882372938 0.000102539498905100258 0.000100531323992680249 9.84892676532949523e-05 9.6415736274699701e-05 9.43131591095675383e-05 9.21839852509433389e-05 9.00306806014951013e-05 8.78557248402323963e-05 8.56616083903590116e-05 8.3450829391888077e-05 8.1225890682632787e-05 7.89892967911457356e-05 7.67435509451544007e-05 7.44911520989989794e-05 7.22345919835239142e-05 6.99763521818492443e-05 6.77189012343790267e-05 6.54646917763526681e-05 6.32161577111980228e-05 6.09757114228675411e-05 5.87457410302865045e-05 5.65286076869603071e-05 5.43266429287322404e-05 5.21421460725942837e-05 4.99773816693776003e-05 4.78345770130733587e-05 4.57159197094498117e-05 4.36235553065335093e-05 4.15595849894504621e-05 3.95260633420160609e-05 3.75249961773783551e-05 3.5558338439912096e-05 3.36279921804757333e-05 3.17358046070324089e-05 2.98835662125325028e-05 2.80730089818621362e-05 2.63058046795451575e-05 2.45835632197793695e-05 2.29078311202911969e-05 2.12800900413633826e-05 1.97017554113015015e-05 1.81741751394722837e-05 1.66986284179521173e-05 1.52763246127006391e-05 1.39084022450607053e-05 1.25959280642806281e-05 1.13398962116320919e-05 1.01412274765843135e-05 9.00076864538796475e-06 7.91929194229906904e-06 6.89749456356796217e-06 5.93599830419925369e-06 5.03534927738084869e-06 4.19601772636933121e-06 3.41839792850228234e-06 2.70280819090714819e-06 2.04949093736260938e-06 1.45861288566121736e-06 9.3026531472092782e-07 4.64464420584718024e-07 6.11517603473116393e-08 -2.79805217053688895e-07 -5.58612554341521511e-07 -7.75549084957560998e-07 -9.30965649024110128e-07 -1.02528422765607383e-06 -1.05899699715768848e-06 -1.03266530472504136e-06 -9.46918567363047958e-07 -8.024530958065625e-07 -6.00030845315969178e-07 -3.40478095294595267e-07 -2.46840597499346523e-08 3.46400569307330583e-07 7.71765143365992182e-07 1.25034064158906065e-06 1.78100131537171785e-06 2.36256639093370463e-06 2.99380182753852236e-06 3.67342212888420972e-06 4.40009220515395842e-06 5.17242928317719447e-06 5.98900486209975996e-06 6.8483467119289536e-06 7.74894091228238957e-06 8.68923392863325877e-06 9.66763472331852023e-06 1.06825168985538214e-05 1.17322208686688612e-05 1.28150560587668223e-05 1.3929303126990375e-05 1.50732162075714855e-05 1.62450251718246207e-05 1.74429379042502226e-05 1.86651425909056001e-05 1.99098100172049377e-05 2.11750958723173445e-05 2.2459143057343081e-05 2.37600839944534683e-05 2.50760429342042453e-05 2.64051382582449733e-05 2.77454847746773432e-05 2.90951960033298979e-05 3.04523864482550484e-05 3.18151738547860425e-05 3.3181681448515976e-05 3.45500401536160477e-05 3.59183907879327184e-05 3.72848862323650791e-05 3.86476935720549497e-05 4.00049962069807979e-05 4.1354995929599272e-05 4.26959149672238568e-05 4.40259979868955087e-05 4.53435140605598899e-05 4.66467585884183187e-05 4.79340551783946213e-05 4.92037574797179775e-05 5.0454250968695602e-05 5.16839546848158e-05 5.2891322915390803e-05 5.40748468270333798e-05 5.52330560423215381e-05 5.63645201600954207e-05 5.7467850217897656e-05 5.85417000951624531e-05 5.95847678558186463e-05 6.05957970290748924e-05 6.15735778272235435e-05 6.2516948299391631e-05 6.34247954202451808e-05 6.42960561127461455e-05 6.51297182041405613e-05 6.59248213144429706e-05 6.66804576767767587e-05 6.7395772889004195e-05 6.80699665961790484e-05 6.87022931034335263e-05 6.92920619190015694e-05 6.98386382271697537e-05 7.03414432910258583e-05 7.0799954784970173e-05 7.12137070570345549e-05 7.15822913211422516e-05 7.19053557795216037e-05 7.21826056755787092e-05 7.24138032776059574e-05 7.259876779379302e-05 7.27373752190860721e-05 7.28295581145171162e-05 7.28753053197070942e-05 7.28746615993212471e-05 7.28277272243328352e-05 7.27346574890211524e-05 7.25956621647069826e-05 7.24110048912952631e-05 7.21810025077658919e-05 7.19060243228197312e-05 7.15864913269523376e-05 7.12228753472904375e-05 7.08156981465880587e-05 7.03655304678386224e-05 6.98729910260140441e-05 6.93387454484994703e-05 6.87635051658431356e-05 6.81480262544895886e-05 6.74931082332157781e-05 6.67995928150314069e-05 6.60683626163496992e-05 6.53003398252745027e-05 6.44964848308873925e-05 6.36577948154561172e-05 6.27853023115111409e-05 6.18800737257796152e-05 6.09432078319816482e-05 5.9975834234523781e-05 5.89791118051492171e-05 5.79542270946186509e-05 5.69023927215180235e-05 5.58248457402955924e-05 5.47228459906550071e-05 5.35976744304264929e-05 5.2450631454053306e-05 5.12830351988307785e-05 5.00962198410391136e-05 4.88915338841011568e-05 4.76703384409062639e-05 4.6434005512421787e-05 4.51839162647072929e-05 4.3921459306441515e-05 4.26480289690474526e-05 4.1365023591493628e-05 4.00738438118181285e-05 3.87758908674173391e-05 3.74725649060999081e-05 3.61652633098908421e-05 3.48553790335380537e-05 3.35442989596443491e-05 3.22334022723124334e-05 3.09240588511570247e-05 2.96176276875042219e-05 2.83154553245493851e-05 2.70188743232164719e-05 2.5729201755407476e-05 2.4447737726295642e-05 2.31757639272567605e-05 2.19145422210026323e-05 2.06653132604133703e-05 1.94292951425250978e-05 1.82076820990725168e-05 1.70016432249320362e-05 1.58123212457597607e-05 1.46408313260509151e-05 1.3488259918806852e-05 1.23556636579213591e-05 1.12440682943439615e-05 1.01544676770210228e-05 9.08782277954715384e-06 8.04506077340343519e-06 7.02707414858729014e-06 6.03471988238867284e-06 5.06881865698949329e-06 4.13015412650776714e-06 3.21947223403867692e-06 2.33748057918434828e-06 1.48484783649006684e-06 6.62203225152649141e-07 -1.29863969710627579e-07 -8.90804824004510489e-07 -1.62011114964417814e-06 -2.31731581749385189e-06 -2.98199302821968954e-06 -3.61375853109139703e-06 -4.21226979082113935e-06 -4.77722610260129916e-06 -5.3083686555584956e-06 -5.80548054490621798e-06 -6.26838673313770388e-06 -6.69695396066148219e-06 -7.09109060634323785e-06 -7.4507464984711574e-06 -7.77591267672398382e-06 -8.06662110577549486e-06 -8.32294434122285033e-06 -8.54499514858120532e-06 -8.73292607614097593e-06 -8.88692898253116069e-06 -9.0072345198866871e-06 -9.09411157356243098e-06 -9.14786665938555032e-06 -9.16884327948184165e-06 -9.1574212377564568e-06 -9.11401591615019931e-06 -9.03907751283445127e-06 -8.93309024354566746e-06 -8.7965715072965588e-06 -8.6300710177383264e-06 -8.43416990147975231e-06 -8.20947976470048841e-06 -7.95664172942752489e-06 -7.67632544086913082e-06 -7.36922804722753114e-06 -7.03607315343574571e-06 -6.67760975028488961e-06 -6.2946111204303363e-06 -5.8878737227788495e-06 -5.45821605678093252e-06 -5.00647750816109337e-06 -4.53351717763413782e-06 -4.04021269416318299e-06 -3.52745901432598728e-06 -2.99616720936071847e-06 -2.447263241463013e-06 -1.8816867309167002e-06 -1.30038971563122837e-06 -7.04335404663286907e-07 -9.44969272934424172e-08 5.28143920774690558e-07 1.16259793253819691e-06 1.80786974458754295e-06 2.46295909023464931e-06 3.12686204934956706e-06 3.79857229339882008e-06 4.47708232419025432e-06 5.16138470485011343e-06 5.85047328158244113e-06 6.54334439477233353e-06 7.23899807802875304e-06 7.9364392437814871e-06 8.63467885407499148e-06 9.33273507523066983e-06 1.00296344150754457e-05 1.07244128414732429e-05 1.14161168809159688e-05 1.21038046959756022e-05 1.27865471404491475e-05 1.34634287910620626e-05 1.4133548954635892e-05 1.47960226496668713e-05 1.54499815612925192e-05 1.60945749686733894e-05 1.67289706438527722e-05 1.73523557212005281e-05 1.79639375365911069e-05 1.85629444355059863e-05 1.91486265493032306e-05 1.97202565389293319e-05 2.02771303054063974e-05 2.0818567666465649e-05 2.13439129987494537e-05 2.18525358450473465e-05 2.23438314860800712e-05 2.28172214763971909e-05 2.32721541439922889e-05 2.37081050532975166e-05 2.41245774312603908e-05 2.45211025562575617e-05 2.48972401096441854e-05 2.52525784897917933e-05 2.55867350885066752e-05 2.58993565297753857e-05 2.61901188708275404e-05 2.64587277655543766e-05 2.67049185903662687e-05 2.69284565326193599e-05 2.71291366417894129e-05 2.73067838436096104e-05 2.74612529174402938e-05 2.75924284371779565e-05 2.77002246760551068e-05 2.77845854757251558e-05 2.78454840800666389e-05 2.78829229341840118e-05 2.78969334491183536e-05 2.78875757328239463e-05 2.78549382880012382e-05 2.77991376774158878e-05 2.77203181573669635e-05 2.76186512800044874e-05 2.74943354652274162e-05 2.73475955429271858e-05 2.7178682266372887e-05 2.69878717975628928e-05 2.67754651653975205e-05 2.65417876975543952e-05 2.62871884269735896e-05 2.60120394738852346e-05 2.57167354043349785e-05 2.54016925661848918e-05 2.50673484035879341e-05 2.47141607509534023e-05 2.43426071074387285e-05 2.39531838930181726e-05 2.35464056871961148e-05 2.31228044514435997e-05 2.26829287364504133e-05 2.22273428752951346e-05 2.17566261636446737e-05 2.12713720281010781e-05 2.07721871838229464e-05 2.02596907825494753e-05 1.97345135521614366e-05 1.91972969289126635e-05 1.86486921834689776e-05 1.8089359541887669e-05 1.75199673026693256e-05 1.69411909510097405e-05 1.6353712271375338e-05 1.57582184595167666e-05 1.51554012350293981e-05 1.45459559555585976e-05 1.39305807337392365e-05 1.33099755579422045e-05 1.26848414178947936e-05 1.20558794362201756e-05 1.14237900069305794e-05 1.07892719418882461e-05 1.01530216262345328e-05 9.51573218376379308e-06 8.87809265320163121e-06 8.24078717632560202e-06 7.60449419884251246e-06 6.96988568491501509e-06 6.3376263462047869e-06 5.70837288627663626e-06 5.08277326117686149e-06 4.4614659569803942e-06 3.84507928506591353e-06 3.23423069585483704e-06 2.62952611171769604e-06 2.03155927972577335e-06 1.44091114489095163e-06 8.58149244508839269e-07 2.83827124188926216e-07 -2.81516223878596048e-07 -8.37356899899986856e-07 -1.38318661221356801e-06 -1.91851316932994151e-06 -2.44286094786031638e-06 -2.95577133594360786e-06 -3.45680315182324252e-06 -3.945533037255433e-06 -4.42155582546473257e-06 -4.88448488339968594e-06 -5.33395242807143018e-06 -5.76960981679717894e-06 -6.19112781120164306e-06 -6.59819681486424579e-06 -6.9905270845354627e-06 -7.36784891487807181e-06 -7.72991279672293217e-06 -8.07648954886457953e-06 -8.4073704234508707e-06 -8.72236718505795695e-06 -9.02131216357223566e-06 -9.30405828103280406e-06 -9.57047905262112241e-06 -9.82046856201340718e-06 -1.00539414113440673e-05 -1.02708326460575458e-05 -1.04710976549546779e-05 -1.06547120457701022e-05 -1.0821671496644061e-05 -1.0971991583880117e-05 -1.11057075864063662e-05 -1.12228742673852921e-05 -1.13235656334400798e-05 -1.14078746719922455e-05 -1.14759130672274535e-05 -1.15278108952294818e-05 -1.15637162988447701e-05 -1.15837951428598438e-05 -1.15882306500953313e-05 -1.1577223019038122e-05 -1.15509890236526157e-05 -1.15097615960282006e-05 -1.14537893925371451e-05 -1.13833363441919839e-05 -1.12986811919055909e-05 -1.12001170073709565e-05 -1.10879507002891151e-05 -1.09625025126856862e-05 -1.08241055010660116e-05 -1.06731050071681686e-05 -1.05098581180815878e-05 -1.03347331165053871e-05 -1.01481089219268115e-05 -9.95037452350555126e-06 -9.74192840545257e-06 -9.52317796569580977e-06 -9.29453892862707827e-06 -9.05643475272327051e-06 -8.80929603383832544e-06 -8.5535599049574462e-06 -8.28966943320520219e-06 -8.01807301489492852e-06 -7.73922376940230983e-06 -7.45357893264225459e-06 -7.16159925091994618e-06 -6.86374837592118038e-06 -6.56049226159932314e-06 -6.2522985637060454e-06 -5.93963604270399697e-06 -5.6229739707888761e-06 -5.30278154373712104e-06 -4.97952729828084654e-06 -4.65367853570289989e-06 -4.32570075232622893e-06 -3.99605707756006983e-06 -3.6652077201492647e-06 -3.33360942325612003e-06 -3.00171492898846112e-06 -2.66997245297026213e-06 -2.33882516953116683e-06 -2.0087107080755471e-06 -1.68006066116995498e-06 -1.35330010486917395e-06 -1.02884713178174172e-06 -7.07112397351644295e-07 -3.88498679817225954e-07 -7.34004542811584135e-08 2.37796518693000635e-07 5.4471558956560589e-07 8.46989601018728823e-07 1.14426125351860158e-06 1.43618345492137853e-06 1.72241965382113412e-06 2.00264415636378432e-06 2.27654242627477419e-06 2.54381136787175355e-06 2.80415959185655258e-06 3.0573076637077552e-06 3.30298833451453504e-06 3.5409467541209015e-06 3.7709406664711482e-06 3.99274058707156991e-06 4.20612996250760769e-06 4.41090531197944271e-06 4.60687635084247577e-06 4.79386609616151712e-06 4.97171095431314121e-06 5.14026079069042842e-06 5.29937898158983258e-06 5.44894244837969805e-06 5.58884167407495812e-06 5.71898070246055245e-06 5.83927711993068915e-06 5.9496620202302234e-06 6.0500799523051377e-06 6.1404888514893769e-06 6.22085995427479805e-06 6.29117769693003751e-06 6.35143959825205895e-06 6.4016561267535234e-06 6.4418505526048911e-06 6.47205878466845959e-06 6.49232919297680992e-06 6.50272241702466551e-06 6.50331116025755296e-06 6.49417997115539655e-06 6.47542501132312705e-06 6.44715381101293179e-06 6.40948501251614932e-06 6.36254810187336759e-06 6.30648312936384278e-06 6.24144041924405756e-06 6.1675802692164393e-06 6.08507264011719913e-06 5.99409683632077295e-06 5.8948411773662372e-06 5.7875026613169812e-06 5.67228662037188987e-06 5.54940636925090163e-06 5.4190828468827203e-06 5.28154425192639895e-06 5.13702567266087042e-06 4.98576871178017947e-06 4.82802110663231549e-06 4.66403634544175454e-06 4.49407328005482627e-06 4.31839573574811592e-06 4.13727211863640978e-06 3.95097502121797448e-06 3.7597808265890518e-06 3.56396931185877859e-06 3.36382325128986446e-06 3.15962801968779996e-06 2.95167119655339559e-06 2.7402421715097328e-06 2.5256317515079827e-06 2.30813177030736605e-06 2.08803470071945437e-06 1.86563327009644334e-06 1.64122007953655106e-06 1.41508722726677149e-06 1.18752593665789316e-06 9.58826189311450054e-07 7.29276363651105298e-07 4.99162879436978308e-07 2.68769848611957874e-07 3.83787328738238149e-08 -1.91731991643504118e-07 -4.21287162209172574e-07 -6.50015249500740855e-07 -8.77648669431910269e-07 -1.10392408647583881e-06 -1.32858270816880078e-06 -1.55137057049779708e-06 -1.77203881388551769e-06 -1.99034394950661538e-06 -2.20604811568059974e-06 -2.41891932410507237e-06 -2.62873169570644138e-06 -2.83526568590412352e-06 -3.03830829909817188e-06 -3.23765329220624862e-06 -3.43310136709531978e-06 -3.62446035176441086e-06 -3.81154537015837133e-06 -3.99417900050058786e-06 -4.17219142205730692e-06 -4.34542055025563724e-06 -4.51371216009933806e-06 -4.67691999783725106e-06 -4.83490588086176477e-06 -4.98753978582351413e-06 -5.13469992497098551e-06 -5.27627281073555752e-06 -5.41215330859853472e-06 -5.54224467829441058e-06 -5.66645860341573113e-06 -5.78471520950516905e-06 -5.89694307072888454e-06 -6.00307920524582762e-06 -6.10306905939659581e-06 -6.19686648085330975e-06 -6.28443368088219129e-06 -6.36574118588637646e-06 -6.44076777840752028e-06 -6.50950042777781941e-06 -6.57193421062661881e-06 -6.62807222145621961e-06 -6.6779254735145738e-06 -6.7215127902011652e-06 -6.7588606872556066e-06 -6.79000324598519844e-06 -6.81498197780058264e-06 -6.83384568033498058e-06 -6.84665028543312436e-06 -6.8534586993027498e-06 -6.85434063513022441e-06 -6.84937243846851868e-06 -6.83863690571265582e-06 -6.82222309598376366e-06 -6.80022613674919182e-06 -6.77274702351052664e-06 -6.73989241389677914e-06 -6.70177441650380619e-06 -6.6585103748249614e-06 -6.61022264662100308e-06 -6.55703837908017639e-06 -6.49908928012128943e-06 -6.43651138619465127e-06 -6.36944482693648908e-06 -6.29803358703354215e-06 -6.22242526565437995e-06 -6.14277083380392516e-06 -6.05922438995672689e-06 -5.97194291432307867e-06 -5.88108602210100086e-06 -5.78681571606370287e-06 -5.68929613883073187e-06 -5.58869332516680343e-06 -5.48517495464968105e-06 -5.37891010504324102e-06 -5.27006900670890746e-06 -5.15882279838227398e-06 -5.04534328463753935e-06 -4.92980269535605193e-06 -4.8123734475098501e-06 -4.69322790956374843e-06 -4.57253816879339651e-06 -4.45047580180991913e-06 -4.32721164857290318e-06 -4.20291559016737714e-06 -4.07775633061091228e-06 -3.9519011829499759e-06 -3.8255158598941323e-06 -3.6987642692300706e-06 -3.57180831424570957e-06 -3.44480769938805513e-06 -3.31791974136534052e-06 -3.19129918589820491e-06 -3.06509803031091609e-06 -2.93946535214558641e-06 -2.81454714397193635e-06 -2.6904861545531488e-06 -2.56742173651953851e-06 -2.4454897006896513e-06]\n   * Referenced by: '<S1>/Generated Filter Block'\n   */\n  real_T Thrd_Value;                   /* Expression: 0.005\n                                        * Referenced by: '<Root>/Thrd'\n                                        */\n  real_T Memory11_InitialCondition;    /* Expression: 0\n                                        * Referenced by: '<Root>/Memory11'\n                                        */\n  real_T Memory7_InitialCondition;     /* Expression: 0\n                                        * Referenced by: '<Root>/Memory7'\n                                        */\n  real_T Memory3_InitialCondition;     /* Expression: 1\n                                        * Referenced by: '<Root>/Memory3'\n                                        */\n  real_T Memory4_InitialCondition;     /* Expression: 1\n                                        * Referenced by: '<Root>/Memory4'\n                                        */\n  real_T Memory9_InitialCondition;     /* Expression: 0\n                                        * Referenced by: '<Root>/Memory9'\n                                        */\n  real_T Memory5_InitialCondition;     /* Expression: 0\n                                        * Referenced by: '<Root>/Memory5'\n                                        */\n  real_T Memory6_InitialCondition;     /* Expression: 0\n                                        * Referenced by: '<Root>/Memory6'\n                                        */\n  real_T Memory10_InitialCondition;    /* Expression: 0\n                                        * Referenced by: '<Root>/Memory10'\n                                        */\n  real_T Analogoutput_P1_Size[2];    /* Computed Parameter: Analogoutput_P1_Size\n                                      * Referenced by: '<Root>/Analog output '\n                                      */\n  real_T Analogoutput_P1;              /* Expression: parModuleId\n                                        * Referenced by: '<Root>/Analog output '\n                                        */\n  real_T Analogoutput_P2_Size[2];    /* Computed Parameter: Analogoutput_P2_Size\n                                      * Referenced by: '<Root>/Analog output '\n                                      */\n  real_T Analogoutput_P2;              /* Expression: parSampleTime\n                                        * Referenced by: '<Root>/Analog output '\n                                        */\n  real_T Analogoutput_P3_Size[2];    /* Computed Parameter: Analogoutput_P3_Size\n                                      * Referenced by: '<Root>/Analog output '\n                                      */\n  real_T Analogoutput_P3;              /* Expression: parPciSlot\n                                        * Referenced by: '<Root>/Analog output '\n                                        */\n  real_T Analogoutput_P4_Size[2];    /* Computed Parameter: Analogoutput_P4_Size\n                                      * Referenced by: '<Root>/Analog output '\n                                      */\n  real_T Analogoutput_P4[2];           /* Expression: parDacChannels\n                                        * Referenced by: '<Root>/Analog output '\n                                        */\n  real_T Analogoutput_P5_Size[2];    /* Computed Parameter: Analogoutput_P5_Size\n                                      * Referenced by: '<Root>/Analog output '\n                                      */\n  real_T Analogoutput_P5[2];           /* Expression: parDacRanges\n                                        * Referenced by: '<Root>/Analog output '\n                                        */\n  real_T Analogoutput_P6_Size[2];    /* Computed Parameter: Analogoutput_P6_Size\n                                      * Referenced by: '<Root>/Analog output '\n                                      */\n  real_T Analogoutput_P6[2];           /* Expression: parDacInitValues\n                                        * Referenced by: '<Root>/Analog output '\n                                        */\n  real_T Analogoutput_P7_Size[2];    /* Computed Parameter: Analogoutput_P7_Size\n                                      * Referenced by: '<Root>/Analog output '\n                                      */\n  real_T Analogoutput_P7[2];           /* Expression: parDacResets\n                                        * Referenced by: '<Root>/Analog output '\n                                        */\n  real_T WhiskerTrig_Amp;              /* Expression: 1\n                                        * Referenced by: '<Root>/Whisker Trig'\n                                        */\n  real_T WhiskerTrig_PhaseDelay;       /* Expression: 0\n                                        * Referenced by: '<Root>/Whisker Trig'\n                                        */\n  real_T NpxlsTrig_Amp;                /* Expression: 2.5\n                                        * Referenced by: '<Root>/Npxls Trig'\n                                        */\n  real_T NpxlsTrig_PhaseDelay;         /* Expression: 0\n                                        * Referenced by: '<Root>/Npxls Trig'\n                                        */\n  real_T PupilTrig_Amp;                /* Expression: 1\n                                        * Referenced by: '<Root>/Pupil Trig'\n                                        */\n  real_T PupilTrig_PhaseDelay;         /* Expression: 0\n                                        * Referenced by: '<Root>/Pupil Trig'\n                                        */\n  real_T Constant4_Value;              /* Expression: 1\n                                        * Referenced by: '<S6>/Constant4'\n                                        */\n  real_T Digitaloutput_P1_Size[2];  /* Computed Parameter: Digitaloutput_P1_Size\n                                     * Referenced by: '<Root>/Digital output '\n                                     */\n  real_T Digitaloutput_P1;             /* Expression: parModuleId\n                                        * Referenced by: '<Root>/Digital output '\n                                        */\n  real_T Digitaloutput_P2_Size[2];  /* Computed Parameter: Digitaloutput_P2_Size\n                                     * Referenced by: '<Root>/Digital output '\n                                     */\n  real_T Digitaloutput_P2;             /* Expression: parSampleTime\n                                        * Referenced by: '<Root>/Digital output '\n                                        */\n  real_T Digitaloutput_P3_Size[2];  /* Computed Parameter: Digitaloutput_P3_Size\n                                     * Referenced by: '<Root>/Digital output '\n                                     */\n  real_T Digitaloutput_P3;             /* Expression: parPciSlot\n                                        * Referenced by: '<Root>/Digital output '\n                                        */\n  real_T Digitaloutput_P4_Size[2];  /* Computed Parameter: Digitaloutput_P4_Size\n                                     * Referenced by: '<Root>/Digital output '\n                                     */\n  real_T Digitaloutput_P4[15];         /* Expression: parDoChannels\n                                        * Referenced by: '<Root>/Digital output '\n                                        */\n  real_T Digitaloutput_P5_Size[2];  /* Computed Parameter: Digitaloutput_P5_Size\n                                     * Referenced by: '<Root>/Digital output '\n                                     */\n  real_T Digitaloutput_P5[15];         /* Expression: parDoInitValues\n                                        * Referenced by: '<Root>/Digital output '\n                                        */\n  real_T Digitaloutput_P6_Size[2];  /* Computed Parameter: Digitaloutput_P6_Size\n                                     * Referenced by: '<Root>/Digital output '\n                                     */\n  real_T Digitaloutput_P6[15];         /* Expression: parDoResets\n                                        * Referenced by: '<Root>/Digital output '\n                                        */\n  real_T Digitalinput_P1_Size[2];    /* Computed Parameter: Digitalinput_P1_Size\n                                      * Referenced by: '<Root>/Digital input '\n                                      */\n  real_T Digitalinput_P1;              /* Expression: parModuleId\n                                        * Referenced by: '<Root>/Digital input '\n                                        */\n  real_T Digitalinput_P2_Size[2];    /* Computed Parameter: Digitalinput_P2_Size\n                                      * Referenced by: '<Root>/Digital input '\n                                      */\n  real_T Digitalinput_P2;              /* Expression: parSampleTime\n                                        * Referenced by: '<Root>/Digital input '\n                                        */\n  real_T Digitalinput_P3_Size[2];    /* Computed Parameter: Digitalinput_P3_Size\n                                      * Referenced by: '<Root>/Digital input '\n                                      */\n  real_T Digitalinput_P3;              /* Expression: parPciSlot\n                                        * Referenced by: '<Root>/Digital input '\n                                        */\n  real_T Digitalinput_P4_Size[2];    /* Computed Parameter: Digitalinput_P4_Size\n                                      * Referenced by: '<Root>/Digital input '\n                                      */\n  real_T Digitalinput_P4;              /* Expression: parDiChannels\n                                        * Referenced by: '<Root>/Digital input '\n                                        */\n};\n\n/* Storage class 'PageSwitching' */\nextern ATTN_cal_type ATTN_cal_impl;\nextern ATTN_cal_type *ATTN_cal;\n\n#endif                                 /* RTW_HEADER_ATTN_cal_h_ */\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * multiword_types.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef MULTIWORD_TYPES_H\n#define MULTIWORD_TYPES_H\n#include \"rtwtypes.h\"\n\n/*\n * Definitions supporting external data access\n */\ntypedef int64_T chunk_T;\ntypedef uint64_T uchunk_T;\n\n/*\n * MultiWord supporting definitions\n */\ntypedef long long longlong_T;\n\n/*\n * MultiWord types\n */\ntypedef struct {\n  uint64_T chunks[2];\n} int128m_T;\n\ntypedef struct {\n  int128m_T re;\n  int128m_T im;\n} cint128m_T;\n\ntypedef struct {\n  uint64_T chunks[2];\n} uint128m_T;\n\ntypedef struct {\n  uint128m_T re;\n  uint128m_T im;\n} cuint128m_T;\n\ntypedef struct {\n  uint64_T chunks[3];\n} int192m_T;\n\ntypedef struct {\n  int192m_T re;\n  int192m_T im;\n} cint192m_T;\n\ntypedef struct {\n  uint64_T chunks[3];\n} uint192m_T;\n\ntypedef struct {\n  uint192m_T re;\n  uint192m_T im;\n} cuint192m_T;\n\ntypedef struct {\n  uint64_T chunks[4];\n} int256m_T;\n\ntypedef struct {\n  int256m_T re;\n  int256m_T im;\n} cint256m_T;\n\ntypedef struct {\n  uint64_T chunks[4];\n} uint256m_T;\n\ntypedef struct {\n  uint256m_T re;\n  uint256m_T im;\n} cuint256m_T;\n\ntypedef struct {\n  uint64_T chunks[5];\n} int320m_T;\n\ntypedef struct {\n  int320m_T re;\n  int320m_T im;\n} cint320m_T;\n\ntypedef struct {\n  uint64_T chunks[5];\n} uint320m_T;\n\ntypedef struct {\n  uint320m_T re;\n  uint320m_T im;\n} cuint320m_T;\n\ntypedef struct {\n  uint64_T chunks[6];\n} int384m_T;\n\ntypedef struct {\n  int384m_T re;\n  int384m_T im;\n} cint384m_T;\n\ntypedef struct {\n  uint64_T chunks[6];\n} uint384m_T;\n\ntypedef struct {\n  uint384m_T re;\n  uint384m_T im;\n} cuint384m_T;\n\ntypedef struct {\n  uint64_T chunks[7];\n} int448m_T;\n\ntypedef struct {\n  int448m_T re;\n  int448m_T im;\n} cint448m_T;\n\ntypedef struct {\n  uint64_T chunks[7];\n} uint448m_T;\n\ntypedef struct {\n  uint448m_T re;\n  uint448m_T im;\n} cuint448m_T;\n\ntypedef struct {\n  uint64_T chunks[8];\n} int512m_T;\n\ntypedef struct {\n  int512m_T re;\n  int512m_T im;\n} cint512m_T;\n\ntypedef struct {\n  uint64_T chunks[8];\n} uint512m_T;\n\ntypedef struct {\n  uint512m_T re;\n  uint512m_T im;\n} cuint512m_T;\n\ntypedef struct {\n  uint64_T chunks[9];\n} int576m_T;\n\ntypedef struct {\n  int576m_T re;\n  int576m_T im;\n} cint576m_T;\n\ntypedef struct {\n  uint64_T chunks[9];\n} uint576m_T;\n\ntypedef struct {\n  uint576m_T re;\n  uint576m_T im;\n} cuint576m_T;\n\ntypedef struct {\n  uint64_T chunks[10];\n} int640m_T;\n\ntypedef struct {\n  int640m_T re;\n  int640m_T im;\n} cint640m_T;\n\ntypedef struct {\n  uint64_T chunks[10];\n} uint640m_T;\n\ntypedef struct {\n  uint640m_T re;\n  uint640m_T im;\n} cuint640m_T;\n\ntypedef struct {\n  uint64_T chunks[11];\n} int704m_T;\n\ntypedef struct {\n  int704m_T re;\n  int704m_T im;\n} cint704m_T;\n\ntypedef struct {\n  uint64_T chunks[11];\n} uint704m_T;\n\ntypedef struct {\n  uint704m_T re;\n  uint704m_T im;\n} cuint704m_T;\n\ntypedef struct {\n  uint64_T chunks[12];\n} int768m_T;\n\ntypedef struct {\n  int768m_T re;\n  int768m_T im;\n} cint768m_T;\n\ntypedef struct {\n  uint64_T chunks[12];\n} uint768m_T;\n\ntypedef struct {\n  uint768m_T re;\n  uint768m_T im;\n} cuint768m_T;\n\ntypedef struct {\n  uint64_T chunks[13];\n} int832m_T;\n\ntypedef struct {\n  int832m_T re;\n  int832m_T im;\n} cint832m_T;\n\ntypedef struct {\n  uint64_T chunks[13];\n} uint832m_T;\n\ntypedef struct {\n  uint832m_T re;\n  uint832m_T im;\n} cuint832m_T;\n\ntypedef struct {\n  uint64_T chunks[14];\n} int896m_T;\n\ntypedef struct {\n  int896m_T re;\n  int896m_T im;\n} cint896m_T;\n\ntypedef struct {\n  uint64_T chunks[14];\n} uint896m_T;\n\ntypedef struct {\n  uint896m_T re;\n  uint896m_T im;\n} cuint896m_T;\n\ntypedef struct {\n  uint64_T chunks[15];\n} int960m_T;\n\ntypedef struct {\n  int960m_T re;\n  int960m_T im;\n} cint960m_T;\n\ntypedef struct {\n  uint64_T chunks[15];\n} uint960m_T;\n\ntypedef struct {\n  uint960m_T re;\n  uint960m_T im;\n} cuint960m_T;\n\ntypedef struct {\n  uint64_T chunks[16];\n} int1024m_T;\n\ntypedef struct {\n  int1024m_T re;\n  int1024m_T im;\n} cint1024m_T;\n\ntypedef struct {\n  uint64_T chunks[16];\n} uint1024m_T;\n\ntypedef struct {\n  uint1024m_T re;\n  uint1024m_T im;\n} cuint1024m_T;\n\ntypedef struct {\n  uint64_T chunks[17];\n} int1088m_T;\n\ntypedef struct {\n  int1088m_T re;\n  int1088m_T im;\n} cint1088m_T;\n\ntypedef struct {\n  uint64_T chunks[17];\n} uint1088m_T;\n\ntypedef struct {\n  uint1088m_T re;\n  uint1088m_T im;\n} cuint1088m_T;\n\ntypedef struct {\n  uint64_T chunks[18];\n} int1152m_T;\n\ntypedef struct {\n  int1152m_T re;\n  int1152m_T im;\n} cint1152m_T;\n\ntypedef struct {\n  uint64_T chunks[18];\n} uint1152m_T;\n\ntypedef struct {\n  uint1152m_T re;\n  uint1152m_T im;\n} cuint1152m_T;\n\ntypedef struct {\n  uint64_T chunks[19];\n} int1216m_T;\n\ntypedef struct {\n  int1216m_T re;\n  int1216m_T im;\n} cint1216m_T;\n\ntypedef struct {\n  uint64_T chunks[19];\n} uint1216m_T;\n\ntypedef struct {\n  uint1216m_T re;\n  uint1216m_T im;\n} cuint1216m_T;\n\ntypedef struct {\n  uint64_T chunks[20];\n} int1280m_T;\n\ntypedef struct {\n  int1280m_T re;\n  int1280m_T im;\n} cint1280m_T;\n\ntypedef struct {\n  uint64_T chunks[20];\n} uint1280m_T;\n\ntypedef struct {\n  uint1280m_T re;\n  uint1280m_T im;\n} cuint1280m_T;\n\ntypedef struct {\n  uint64_T chunks[21];\n} int1344m_T;\n\ntypedef struct {\n  int1344m_T re;\n  int1344m_T im;\n} cint1344m_T;\n\ntypedef struct {\n  uint64_T chunks[21];\n} uint1344m_T;\n\ntypedef struct {\n  uint1344m_T re;\n  uint1344m_T im;\n} cuint1344m_T;\n\ntypedef struct {\n  uint64_T chunks[22];\n} int1408m_T;\n\ntypedef struct {\n  int1408m_T re;\n  int1408m_T im;\n} cint1408m_T;\n\ntypedef struct {\n  uint64_T chunks[22];\n} uint1408m_T;\n\ntypedef struct {\n  uint1408m_T re;\n  uint1408m_T im;\n} cuint1408m_T;\n\ntypedef struct {\n  uint64_T chunks[23];\n} int1472m_T;\n\ntypedef struct {\n  int1472m_T re;\n  int1472m_T im;\n} cint1472m_T;\n\ntypedef struct {\n  uint64_T chunks[23];\n} uint1472m_T;\n\ntypedef struct {\n  uint1472m_T re;\n  uint1472m_T im;\n} cuint1472m_T;\n\ntypedef struct {\n  uint64_T chunks[24];\n} int1536m_T;\n\ntypedef struct {\n  int1536m_T re;\n  int1536m_T im;\n} cint1536m_T;\n\ntypedef struct {\n  uint64_T chunks[24];\n} uint1536m_T;\n\ntypedef struct {\n  uint1536m_T re;\n  uint1536m_T im;\n} cuint1536m_T;\n\ntypedef struct {\n  uint64_T chunks[25];\n} int1600m_T;\n\ntypedef struct {\n  int1600m_T re;\n  int1600m_T im;\n} cint1600m_T;\n\ntypedef struct {\n  uint64_T chunks[25];\n} uint1600m_T;\n\ntypedef struct {\n  uint1600m_T re;\n  uint1600m_T im;\n} cuint1600m_T;\n\ntypedef struct {\n  uint64_T chunks[26];\n} int1664m_T;\n\ntypedef struct {\n  int1664m_T re;\n  int1664m_T im;\n} cint1664m_T;\n\ntypedef struct {\n  uint64_T chunks[26];\n} uint1664m_T;\n\ntypedef struct {\n  uint1664m_T re;\n  uint1664m_T im;\n} cuint1664m_T;\n\ntypedef struct {\n  uint64_T chunks[27];\n} int1728m_T;\n\ntypedef struct {\n  int1728m_T re;\n  int1728m_T im;\n} cint1728m_T;\n\ntypedef struct {\n  uint64_T chunks[27];\n} uint1728m_T;\n\ntypedef struct {\n  uint1728m_T re;\n  uint1728m_T im;\n} cuint1728m_T;\n\ntypedef struct {\n  uint64_T chunks[28];\n} int1792m_T;\n\ntypedef struct {\n  int1792m_T re;\n  int1792m_T im;\n} cint1792m_T;\n\ntypedef struct {\n  uint64_T chunks[28];\n} uint1792m_T;\n\ntypedef struct {\n  uint1792m_T re;\n  uint1792m_T im;\n} cuint1792m_T;\n\ntypedef struct {\n  uint64_T chunks[29];\n} int1856m_T;\n\ntypedef struct {\n  int1856m_T re;\n  int1856m_T im;\n} cint1856m_T;\n\ntypedef struct {\n  uint64_T chunks[29];\n} uint1856m_T;\n\ntypedef struct {\n  uint1856m_T re;\n  uint1856m_T im;\n} cuint1856m_T;\n\ntypedef struct {\n  uint64_T chunks[30];\n} int1920m_T;\n\ntypedef struct {\n  int1920m_T re;\n  int1920m_T im;\n} cint1920m_T;\n\ntypedef struct {\n  uint64_T chunks[30];\n} uint1920m_T;\n\ntypedef struct {\n  uint1920m_T re;\n  uint1920m_T im;\n} cuint1920m_T;\n\ntypedef struct {\n  uint64_T chunks[31];\n} int1984m_T;\n\ntypedef struct {\n  int1984m_T re;\n  int1984m_T im;\n} cint1984m_T;\n\ntypedef struct {\n  uint64_T chunks[31];\n} uint1984m_T;\n\ntypedef struct {\n  uint1984m_T re;\n  uint1984m_T im;\n} cuint1984m_T;\n\ntypedef struct {\n  uint64_T chunks[32];\n} int2048m_T;\n\ntypedef struct {\n  int2048m_T re;\n  int2048m_T im;\n} cint2048m_T;\n\ntypedef struct {\n  uint64_T chunks[32];\n} uint2048m_T;\n\ntypedef struct {\n  uint2048m_T re;\n  uint2048m_T im;\n} cuint2048m_T;\n\n#endif                                 /* MULTIWORD_TYPES_H */\n"},{"name":"rtGetInf.cpp","type":"source","group":"utility","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtGetInf.cpp\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include \"rtwtypes.h\"\n\nextern \"C\"\n{\n\n#include \"rtGetInf.h\"\n\n}\n\n#include <stddef.h>\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#define NumBitsPerChar                 8U\n\nextern \"C\"\n{\n  /*\n   * Initialize rtInf needed by the generated code.\n   * Inf is initialized as non-signaling. Assumes IEEE.\n   */\n  real_T rtGetInf(void)\n  {\n    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\n    real_T inf = 0.0;\n    if (bitsPerReal == 32U) {\n      inf = rtGetInfF();\n    } else {\n      uint16_T one = 1U;\n      enum {\n        LittleEndian,\n        BigEndian\n      } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\n      switch (machByteOrder) {\n       case LittleEndian:\n        {\n          union {\n            LittleEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0x7FF00000U;\n          tmpVal.bitVal.words.wordL = 0x00000000U;\n          inf = tmpVal.fltVal;\n          break;\n        }\n\n       case BigEndian:\n        {\n          union {\n            BigEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0x7FF00000U;\n          tmpVal.bitVal.words.wordL = 0x00000000U;\n          inf = tmpVal.fltVal;\n          break;\n        }\n      }\n    }\n\n    return inf;\n  }\n\n  /*\n   * Initialize rtInfF needed by the generated code.\n   * Inf is initialized as non-signaling. Assumes IEEE.\n   */\n  real32_T rtGetInfF(void)\n  {\n    IEEESingle infF;\n    infF.wordL.wordLuint = 0x7F800000U;\n    return infF.wordL.wordLreal;\n  }\n\n  /*\n   * Initialize rtMinusInf needed by the generated code.\n   * Inf is initialized as non-signaling. Assumes IEEE.\n   */\n  real_T rtGetMinusInf(void)\n  {\n    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\n    real_T minf = 0.0;\n    if (bitsPerReal == 32U) {\n      minf = rtGetMinusInfF();\n    } else {\n      uint16_T one = 1U;\n      enum {\n        LittleEndian,\n        BigEndian\n      } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\n      switch (machByteOrder) {\n       case LittleEndian:\n        {\n          union {\n            LittleEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0xFFF00000U;\n          tmpVal.bitVal.words.wordL = 0x00000000U;\n          minf = tmpVal.fltVal;\n          break;\n        }\n\n       case BigEndian:\n        {\n          union {\n            BigEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0xFFF00000U;\n          tmpVal.bitVal.words.wordL = 0x00000000U;\n          minf = tmpVal.fltVal;\n          break;\n        }\n      }\n    }\n\n    return minf;\n  }\n\n  /*\n   * Initialize rtMinusInfF needed by the generated code.\n   * Inf is initialized as non-signaling. Assumes IEEE.\n   */\n  real32_T rtGetMinusInfF(void)\n  {\n    IEEESingle minfF;\n    minfF.wordL.wordLuint = 0xFF800000U;\n    return minfF.wordL.wordLreal;\n  }\n}\n"},{"name":"rtGetInf.h","type":"header","group":"utility","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtGetInf.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rtGetInf_h_\n#define RTW_HEADER_rtGetInf_h_\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#include \"rtwtypes.h\"\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  extern real_T rtGetInf(void);\n  extern real32_T rtGetInfF(void);\n  extern real_T rtGetMinusInf(void);\n  extern real32_T rtGetMinusInfF(void);\n\n#ifdef __cplusplus\n\n}                                      /* extern \"C\" */\n\n#endif\n#endif                                 /* RTW_HEADER_rtGetInf_h_ */\n"},{"name":"rtGetNaN.cpp","type":"source","group":"utility","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtGetNaN.cpp\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include \"rtwtypes.h\"\n\nextern \"C\"\n{\n\n#include \"rtGetNaN.h\"\n\n}\n\n#include <stddef.h>\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#define NumBitsPerChar                 8U\n\nextern \"C\"\n{\n  /*\n   * Initialize rtNaN needed by the generated code.\n   * NaN is initialized as non-signaling. Assumes IEEE.\n   */\n  real_T rtGetNaN(void)\n  {\n    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\n    real_T nan = 0.0;\n    if (bitsPerReal == 32U) {\n      nan = rtGetNaNF();\n    } else {\n      uint16_T one = 1U;\n      enum {\n        LittleEndian,\n        BigEndian\n      } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\n      switch (machByteOrder) {\n       case LittleEndian:\n        {\n          union {\n            LittleEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0xFFF80000U;\n          tmpVal.bitVal.words.wordL = 0x00000000U;\n          nan = tmpVal.fltVal;\n          break;\n        }\n\n       case BigEndian:\n        {\n          union {\n            BigEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;\n          tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;\n          nan = tmpVal.fltVal;\n          break;\n        }\n      }\n    }\n\n    return nan;\n  }\n\n  /*\n   * Initialize rtNaNF needed by the generated code.\n   * NaN is initialized as non-signaling. Assumes IEEE.\n   */\n  real32_T rtGetNaNF(void)\n  {\n    IEEESingle nanF = { { 0.0F } };\n\n    uint16_T one = 1U;\n    enum {\n      LittleEndian,\n      BigEndian\n    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\n    switch (machByteOrder) {\n     case LittleEndian:\n      {\n        nanF.wordL.wordLuint = 0xFFC00000U;\n        break;\n      }\n\n     case BigEndian:\n      {\n        nanF.wordL.wordLuint = 0x7FFFFFFFU;\n        break;\n      }\n    }\n\n    return nanF.wordL.wordLreal;\n  }\n}\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtGetNaN.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rtGetNaN_h_\n#define RTW_HEADER_rtGetNaN_h_\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#include \"rtwtypes.h\"\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  extern real_T rtGetNaN(void);\n  extern real32_T rtGetNaNF(void);\n\n#ifdef __cplusplus\n\n}                                      /* extern \"C\" */\n\n#endif\n#endif                                 /* RTW_HEADER_rtGetNaN_h_ */\n"},{"name":"rt_nonfinite.cpp","type":"source","group":"utility","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rt_nonfinite.cpp\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\nextern \"C\"\n{\n\n#include \"rtGetNaN.h\"\n\n}\n\nextern \"C\"\n{\n\n#include \"rtGetInf.h\"\n\n}\n\n#include <stddef.h>\n#include \"rtwtypes.h\"\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#define NumBitsPerChar                 8U\n\nextern \"C\"\n{\n  real_T rtInf;\n  real_T rtMinusInf;\n  real_T rtNaN;\n  real32_T rtInfF;\n  real32_T rtMinusInfF;\n  real32_T rtNaNF;\n}\n\nextern \"C\"\n{\n  /*\n   * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\n   * generated code. NaN is initialized as non-signaling. Assumes IEEE.\n   */\n  void rt_InitInfAndNaN(size_t realSize)\n  {\n    (void) (realSize);\n    rtNaN = rtGetNaN();\n    rtNaNF = rtGetNaNF();\n    rtInf = rtGetInf();\n    rtInfF = rtGetInfF();\n    rtMinusInf = rtGetMinusInf();\n    rtMinusInfF = rtGetMinusInfF();\n  }\n\n  /* Test if value is infinite */\n  boolean_T rtIsInf(real_T value)\n  {\n    return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\n  }\n\n  /* Test if single-precision value is infinite */\n  boolean_T rtIsInfF(real32_T value)\n  {\n    return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\n  }\n\n  /* Test if value is not a number */\n  boolean_T rtIsNaN(real_T value)\n  {\n    boolean_T result = (boolean_T) 0;\n    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\n    if (bitsPerReal == 32U) {\n      result = rtIsNaNF((real32_T)value);\n    } else {\n      union {\n        LittleEndianIEEEDouble bitVal;\n        real_T fltVal;\n      } tmpVal;\n\n      tmpVal.fltVal = value;\n      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==\n                           0x7FF00000 &&\n                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\n                            (tmpVal.bitVal.words.wordL != 0) ));\n    }\n\n    return result;\n  }\n\n  /* Test if single-precision value is not a number */\n  boolean_T rtIsNaNF(real32_T value)\n  {\n    IEEESingle tmp;\n    tmp.wordL.wordLreal = value;\n    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\n                       (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\n  }\n}\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rt_nonfinite.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rt_nonfinite_h_\n#define RTW_HEADER_rt_nonfinite_h_\n#include <stddef.h>\n#include \"rtwtypes.h\"\n#define NOT_USING_NONFINITE_LITERALS   1\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  extern real_T rtInf;\n  extern real_T rtMinusInf;\n  extern real_T rtNaN;\n  extern real32_T rtInfF;\n  extern real32_T rtMinusInfF;\n  extern real32_T rtNaNF;\n  extern void rt_InitInfAndNaN(size_t realSize);\n  extern boolean_T rtIsInf(real_T value);\n  extern boolean_T rtIsInfF(real32_T value);\n  extern boolean_T rtIsNaN(real_T value);\n  extern boolean_T rtIsNaNF(real32_T value);\n  struct BigEndianIEEEDouble {\n    struct {\n      uint32_T wordH;\n      uint32_T wordL;\n    } words;\n  };\n\n  struct LittleEndianIEEEDouble {\n    struct {\n      uint32_T wordL;\n      uint32_T wordH;\n    } words;\n  };\n\n  struct IEEESingle {\n    union {\n      real32_T wordLreal;\n      uint32_T wordLuint;\n    } wordL;\n  };\n\n#ifdef __cplusplus\n\n}                                      /* extern \"C\" */\n\n#endif\n#endif                                 /* RTW_HEADER_rt_nonfinite_h_ */\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtwtypes.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n#include \"tmwtypes.h\"\n#ifndef POINTER_T\n#define POINTER_T\n\ntypedef void * pointer_T;\n\n#endif\n\n/* Logical type definitions */\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n\n#ifndef INT64_T\n#define INT64_T\n\ntypedef long int64_T;\n\n#define MAX_int64_T                    ((int64_T)(9223372036854775807L))\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807L-1L))\n#endif\n\n#ifndef UINT64_T\n#define UINT64_T\n\ntypedef unsigned long uint64_T;\n\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFUL))\n#endif\n\n/*===========================================================================*\n * Additional complex number type definitions                                           *\n *===========================================================================*/\n#ifndef CINT64_T\n#define CINT64_T\n\ntypedef struct {\n  int64_T re;\n  int64_T im;\n} cint64_T;\n\n#endif\n\n#ifndef CUINT64_T\n#define CUINT64_T\n\ntypedef struct {\n  uint64_T re;\n  uint64_T im;\n} cuint64_T;\n\n#endif\n#endif                                 /* RTWTYPES_H */\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Interface files","code":"/*\n *  rtmodel.h:\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"ATTN\".\n *\n * Model version              : 1.477\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Tue Dec  5 12:02:58 2023\n *\n * Target selection: slrealtime.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rtmodel_h_\n#define RTW_HEADER_rtmodel_h_\n#include \"ATTN.h\"\n#define GRTINTERFACE                   0\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\n"},{"name":"sg_IO191_ad_s.c","type":"source","group":"interface","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw/../../../.speedgoat/speedgoatlib/R2023a/9.6.1.1_4/sg_blocks/analog","tag":"","groupDisplay":"Interface files","code":"// Copyright 2006-2023 Speedgoat GmbH\r\n\r\n#define S_FUNCTION_LEVEL    (0xd87+330-0xecf)\r\n#undef S_FUNCTION_NAME\r\n#define S_FUNCTION_NAME     sg_IO191_ad_s\r\n#include \"sg_IO191.h\"\r\n#ifndef MATLAB_MEX_FILE\r\n#include \"sg_printf.h\"\r\n#include \"sg_common.h\"\r\nvoid readPciBar(sg_PCIDevice*z7c46aa329e,int16_t bus,int16_t slot,int16_t z1e0fd5210f);\r\n#else\r\n#include \"mex.h\"\r\n#endif\r\n#include \"sg_callback.h\"\r\n#define ze13f49a01f           ssGetSFcnParam(S, (0x1421+4652-0x264d))\r\n#define z3832b85a32           ssGetSFcnParam(S, (0x82d+2280-0x1114))\r\n#define z702a26a5e9                ssGetSFcnParam(S, (0x141f+3266-0x20df))\r\n#define z3644586f49         ssGetSFcnParam(S, (0x6bc+3711-0x1538))\r\n#define z8d5c288b32         ssGetSFcnParam(S, (0x1a40+450-0x1bfe))\r\n#define zb66856d060         ssGetSFcnParam(S, (0x20ad+932-0x244c))\r\n#define z9876548c58         ssGetSFcnParam(S, (0x303+2144-0xb5d))\r\n#define zb093e77094      ssGetSFcnParam(S, (0x1650+3950-0x25b7))\r\n#define z2948f18e24        ssGetSFcnParam(S, (0x1310+1501-0x18e5))\r\n#define zdf24515981                           ((0x92c+2706-0x13b5))\r\n#define z7e2eeaa57c          ((0x1dfc+2294-0x26f2))\r\n#define zc0ced48ecf              ((0x770+2705-0x1200))\r\n#define z2e6483d505              ((0x110a+5601-0x26e9))\r\n#define zc5ce4cb81a              ((0x40d+302-0x53b))\r\n#define z0194338df7         ((0x21a0+274-0x22b2))\r\n#define z2b17e2ee3b              ((0x44b+4814-0x1718))\r\nstatic double zfc19727a48(uint32_t zf4d6a48e37);static char msg[z71934bf57c];static void mdlInitializeSizes(SimStruct*S){uint16_t i;ssSetNumSFcnParams(S,zdf24515981);if(ssGetNumSFcnParams(S)!=ssGetSFcnParamsCount(S)){sprintf(msg,\"\\x57\\x72\\x6f\\x6e\\x67\\x20\\x6e\\x75\\x6d\\x62\\x65\\x72\\x20\\x6f\\x66\\x20\\x69\\x6e\\x70\\x75\\x74\\x20\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x20\\x70\\x61\\x73\\x73\\x65\\x64\\x2e\" \"\\n\" \"\\x25\\x64\\x20\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x20\\x61\\x72\\x65\\x20\\x65\\x78\\x70\\x65\\x63\\x74\\x65\\x64\" \"\\n\",zdf24515981);ssSetErrorStatus(S,msg);return;}ssSetNumContStates(S,(0x49a+6035-0x1c2d));ssSetNumDiscStates(S,(0xbbd+3468-0x1949));if(!ssSetNumInputPorts(S,(0xebf+491-0x10aa)))return;if(!ssSetNumOutputPorts(S,(int)mxGetN(z3644586f49)))return;for(i=(0x26b+6461-0x1ba8);i<(int)mxGetN(z3644586f49);i++){ssSetOutputPortWidth(S,i,(0xdf5+2237-0x16b1));}ssSetNumSampleTimes(S,(0x5af+2164-0xe22));ssSetNumRWork(S,zc5ce4cb81a);ssSetNumIWork(S,z2e6483d505);ssSetNumPWork(S,z2b17e2ee3b);ssSetNumModes(S,(0x130+4427-0x127b));ssSetNumNonsampledZCs(S,(0x486+1293-0x993));for(i=(0x135a+368-0x14ca);i<zdf24515981;i++){ssSetSFcnParamTunable(S,i,(0x5eb+5912-0x1d03));}ssSetOptions(S,SS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME|SS_OPTION_EXCEPTION_FREE_CODE|SS_OPTION_RUNTIME_EXCEPTION_FREE_CODE);}static void mdlInitializeSampleTimes(SimStruct*S){if(mxGetPr(z3832b85a32)[(0xbc9+611-0xe2c)]==-1.0){ssSetSampleTime(S,(0xf9d+3333-0x1ca2),INHERITED_SAMPLE_TIME);ssSetOffsetTime(S,(0xa0f+3396-0x1753),FIXED_IN_MINOR_STEP_OFFSET);}else{ssSetSampleTime(S,(0x2e3+889-0x65c),mxGetPr(z3832b85a32)[(0xb5d+6245-0x23c2)]);ssSetOffsetTime(S,(0xa80+96-0xae0),0.0);}ssSetModelReferenceSampleTimeDefaultInheritance(S);}\r\n#ifndef MATLAB_MEX_FILE\r\nstatic void sg_ModelLoad(SimStruct*S){}static void sg_ModelStart(SimStruct*S){sg_PCIDevice zeccbadd9b3;uint32_t bus,slot,za0d38ae598,ze5e89e1937,i;uint16_t z4e3026977c,zf91d71c6d9;volatile uint32_t*z27fd94ac66;if(mxGetN(z702a26a5e9)==(0x11b2+4500-0x2345)){bus=(0x8f8+5136-0x1d08);slot=(uint32_t)mxGetPr(z702a26a5e9)[(0xbc2+6909-0x26bf)];}else{bus=(uint32_t)mxGetPr(z702a26a5e9)[(0x730+109-0x79d)];slot=(uint32_t)mxGetPr(z702a26a5e9)[(0x17e1+1839-0x1f0f)];}za0d38ae598=((uint32_t)mxGetPr(ze13f49a01f)[(0x1cb2+361-0x1e1b)]);if(sg_findPciDevice(&zeccbadd9b3,DEVNAME,VENDORID,za1afbacc4a,z78f5b4c5a6,z2bc00458b9,za0d38ae598,bus,slot)!=(0x3a8+8380-0x2464)){if(sg_findPciDevice(&zeccbadd9b3,DEVNAME,VENDORID,zb765876dc5,z44a525e63d,za64fcbac7d,za0d38ae598,bus,slot)!=(0x83f+3255-0x14f6)){ssSetErrorStatus(S,pSgErrorStr);return;}}\r\n#ifdef _MSC_BUILD\r\nreadPciBar(&zeccbadd9b3,zeccbadd9b3.bus,zeccbadd9b3.slot,(0x6c4+3428-0x1428));\r\n#endif\r\nz27fd94ac66=(volatile uint32_t*)sg_mapMemory(&zeccbadd9b3,(0x168a+226-0x176a));zf91d71c6d9=(uint16_t)mxGetN(z3644586f49);ssSetPWorkValue(S,z0194338df7,(uint32_t*)z27fd94ac66);ssSetIWorkValue(S,z7e2eeaa57c,zf91d71c6d9);if(z27fd94ac66[REVISION]<zb5135f698e){sprintf(msg,\"\\x25\\x73\\x20\\x4d\\x6f\\x64\\x75\\x6c\\x65\\x20\\x49\\x44\\x20\\x25\\x64\\x20\\x46\\x69\\x72\\x6d\\x77\\x61\\x72\\x65\\x20\\x30\\x78\\x25\\x58\\x20\\x69\\x73\\x20\\x6f\\x75\\x74\\x64\\x61\\x74\\x65\\x64\\x2c\\x20\\x70\\x6c\\x65\\x61\\x73\\x65\\x20\\x63\\x6f\\x6e\\x74\\x61\\x63\\x74\\x20\\x53\\x70\\x65\\x65\\x64\\x67\\x6f\\x61\\x74\\x20\\x73\\x75\\x70\\x70\\x6f\\x72\\x74\\x2e\" \"\\n\",DEVNAME,za0d38ae598,z27fd94ac66[REVISION]);ssSetErrorStatus(S,msg);return;}z27fd94ac66[BRP]=((0x1ffa+403-0x218c)<<zbef81c3fd0);z27fd94ac66[z469883b65e]=(0x1175+2396-0x1ad1);z27fd94ac66[zfcd2c661f6]=(uint32_t)(z27fd94ac66[z24765e17f8]/z1a910f8330);SG_PRINTF_DEBUG(\"\\x41\\x44\\x43\\x5f\\x53\\x43\\x41\\x4e\\x5f\\x52\\x41\\x54\\x45\\x20\\x25\\x58\" \"\\n\",z27fd94ac66[zfcd2c661f6]);ze5e89e1937=(0x10f5+710-0x13bb);for(i=(0x7b8+7005-0x2315);i<zf91d71c6d9;i++){z4e3026977c=(uint16_t)mxGetPr(z3644586f49)[i]-(0x1eb+1714-0x89c);switch((uint16_t)mxGetPr(z9876548c58)[i]){case(0x7c7+6388-0x20ba):ze5e89e1937|=(z4eb3456176<<(z4e3026977c*(0x696+4149-0x16c7)));break;case(0x13bc+3824-0x22aa):ze5e89e1937|=(z7239c371e4<<(z4e3026977c*(0x95c+3508-0x170c)));break;case(0x7e9+429-0x993):ze5e89e1937|=(z65195ba21a<<(z4e3026977c*(0x10d6+3390-0x1e10)));break;case(0xb1b+1951-0x12b6):ze5e89e1937|=(z769e3cf99a<<(z4e3026977c*(0x10a3+377-0x1218)));break;case(0xd84+3455-0x1afe):ze5e89e1937|=(zad88ee04d7<<(z4e3026977c*(0x53d+7502-0x2287)));break;case(0x17d2+2662-0x2232):ze5e89e1937|=(z04726aa6f4<<(z4e3026977c*(0xb6f+4410-0x1ca5)));break;case(0x602+7248-0x224b):ze5e89e1937|=(zca8a2e109e<<(z4e3026977c*(0x9d4+6839-0x2487)));break;default:sprintf(msg,\"\\x41\\x6e\\x61\\x6c\\x6f\\x67\\x20\\x49\\x6e\\x70\\x75\\x74\\x73\\x20\\x75\\x6e\\x6b\\x6e\\x6f\\x77\\x6e\\x20\\x76\\x6f\\x6c\\x74\\x61\\x67\\x65\");ssSetErrorStatus(S,msg);break;}}z27fd94ac66[z3f2dd8a551]=ze5e89e1937;SG_PRINTF_DEBUG(\"\\x47\\x61\\x69\\x6e\\x20\\x72\\x65\\x67\\x69\\x73\\x74\\x65\\x72\\x3a\\x20\\x25\\x58\\x20\" \"\\n\",ze5e89e1937);ssSetIWorkValue(S,zc0ced48ecf,(0xfab+4387-0x20cd));}static void sg_ModelStep(SimStruct*S){uint16_t zf91d71c6d9=ssGetIWorkValue(S,z7e2eeaa57c);uint16_t z4d3816b14e=(uint16_t)mxGetPr(z3644586f49)[zf91d71c6d9-(0xd9+7701-0x1eed)]-(0x2211+510-0x240e);volatile uint32_t*z27fd94ac66=ssGetPWorkValue(S,z0194338df7);uint32_t ze77fa94a00=(uint32_t)mxGetPr(z8d5c288b32)[(0x8bb+460-0xa87)]-(0x1035+2325-0x1949);uint32_t i,z812c65ff2f,z297b36fb23,z41c8844f54;double*y;if((uint16_t)ssGetIWorkValue(S,zc0ced48ecf)==(0x2208+15-0x2216)){z27fd94ac66[z75b6a00559]=393322|((z4d3816b14e&(0x1666+1643-0x1cca))<<z690b1cd3dc)|(ze77fa94a00<<z0a8926012b)|((0xd23+2873-0x185b)<<z55588371ab);for(i=(0x19ec+199-0x1ab3);(z27fd94ac66[z75b6a00559]>>(0x29a+8557-0x23f7))>(0x46c+1030-0x86e);i++){if(i>1193000.0*1.0){sprintf(msg,\"\\x25\\x73\\x20\\x66\\x61\\x69\\x6c\\x65\\x64\\x20\\x74\\x6f\\x20\\x63\\x6f\\x6e\\x66\\x69\\x67\\x20\\x41\\x6e\\x61\\x6c\\x6f\\x67\\x20\\x69\\x6e\\x70\\x75\\x74\\x20\\x72\\x65\\x67\\x20\\x30\\x78\\x25\\x78\",DEVNAME,z27fd94ac66[z75b6a00559]>>(0x49a+8581-0x260f));ssSetErrorStatus(S,msg);return;}}ssSetIWorkValue(S,zc0ced48ecf,(0xf36+511-0x1135));}z41c8844f54=z27fd94ac66[zee1550bec3];for(i=(0x1c4+4708-0x1428);z41c8844f54<zf91d71c6d9;i++){if(i>1193000.0*2.0){sprintf(msg,\"\\x25\\x73\\x20\\x66\\x61\\x69\\x6c\\x65\\x64\\x20\\x74\\x6f\\x20\\x73\\x74\\x61\\x72\\x74\\x20\\x41\\x6e\\x61\\x6c\\x6f\\x67\\x20\\x69\\x6e\\x70\\x75\\x74\",DEVNAME);ssSetErrorStatus(S,msg);return;}z41c8844f54=z27fd94ac66[zee1550bec3];}for(i=(0x1db1+843-0x20fc);i<=z41c8844f54;i++){z297b36fb23=z27fd94ac66[zceb273b472];if(!(z297b36fb23&((0xbdf+1279-0x10dd)<<(0x256+8210-0x2249)))){for(z812c65ff2f=(0x18ba+2896-0x240a);z812c65ff2f<zf91d71c6d9;z812c65ff2f++){if(((uint16_t)mxGetPr(z3644586f49)[z812c65ff2f]-(0x854+693-0xb08))==(uint16_t)((z297b36fb23>>z09b806e22a)&(0x658+4661-0x1886))){y=ssGetOutputPortSignal(S,z812c65ff2f);y[(0x15ac+4118-0x25c2)]=zfc19727a48(z297b36fb23);break;}}}}z27fd94ac66[z75b6a00559]=393322|((z4d3816b14e&(0x3ea+1890-0xb45))<<z690b1cd3dc)|(ze77fa94a00<<z0a8926012b)|((0x303+95-0x361)<<\r\nz55588371ab);}static void sg_ModelStop(SimStruct*S){volatile uint32_t*z27fd94ac66=ssGetPWorkValue(S,z0194338df7);z27fd94ac66[BRP]=((0xb2b+1334-0x1060)<<zbef81c3fd0);}\r\n#endif  \r\nstatic double zfc19727a48(uint32_t zf4d6a48e37){double ze485f859ed;uint16_t z1044b54040=(zf4d6a48e37>>z2d5a35d68d)&(0x460+7091-0x200c);const double z3dec4d2bb3[(0xbf5+6672-0x25fd)]={24.576/32768,10.24/32768,5.12/32768,2.56/32768,1.28/32768,0.64/32768,65535,20.48/32768};if(((zf4d6a48e37>>z2858a50a43)&(0x1c5a+2555-0x2654))>(0x161d+1278-0x1b1b)){ze485f859ed=((((double)(zf4d6a48e37&65535))-z7935114df5)*z3dec4d2bb3[z1044b54040]);}else{ze485f859ed=(((double)(zf4d6a48e37&65535))*z3dec4d2bb3[z1044b54040]);}return ze485f859ed;}\r\n#include \"sg_sfcn_glue.h\"   \r\n\r\n"},{"name":"sg_IO191_da_s.c","type":"source","group":"interface","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw/../../../.speedgoat/speedgoatlib/R2023a/9.6.1.1_4/sg_blocks/analog","tag":"","groupDisplay":"Interface files","code":"// Copyright 2006-2023 Speedgoat GmbH\r\n\r\n#define S_FUNCTION_LEVEL    (0x115c+4425-0x22a3)\r\n#undef S_FUNCTION_NAME\r\n#define S_FUNCTION_NAME     sg_IO191_da_s\r\n#include \"sg_IO191.h\"\r\n#ifndef MATLAB_MEX_FILE\r\n#include \"sg_printf.h\"\r\n#include \"sg_common.h\"\r\nvoid readPciBar(sg_PCIDevice*z7c46aa329e,int16_t bus,int16_t slot,int16_t z1e0fd5210f);\r\n#else\r\n#include \"mex.h\"\r\n#endif\r\n#include \"sg_callback.h\"\r\n#define ze13f49a01f           ssGetSFcnParam(S, (0x1087+3465-0x1e10))\r\n#define z3832b85a32           ssGetSFcnParam(S, (0x1144+2969-0x1cdc))\r\n#define z702a26a5e9                ssGetSFcnParam(S, (0x660+1141-0xad3))\r\n#define zfa79626a1f        ssGetSFcnParam(S, (0x10ac+2040-0x18a1))\r\n#define z832477988f        ssGetSFcnParam(S, (0x1c80+1808-0x238c))\r\n#define ze4bd57db54     ssGetSFcnParam(S, (0x161b+2429-0x1f93))\r\n#define zc6e5e42eac       ssGetSFcnParam(S, (0xd37+1615-0x1380))\r\n#define zdf24515981                           ((0x1da7+1552-0x23b0))\r\n#define z2e6483d505              ((0x1151+3974-0x20d7))\r\n#define zc5ce4cb81a              ((0xbe1+209-0xcb2))\r\n#define z0194338df7         ((0x2103+180-0x21b7))\r\n#define z2b17e2ee3b              ((0x22+1846-0x757))\r\nstatic int32_t z58d7aabac0(uint32_t zc8abac822d,double z7e546ae0bf);static char msg[z71934bf57c];static void mdlInitializeSizes(SimStruct*S){uint16_t i;ssSetNumSFcnParams(S,zdf24515981);if(ssGetNumSFcnParams(S)!=ssGetSFcnParamsCount(S)){sprintf(msg,\"\\x57\\x72\\x6f\\x6e\\x67\\x20\\x6e\\x75\\x6d\\x62\\x65\\x72\\x20\\x6f\\x66\\x20\\x69\\x6e\\x70\\x75\\x74\\x20\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x20\\x70\\x61\\x73\\x73\\x65\\x64\\x2e\" \"\\n\" \"\\x25\\x64\\x20\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x20\\x61\\x72\\x65\\x20\\x65\\x78\\x70\\x65\\x63\\x74\\x65\\x64\" \"\\n\",zdf24515981);ssSetErrorStatus(S,msg);return;}ssSetNumContStates(S,(0x1b18+885-0x1e8d));ssSetNumDiscStates(S,(0x4d+3063-0xc44));if(!ssSetNumOutputPorts(S,(0x1f6+1692-0x892)))return;if(!ssSetNumInputPorts(S,(int)mxGetN(zfa79626a1f)))return;for(i=(0xa3f+2563-0x1442);i<(int)mxGetN(zfa79626a1f);i++){ssSetInputPortWidth(S,i,(0x1d1c+2074-0x2535));ssSetInputPortDirectFeedThrough(S,i,(0x496+6731-0x1ee0));ssSetInputPortRequiredContiguous(S,i,(0x205+938-0x5ae));}ssSetNumSampleTimes(S,(0x7c8+3155-0x141a));ssSetNumRWork(S,zc5ce4cb81a);ssSetNumIWork(S,z2e6483d505);ssSetNumPWork(S,z2b17e2ee3b);ssSetNumModes(S,(0xf24+2439-0x18ab));ssSetNumNonsampledZCs(S,(0x8e6+1662-0xf64));for(i=(0xdf9+3148-0x1a45);i<zdf24515981;i++){ssSetSFcnParamTunable(S,i,(0xfd7+1134-0x1445));}ssSetOptions(S,SS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME|SS_OPTION_EXCEPTION_FREE_CODE|SS_OPTION_RUNTIME_EXCEPTION_FREE_CODE);}static void mdlInitializeSampleTimes(SimStruct*S){if(mxGetPr(z3832b85a32)[(0x13f3+1824-0x1b13)]==-1.0){ssSetSampleTime(S,(0x5bf+1780-0xcb3),INHERITED_SAMPLE_TIME);ssSetOffsetTime(S,(0x94c+4883-0x1c5f),FIXED_IN_MINOR_STEP_OFFSET);}else{ssSetSampleTime(S,(0xb6d+6577-0x251e),mxGetPr(z3832b85a32)[(0xccc+4368-0x1ddc)]);ssSetOffsetTime(S,(0x1f04+788-0x2218),0.0);}ssSetModelReferenceSampleTimeDefaultInheritance(S);}\r\n#ifndef MATLAB_MEX_FILE\r\nstatic void sg_ModelLoad(SimStruct*S){}static void sg_ModelStart(SimStruct*S){sg_PCIDevice zeccbadd9b3;uint32_t bus,slot,za0d38ae598;volatile uint32_t*z27fd94ac66;uint16_t z879ede9171=(uint16_t)mxGetN(zfa79626a1f);uint32_t z812c65ff2f,zc8abac822d,zc430a259a4;uint16_t i,z4e3026977c;int32_t z7711a772ed;double z7e546ae0bf;if(mxGetN(z702a26a5e9)==(0x11ca+257-0x12ca)){bus=(0xef0+5035-0x229b);slot=(uint32_t)mxGetPr(z702a26a5e9)[(0x8e9+5014-0x1c7f)];}else{bus=(uint32_t)mxGetPr(z702a26a5e9)[(0xffa+5633-0x25fb)];slot=(uint32_t)mxGetPr(z702a26a5e9)[(0x76+3457-0xdf6)];}za0d38ae598=((uint32_t)mxGetPr(ze13f49a01f)[(0x74f+3385-0x1488)]);if(sg_findPciDevice(&zeccbadd9b3,DEVNAME,VENDORID,za1afbacc4a,z78f5b4c5a6,z2bc00458b9,za0d38ae598,bus,slot)!=(0x14cd+3154-0x211f)){if(sg_findPciDevice(&zeccbadd9b3,DEVNAME,VENDORID,zb765876dc5,z44a525e63d,za64fcbac7d,za0d38ae598,bus,slot)!=(0x1d1+4045-0x119e)){ssSetErrorStatus(S,pSgErrorStr);return;}}\r\n#ifdef _MSC_BUILD\r\nreadPciBar(&zeccbadd9b3,zeccbadd9b3.bus,zeccbadd9b3.slot,(0x2c3+7285-0x1f38));\r\n#endif\r\nz27fd94ac66=(volatile uint32_t*)sg_mapMemory(&zeccbadd9b3,(0x12c2+3206-0x1f46));ssSetPWorkValue(S,z0194338df7,(uint32_t*)z27fd94ac66);for(i=(0x450+2145-0xcb1);i<z879ede9171;i++){zc430a259a4=(0xaea+2788-0x15ce);z4e3026977c=(uint16_t)mxGetPr(zfa79626a1f)[i]-(0x260+1861-0x9a4);zc8abac822d=(uint32_t)mxGetPr(z832477988f)[i]-(0xedc+3261-0x1b98);z7e546ae0bf=(double)mxGetPr(ze4bd57db54)[z4e3026977c];z7711a772ed=z58d7aabac0(zc8abac822d,z7e546ae0bf);zc430a259a4=(z7711a772ed&65535)|((z4e3026977c&(0x865+2053-0x105b))<<z18b319d394)|(zbec0ec695f<<z668ef58fc5);if(z27fd94ac66[REVISION]>=z5f130b7753){for(z812c65ff2f=(0x52+4871-0x1359);z27fd94ac66[zeeea544396]&((0x166d+167-0x1713)<<z579611d67f);z812c65ff2f++){if(z812c65ff2f>1193000.0*1.0){sprintf(msg,\"\\x25\\x73\\x20\\x41\\x6e\\x61\\x6c\\x6f\\x67\\x20\\x4f\\x75\\x74\\x70\\x75\\x74\\x20\\x53\\x50\\x49\\x20\\x69\\x73\\x20\\x62\\x75\\x73\\x79\",DEVNAME);ssSetErrorStatus(S,msg);return;}}z27fd94ac66[zeeea544396]=zc430a259a4;}else{z27fd94ac66[zeeea544396]=zc430a259a4;sg_wait_ns(z905251a4e4);}zc430a259a4=(zc8abac822d&65535)|((z4e3026977c&(0x155c+3961-0x24c6))<<z18b319d394)|(z4d4e3e315a<<z668ef58fc5);if(z27fd94ac66[REVISION]>=z5f130b7753){for(z812c65ff2f=(0x127c+2160-0x1aec);z27fd94ac66[zeeea544396]&((0x22e0+1009-0x26d0)<<z579611d67f);z812c65ff2f++){if(z812c65ff2f>1193000.0*1.0){sprintf(msg,\"\\x25\\x73\\x20\\x41\\x6e\\x61\\x6c\\x6f\\x67\\x20\\x4f\\x75\\x74\\x70\\x75\\x74\\x20\\x53\\x50\\x49\\x20\\x69\\x73\\x20\\x62\\x75\\x73\\x79\",DEVNAME);ssSetErrorStatus(S,msg);return;}}z27fd94ac66[zeeea544396]=zc430a259a4;}else{z27fd94ac66[zeeea544396]=zc430a259a4;sg_wait_ns(z905251a4e4);}}}static void sg_ModelStep(SimStruct*S){volatile uint32_t*z27fd94ac66=ssGetPWorkValue(S,z0194338df7);uint16_t zf91d71c6d9=(uint16_t)mxGetN(zfa79626a1f);uint32_t zc430a259a4,z26dbd73a5e,zc8abac822d;int32_t out;uint16_t i,z812c65ff2f,z4e3026977c,zd953a322a2,z2ce6e80f45;double*zc7fdaf6331;if(z27fd94ac66[REVISION]>=z5f130b7753){for(i=(0x1f7c+1906-0x26ee);i<zf91d71c6d9;i++){zc430a259a4=(0x9c6+1647-0x1035);z4e3026977c=(uint16_t)mxGetPr(zfa79626a1f)[i]-(0x6ea+700-0x9a5);zc7fdaf6331=(double*)ssGetInputPortRealSignal(S,i);zc8abac822d=(uint32_t)mxGetPr(z832477988f)[i]-(0x10b2+3359-0x1dd0);out=z58d7aabac0(zc8abac822d,zc7fdaf6331[(0xad3+5209-0x1f2c)]);zc430a259a4=(out&65535)|((z4e3026977c&(0xb3c+2889-0x1676))<<z18b319d394)|(zbec0ec695f<<z668ef58fc5);for(z26dbd73a5e=(0x2c3+5143-0x16da);z27fd94ac66[zeeea544396]&((0x1a70+2074-0x2289)<<z579611d67f);z26dbd73a5e++){if(z26dbd73a5e>1193000.0*1.0){sprintf(msg,\"\\x25\\x73\\x20\\x41\\x6e\\x61\\x6c\\x6f\\x67\\x20\\x4f\\x75\\x74\\x70\\x75\\x74\\x20\\x53\\x50\\x49\\x20\\x69\\x73\\x20\\x62\\x75\\x73\\x79\",DEVNAME);ssSetErrorStatus(S,msg);return;}}z27fd94ac66[zeeea544396]=zc430a259a4;}}else{if(zf91d71c6d9>(0x3c2+8185-0x23b9)){zd953a322a2=(0x59d+7459-0x22be);z2ce6e80f45=zf91d71c6d9;}else{zd953a322a2=zf91d71c6d9;z2ce6e80f45=(0x132+8860-0x23ce);}for(i=(0x2e5+2709-0xd7a);i<zd953a322a2;i++){zc430a259a4=(0x644+3281-0x1315);z4e3026977c=(uint16_t)mxGetPr(zfa79626a1f)[i]-(0x1334+4140-0x235f);zc7fdaf6331=(double*)ssGetInputPortRealSignal(S,i);zc8abac822d=(uint32_t)mxGetPr(z832477988f)[i]-(0x8ef+5876-0x1fe2);out=z58d7aabac0(zc8abac822d,zc7fdaf6331[(0x1e5b+1507-0x243e)]);zc430a259a4=(out&65535)|((z4e3026977c&(0x931+1765-0x1007))<<z18b319d394)|(zbec0ec695f<<z668ef58fc5);z27fd94ac66[zeeea544396]=zc430a259a4;sg_wait_ns(z7edc1a4c28);}sg_wait_ns(z7edc1a4c28);for(z812c65ff2f=i;z812c65ff2f<z2ce6e80f45;z812c65ff2f++){zc430a259a4=(0x2e8+7263-0x1f47);z4e3026977c=(uint16_t)mxGetPr(zfa79626a1f)[z812c65ff2f]-(0x109d+4671-0x22db);zc7fdaf6331=(double*)ssGetInputPortRealSignal(S,z812c65ff2f);zc8abac822d=(uint32_t)mxGetPr(z832477988f)[z812c65ff2f]-(0x6ec+3830-0x15e1);out=z58d7aabac0(zc8abac822d,zc7fdaf6331[(0x11+9277-0x244e)]);zc430a259a4=(out&65535)|((z4e3026977c&(0x5d3+5261-0x1a51))<<z18b319d394)|(zbec0ec695f<<z668ef58fc5);z27fd94ac66[zeeea544396]=zc430a259a4;sg_wait_ns(z905251a4e4);}}}static void sg_ModelStop(SimStruct*S){volatile uint32_t*z27fd94ac66=ssGetPWorkValue(S,z0194338df7);uint16_t z879ede9171=(uint16_t)mxGetN(zfa79626a1f);int32_t z7711a772ed;uint32_t z812c65ff2f,zc8abac822d,zc430a259a4;uint16_t i,\r\nz4e3026977c;double z7e546ae0bf;for(i=(0x22c+4901-0x1551);i<z879ede9171;i++){if((int)mxGetPr(zc6e5e42eac)[i]){zc430a259a4=(0x334+5769-0x19bd);z4e3026977c=(uint16_t)mxGetPr(zfa79626a1f)[i]-(0x14cc+4305-0x259c);zc8abac822d=(uint32_t)mxGetPr(z832477988f)[i]-(0xb94+6731-0x25de);z7e546ae0bf=(double)mxGetPr(ze4bd57db54)[z4e3026977c];z7711a772ed=z58d7aabac0(zc8abac822d,z7e546ae0bf);zc430a259a4=(z7711a772ed&65535)|((z4e3026977c&(0x1632+3041-0x2204))<<z18b319d394)|(zbec0ec695f<<z668ef58fc5);if(z27fd94ac66[REVISION]>=z5f130b7753){for(z812c65ff2f=(0xdc6+3965-0x1d43);z27fd94ac66[zeeea544396]&((0xf3f+5553-0x24ef)<<z579611d67f);z812c65ff2f++){if(z812c65ff2f>1193000.0*1.0){sprintf(msg,\"\\x25\\x73\\x20\\x41\\x6e\\x61\\x6c\\x6f\\x67\\x20\\x4f\\x75\\x74\\x70\\x75\\x74\\x20\\x53\\x50\\x49\\x20\\x69\\x73\\x20\\x62\\x75\\x73\\x79\",DEVNAME);ssSetErrorStatus(S,msg);return;}}z27fd94ac66[zeeea544396]=zc430a259a4;}else{z27fd94ac66[zeeea544396]=zc430a259a4;sg_wait_ns(z905251a4e4);}zc430a259a4=(zc8abac822d&65535)|((z4e3026977c&(0x302+3062-0xee9))<<z18b319d394)|(z4d4e3e315a<<z668ef58fc5);if(z27fd94ac66[REVISION]>=z5f130b7753){for(z812c65ff2f=(0x364+352-0x4c4);z27fd94ac66[zeeea544396]&((0xd3c+126-0xdb9)<<z579611d67f);z812c65ff2f++){if(z812c65ff2f>1193000.0*1.0){sprintf(msg,\"\\x25\\x73\\x20\\x41\\x6e\\x61\\x6c\\x6f\\x67\\x20\\x4f\\x75\\x74\\x70\\x75\\x74\\x20\\x53\\x50\\x49\\x20\\x69\\x73\\x20\\x62\\x75\\x73\\x79\",DEVNAME);ssSetErrorStatus(S,msg);return;}}z27fd94ac66[zeeea544396]=zc430a259a4;}else{z27fd94ac66[zeeea544396]=zc430a259a4;sg_wait_ns(z905251a4e4);}}}}\r\n#endif  \r\nstatic int32_t z58d7aabac0(uint32_t zc8abac822d,double z7e546ae0bf){double z2f029a8902=(0x4a4+220-0x580),ze9f1c9266b=(0x2aa+6656-0x1caa);int32_t out;switch(zc8abac822d){case(0x174b+2220-0x1ff7):z2f029a8902=13107.2;ze9f1c9266b=(0x3bc+8576-0x253c);break;case(0x15c0+1905-0x1d30):z2f029a8902=6553.6;ze9f1c9266b=(0x15dd+3376-0x230d);break;case(0x1653+3958-0x25c7):z2f029a8902=6553.6;ze9f1c9266b=32768;break;case(0xd84+4180-0x1dd5):z2f029a8902=3276.8;ze9f1c9266b=32768;break;case(0x7c3+3343-0x14ce):z2f029a8902=13107.2;ze9f1c9266b=32768;break;default:SG_PRINTF_INFO(\"\\x45\\x72\\x72\\x6f\\x72\\x3a\\x20\\x41\\x6e\\x61\\x6c\\x6f\\x67\\x20\\x4f\\x75\\x74\\x70\\x75\\x74\\x73\\x20\\x75\\x6e\\x6b\\x6e\\x6f\\x77\\x6e\\x20\\x76\\x6f\\x6c\\x74\\x61\\x67\\x65\");break;}out=(int32_t)((z7e546ae0bf*z2f029a8902)+ze9f1c9266b);if(out>z7935114df5){out=z7935114df5;}else if(out<(0x4f4+35-0x517)){out=(0x122b+4047-0x21fa);}return out;}\r\n#include \"sg_sfcn_glue.h\"   \r\n\r\n"},{"name":"sg_IO191_di_s.c","type":"source","group":"interface","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw/../../../.speedgoat/speedgoatlib/R2023a/9.6.1.1_4/sg_blocks/analog","tag":"","groupDisplay":"Interface files","code":"// Copyright 2006-2023 Speedgoat GmbH\r\n\r\n#define S_FUNCTION_LEVEL    (0x490+2482-0xe40)\r\n#undef S_FUNCTION_NAME\r\n#define S_FUNCTION_NAME     sg_IO191_di_s\r\n#include \"sg_IO191.h\"\r\n#ifndef MATLAB_MEX_FILE\r\n#include \"sg_printf.h\"\r\n#include \"sg_common.h\"\r\nvoid readPciBar(sg_PCIDevice*z7c46aa329e,int16_t bus,int16_t slot,int16_t z1e0fd5210f);\r\n#else\r\n#include \"mex.h\"\r\n#endif\r\n#include \"sg_callback.h\"\r\n#define ze13f49a01f           ssGetSFcnParam(S, (0x1759+2617-0x2192))\r\n#define z3832b85a32           ssGetSFcnParam(S, (0x5f8+3193-0x1270))\r\n#define z702a26a5e9                ssGetSFcnParam(S, (0x2c5+4208-0x1333))\r\n#define zb18e38a301           ssGetSFcnParam(S, (0xa61+4466-0x1bd0))\r\n#define zdf24515981                           ((0x16f8+3286-0x23ca))\r\n#define z2e6483d505              ((0x26a+8085-0x21ff))\r\n#define zc5ce4cb81a              ((0x11f5+4924-0x2531))\r\n#define z0194338df7         ((0x3c2+703-0x681))\r\n#define z2b17e2ee3b              ((0x147c+2948-0x1fff))\r\nstatic char msg[z71934bf57c];static void mdlInitializeSizes(SimStruct*S){uint16_t i;ssSetNumSFcnParams(S,zdf24515981);if(ssGetNumSFcnParams(S)!=ssGetSFcnParamsCount(S)){sprintf(msg,\"\\x57\\x72\\x6f\\x6e\\x67\\x20\\x6e\\x75\\x6d\\x62\\x65\\x72\\x20\\x6f\\x66\\x20\\x69\\x6e\\x70\\x75\\x74\\x20\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x20\\x70\\x61\\x73\\x73\\x65\\x64\\x2e\" \"\\n\" \"\\x25\\x64\\x20\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x20\\x61\\x72\\x65\\x20\\x65\\x78\\x70\\x65\\x63\\x74\\x65\\x64\" \"\\n\",zdf24515981);ssSetErrorStatus(S,msg);return;}ssSetNumContStates(S,(0xc7b+5592-0x2253));ssSetNumDiscStates(S,(0x1185+3229-0x1e22));if(!ssSetNumInputPorts(S,(0xb62+481-0xd43)))return;if(!ssSetNumOutputPorts(S,(int)mxGetN(zb18e38a301)))return;for(i=(0x1d13+145-0x1da4);i<(int)mxGetN(zb18e38a301);i++){ssSetOutputPortWidth(S,i,(0x486+5466-0x19df));ssSetOutputPortDataType(S,(0x56c+6929-0x207d),SS_DOUBLE);}ssSetNumSampleTimes(S,(0x1a08+2901-0x255c));ssSetNumRWork(S,zc5ce4cb81a);ssSetNumIWork(S,z2e6483d505);ssSetNumPWork(S,z2b17e2ee3b);ssSetNumModes(S,(0x1aad+2738-0x255f));ssSetNumNonsampledZCs(S,(0x1482+3272-0x214a));for(i=(0xd05+5164-0x2131);i<zdf24515981;i++){ssSetSFcnParamTunable(S,i,(0x12db+3246-0x1f89));}ssSetOptions(S,SS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME|SS_OPTION_EXCEPTION_FREE_CODE|SS_OPTION_RUNTIME_EXCEPTION_FREE_CODE);}static void mdlInitializeSampleTimes(SimStruct*S){if(mxGetPr(z3832b85a32)[(0x2cd+619-0x538)]==-1.0){ssSetSampleTime(S,(0x136d+3208-0x1ff5),INHERITED_SAMPLE_TIME);ssSetOffsetTime(S,(0x19a0+2894-0x24ee),FIXED_IN_MINOR_STEP_OFFSET);}else{ssSetSampleTime(S,(0x574+6180-0x1d98),mxGetPr(z3832b85a32)[(0x662+3656-0x14aa)]);ssSetOffsetTime(S,(0xbd9+2070-0x13ef),0.0);}ssSetModelReferenceSampleTimeDefaultInheritance(S);}\r\n#ifndef MATLAB_MEX_FILE\r\nstatic void sg_ModelLoad(SimStruct*S){}static void sg_ModelStart(SimStruct*S){sg_PCIDevice zeccbadd9b3;uint32_t bus,slot,za0d38ae598;volatile uint32_t*z27fd94ac66;if(mxGetN(z702a26a5e9)==(0xb62+5554-0x2113)){bus=(0x10ed+5301-0x25a2);slot=(uint32_t)mxGetPr(z702a26a5e9)[(0x874+6135-0x206b)];}else{bus=(uint32_t)mxGetPr(z702a26a5e9)[(0xadd+5988-0x2241)];slot=(uint32_t)mxGetPr(z702a26a5e9)[(0x8cd+1253-0xdb1)];}za0d38ae598=((uint32_t)mxGetPr(ze13f49a01f)[(0x1749+1291-0x1c54)]);if(sg_findPciDevice(&zeccbadd9b3,DEVNAME,VENDORID,za1afbacc4a,z78f5b4c5a6,z2bc00458b9,za0d38ae598,bus,slot)!=(0xf55+4351-0x2054)){if(sg_findPciDevice(&zeccbadd9b3,DEVNAME,VENDORID,zb765876dc5,z44a525e63d,za64fcbac7d,za0d38ae598,bus,slot)!=(0x594+130-0x616)){ssSetErrorStatus(S,pSgErrorStr);return;}}\r\n#ifdef _MSC_BUILD\r\nreadPciBar(&zeccbadd9b3,zeccbadd9b3.bus,zeccbadd9b3.slot,(0x1252+4672-0x2492));\r\n#endif\r\nz27fd94ac66=(volatile uint32_t*)sg_mapMemory(&zeccbadd9b3,(0x189+4706-0x13e9));ssSetPWorkValue(S,z0194338df7,(uint32_t*)z27fd94ac66);}static void sg_ModelStep(SimStruct*S){volatile uint32_t*za42cf7dd4a=ssGetPWorkValue(S,z0194338df7);uint32_t i,input,z4e3026977c;double*y;input=za42cf7dd4a[z52eac5d033];for(i=(0x180b+74-0x1855);i<(uint32_t)mxGetN(zb18e38a301);i++){z4e3026977c=(uint32_t)mxGetPr(zb18e38a301)[i]-(0x2c4+612-0x527);y=ssGetOutputPortSignal(S,i);if(input&((0x2149+672-0x23e8)<<z4e3026977c)){y[(0x1c4c+1042-0x205e)]=(0x60f+1538-0xc10);}else{y[(0xcf3+2372-0x1637)]=(0xc11+4873-0x1f1a);}}}static void sg_ModelStop(SimStruct*S){}\r\n#endif  \r\n#include \"sg_sfcn_glue.h\"   \r\n\r\n"},{"name":"sg_IO191_do_s.c","type":"source","group":"interface","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw/../../../.speedgoat/speedgoatlib/R2023a/9.6.1.1_4/sg_blocks/analog","tag":"","groupDisplay":"Interface files","code":"// Copyright 2006-2023 Speedgoat GmbH\r\n\r\n#define S_FUNCTION_LEVEL    (0x5bf+2361-0xef6)\r\n#undef S_FUNCTION_NAME\r\n#define S_FUNCTION_NAME     sg_IO191_do_s\r\n#include \"sg_IO191.h\"\r\n#ifndef MATLAB_MEX_FILE\r\n#include \"sg_printf.h\"\r\n#include \"sg_common.h\"\r\nvoid readPciBar(sg_PCIDevice*z7c46aa329e,int16_t bus,int16_t slot,int16_t z1e0fd5210f);\r\n#else\r\n#include \"mex.h\"\r\n#endif\r\n#include \"sg_callback.h\"\r\n#define ze13f49a01f           ssGetSFcnParam(S, (0x13e0+4526-0x258e))\r\n#define z3832b85a32           ssGetSFcnParam(S, (0x182+5115-0x157c))\r\n#define z702a26a5e9                ssGetSFcnParam(S, (0xc01+464-0xdcf))\r\n#define z5bc3ce0d50           ssGetSFcnParam(S, (0x776+1601-0xdb4))\r\n#define z2d8f240c11           ssGetSFcnParam(S, (0x1772+625-0x19df))\r\n#define z1f9bebb47b             ssGetSFcnParam(S, (0x1683+2315-0x1f89))\r\n#define zdf24515981                           ((0xf52+4685-0x2199))\r\n#define z2e6483d505              ((0x9a8+3518-0x1766))\r\n#define zc5ce4cb81a              ((0x1263+4888-0x257b))\r\n#define z0194338df7         ((0x1786+2885-0x22cb))\r\n#define z2b17e2ee3b              ((0x17e9+3860-0x26fc))\r\n#define THRESHOLD               0.5\r\nstatic char msg[z71934bf57c];static void mdlInitializeSizes(SimStruct*S){uint16_t i;ssSetNumSFcnParams(S,zdf24515981);if(ssGetNumSFcnParams(S)!=ssGetSFcnParamsCount(S)){sprintf(msg,\"\\x57\\x72\\x6f\\x6e\\x67\\x20\\x6e\\x75\\x6d\\x62\\x65\\x72\\x20\\x6f\\x66\\x20\\x69\\x6e\\x70\\x75\\x74\\x20\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x20\\x70\\x61\\x73\\x73\\x65\\x64\\x2e\" \"\\n\" \"\\x25\\x64\\x20\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x20\\x61\\x72\\x65\\x20\\x65\\x78\\x70\\x65\\x63\\x74\\x65\\x64\" \"\\n\",zdf24515981);ssSetErrorStatus(S,msg);return;}ssSetNumContStates(S,(0x140a+1006-0x17f8));ssSetNumDiscStates(S,(0x1616+685-0x18c3));if(!ssSetNumOutputPorts(S,(0x13da+1201-0x188b)))return;if(!ssSetNumInputPorts(S,(int)mxGetN(z5bc3ce0d50)))return;for(i=(0x46b+7087-0x201a);i<(int)mxGetN(z5bc3ce0d50);i++){ssSetInputPortWidth(S,i,(0xe05+6052-0x25a8));ssSetInputPortDirectFeedThrough(S,i,(0xed2+5455-0x2420));ssSetInputPortRequiredContiguous(S,i,(0x12af+3337-0x1fb7));}ssSetNumSampleTimes(S,(0x1528+613-0x178c));ssSetNumRWork(S,zc5ce4cb81a);ssSetNumIWork(S,z2e6483d505);ssSetNumPWork(S,z2b17e2ee3b);ssSetNumModes(S,(0x4cd+6065-0x1c7e));ssSetNumNonsampledZCs(S,(0x117a+4372-0x228e));for(i=(0xf68+410-0x1102);i<zdf24515981;i++){ssSetSFcnParamTunable(S,i,(0x3d8+8140-0x23a4));}ssSetOptions(S,SS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME|SS_OPTION_EXCEPTION_FREE_CODE|SS_OPTION_RUNTIME_EXCEPTION_FREE_CODE);}static void mdlInitializeSampleTimes(SimStruct*S){if(mxGetPr(z3832b85a32)[(0x9fa+5271-0x1e91)]==-1.0){ssSetSampleTime(S,(0x11bd+334-0x130b),INHERITED_SAMPLE_TIME);ssSetOffsetTime(S,(0x1899+3649-0x26da),FIXED_IN_MINOR_STEP_OFFSET);}else{ssSetSampleTime(S,(0x136d+1483-0x1938),mxGetPr(z3832b85a32)[(0xbe9+1888-0x1349)]);ssSetOffsetTime(S,(0x46+6698-0x1a70),0.0);}ssSetModelReferenceSampleTimeDefaultInheritance(S);}\r\n#ifndef MATLAB_MEX_FILE\r\nstatic void sg_ModelLoad(SimStruct*S){}static void sg_ModelStart(SimStruct*S){sg_PCIDevice zeccbadd9b3;uint32_t zf91d71c6d9=(uint32_t)mxGetN(z5bc3ce0d50);volatile uint32_t*z27fd94ac66;uint32_t bus,slot,za0d38ae598,zcb341ffb0e,i;if(mxGetN(z702a26a5e9)==(0x9d9+408-0xb70)){bus=(0x149+2546-0xb3b);slot=(uint32_t)mxGetPr(z702a26a5e9)[(0x140a+3821-0x22f7)];}else{bus=(uint32_t)mxGetPr(z702a26a5e9)[(0x7c+6885-0x1b61)];slot=(uint32_t)mxGetPr(z702a26a5e9)[(0x3d3+2043-0xbcd)];}za0d38ae598=((uint32_t)mxGetPr(ze13f49a01f)[(0x1799+3688-0x2601)]);if(sg_findPciDevice(&zeccbadd9b3,DEVNAME,VENDORID,za1afbacc4a,z78f5b4c5a6,z2bc00458b9,za0d38ae598,bus,slot)!=(0x662+3015-0x1229)){if(sg_findPciDevice(&zeccbadd9b3,DEVNAME,VENDORID,zb765876dc5,z44a525e63d,za64fcbac7d,za0d38ae598,bus,slot)!=(0x69c+69-0x6e1)){ssSetErrorStatus(S,pSgErrorStr);return;}}\r\n#ifdef _MSC_BUILD\r\nreadPciBar(&zeccbadd9b3,zeccbadd9b3.bus,zeccbadd9b3.slot,(0xe31+1798-0x1537));\r\n#endif\r\nz27fd94ac66=(volatile uint32_t*)sg_mapMemory(&zeccbadd9b3,(0xd58+5538-0x22f8));ssSetPWorkValue(S,z0194338df7,(uint32_t*)z27fd94ac66);zcb341ffb0e=z27fd94ac66[z52eac5d033];for(i=(0xb41+4562-0x1d13);i<zf91d71c6d9;i++){if((int)mxGetPr(z2d8f240c11)[i]>THRESHOLD){zcb341ffb0e|=((0xda2+5684-0x23d5)<<((uint32_t)mxGetPr(z5bc3ce0d50)[i]-(0x157d+4050-0x254e)));}else{zcb341ffb0e&=~((0x2d6+837-0x61a)<<((uint32_t)mxGetPr(z5bc3ce0d50)[i]-(0x153f+221-0x161b)));}}z27fd94ac66[z52eac5d033]=zcb341ffb0e;}static void sg_ModelStep(SimStruct*S){volatile uint32_t*z27fd94ac66=ssGetPWorkValue(S,z0194338df7);uint16_t z344fcf0ef3;uint32_t i,zcb341ffb0e;double output;double*zc7fdaf6331;z344fcf0ef3=(uint16_t)mxGetN(z5bc3ce0d50);zcb341ffb0e=(0x4fa+3413-0x124f);for(i=(0x36+8129-0x1ff7);i<z344fcf0ef3;i++){zc7fdaf6331=(double*)ssGetInputPortRealSignal(S,i);output=zc7fdaf6331[(0x19e1+2812-0x24dd)];if(output>THRESHOLD){zcb341ffb0e|=((0x671+3271-0x1337)<<((uint16_t)mxGetPr(z5bc3ce0d50)[i]-(0xab+1594-0x6e4)));}}z27fd94ac66[z52eac5d033]=zcb341ffb0e;}static void sg_ModelStop(SimStruct*S){volatile uint32_t*z27fd94ac66=ssGetPWorkValue(S,z0194338df7);uint32_t zf91d71c6d9=(uint32_t)mxGetN(z5bc3ce0d50);uint32_t i,zcb341ffb0e;zcb341ffb0e=z27fd94ac66[z52eac5d033];for(i=(0x651+2318-0xf5f);i<zf91d71c6d9;i++){if((int)mxGetPr(z1f9bebb47b)[i]==(0x127d+4999-0x2603)){if((int)mxGetPr(z2d8f240c11)[i]>THRESHOLD){zcb341ffb0e|=((0x11fa+1665-0x187a)<<((uint32_t)mxGetPr(z5bc3ce0d50)[i]-(0x996+7480-0x26cd)));}else{zcb341ffb0e&=~((0x1a70+576-0x1caf)<<((uint32_t)mxGetPr(z5bc3ce0d50)[i]-(0x85f+5265-0x1cef)));}}}z27fd94ac66[z52eac5d033]=zcb341ffb0e;}\r\n#endif  \r\n#include \"sg_sfcn_glue.h\"   \r\n\r\n"},{"name":"sg_IO191_setup_s.c","type":"source","group":"interface","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw/../../../.speedgoat/speedgoatlib/R2023a/9.6.1.1_4/sg_blocks/analog","tag":"","groupDisplay":"Interface files","code":"// Copyright 2006-2023 Speedgoat GmbH\r\n\r\n#define S_FUNCTION_LEVEL    (0x10cb+2737-0x1b7a)\r\n#undef S_FUNCTION_NAME\r\n#define S_FUNCTION_NAME     sg_IO191_setup_s\r\n#include \"sg_IO191.h\"\r\n#ifndef MATLAB_MEX_FILE\r\n#include \"sg_printf.h\"\r\n#include \"sg_common.h\"\r\nvoid readPciBar(sg_PCIDevice*z7c46aa329e,int16_t bus,int16_t slot,int16_t z1e0fd5210f);\r\n#else\r\n#include \"mex.h\"\r\n#endif\r\n#include \"sg_callback.h\"\r\n#define z702a26a5e9                ssGetSFcnParam(S, (0x154+6099-0x1927))\r\n#define ze13f49a01f           ssGetSFcnParam(S, (0xaa2+2017-0x1282))\r\n#define z1e0b67709d       ssGetSFcnParam(S, (0x7b7+749-0xaa2))\r\n#define z3644586f49         ssGetSFcnParam(S, (0x1a0c+2186-0x2293))\r\n#define z8d5c288b32         ssGetSFcnParam(S, (0x42b+217-0x500))\r\n#define z9876548c58         ssGetSFcnParam(S, (0xff7+3171-0x1c55))\r\n#define zfa79626a1f        ssGetSFcnParam(S, (0xb19+229-0xbf8))\r\n#define z832477988f        ssGetSFcnParam(S, (0xcbc+1663-0x1334))\r\n#define z4526a8632b         ssGetSFcnParam(S, (0xc27+2227-0x14d2))\r\n#define zdf24515981                           ((0xe83+6110-0x2658))\r\n#define z2e6483d505              ((0x1e94+1092-0x22d8))\r\n#define z8caad2a8e6              ((0x551+1754-0xc2b))\r\n#define z5bfe7a2613            ((0x1341+4557-0x250d))\r\n#define zc5ce4cb81a              ((0x1152+4077-0x213d))\r\n#define z0194338df7         ((0x841+6504-0x21a9))\r\n#define z2b17e2ee3b              ((0x1e5+7568-0x1f74))\r\nstatic char msg[z71934bf57c];static void mdlInitializeSizes(SimStruct*S){uint16_t i;ssSetNumSFcnParams(S,zdf24515981);if(ssGetNumSFcnParams(S)!=ssGetSFcnParamsCount(S)){sprintf(msg,\"\\x57\\x72\\x6f\\x6e\\x67\\x20\\x6e\\x75\\x6d\\x62\\x65\\x72\\x20\\x6f\\x66\\x20\\x69\\x6e\\x70\\x75\\x74\\x20\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x20\\x70\\x61\\x73\\x73\\x65\\x64\\x2e\" \"\\n\" \"\\x25\\x64\\x20\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x20\\x61\\x72\\x65\\x20\\x65\\x78\\x70\\x65\\x63\\x74\\x65\\x64\" \"\\n\",zdf24515981);ssSetErrorStatus(S,msg);return;}ssSetNumContStates(S,(0x2e0+9175-0x26b7));ssSetNumDiscStates(S,(0xa2b+4369-0x1b3c));if(!ssSetNumInputPorts(S,(0x2070+1166-0x24fe)))return;if(!ssSetNumOutputPorts(S,(0x46+573-0x283)))return;ssSetNumSampleTimes(S,(0x16a5+3548-0x2480));ssSetNumRWork(S,zc5ce4cb81a);ssSetNumIWork(S,z2e6483d505);ssSetNumPWork(S,z2b17e2ee3b);ssSetNumModes(S,(0xecd+231-0xfb4));ssSetNumNonsampledZCs(S,(0x147f+2175-0x1cfe));for(i=(0x8c2+6705-0x22f3);i<zdf24515981;i++){ssSetSFcnParamTunable(S,i,(0x72d+7595-0x24d8));}ssSetOptions(S,SS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME|SS_OPTION_EXCEPTION_FREE_CODE|SS_OPTION_RUNTIME_EXCEPTION_FREE_CODE|SS_OPTION_PLACE_ASAP);}static void mdlInitializeSampleTimes(SimStruct*S){ssSetSampleTime(S,(0x21b6+431-0x2365),INHERITED_SAMPLE_TIME);ssSetOffsetTime(S,(0xc59+5933-0x2386),FIXED_IN_MINOR_STEP_OFFSET);ssSetModelReferenceSampleTimeDefaultInheritance(S);}\r\n#ifndef MATLAB_MEX_FILE\r\nstatic void sg_ModelLoad(SimStruct*S){}static void sg_ModelStart(SimStruct*S){sg_PCIDevice zeccbadd9b3;uint32_t bus,slot,za0d38ae598,i;uint16_t z4e3026977c,z0e26ef1137;volatile uint32_t*z27fd94ac66;if(mxGetN(z702a26a5e9)==(0x2413+265-0x251b)){bus=(0x1286+3641-0x20bf);slot=(uint32_t)mxGetPr(z702a26a5e9)[(0xb13+5593-0x20ec)];}else{bus=(uint32_t)mxGetPr(z702a26a5e9)[(0x1ea3+159-0x1f42)];slot=(uint32_t)mxGetPr(z702a26a5e9)[(0x9dd+2573-0x13e9)];}za0d38ae598=((uint32_t)mxGetPr(ze13f49a01f)[(0xba+8255-0x20f9)]);if(sg_findPciDevice(&zeccbadd9b3,DEVNAME,VENDORID,za1afbacc4a,z78f5b4c5a6,z2bc00458b9,za0d38ae598,bus,slot)!=(0x1bed+1278-0x20eb)){if(sg_findPciDevice(&zeccbadd9b3,DEVNAME,VENDORID,zb765876dc5,z44a525e63d,za64fcbac7d,za0d38ae598,bus,slot)!=(0x160+861-0x4bd)){ssSetErrorStatus(S,pSgErrorStr);return;}}\r\n#ifdef _MSC_BUILD\r\nreadPciBar(&zeccbadd9b3,zeccbadd9b3.bus,zeccbadd9b3.slot,(0x3bb+8030-0x2319));\r\n#endif\r\nz27fd94ac66=(volatile uint32_t*)sg_mapMemory(&zeccbadd9b3,(0x1017+4953-0x236e));ssSetPWorkValue(S,z0194338df7,(uint32_t*)z27fd94ac66);SG_PRINTF_DEBUG(\"\\x25\\x73\\x3a\\x20\\x46\\x50\\x47\\x41\\x20\\x72\\x65\\x76\\x20\\x30\\x78\\x25\\x58\" \"\\n\",DEVNAME,z27fd94ac66[REVISION]);z0e26ef1137=(0x3d2+7874-0x2294);for(i=(0xf05+2232-0x17bd);i<(uint32_t)mxGetN(z4526a8632b);i++){z4e3026977c=(uint32_t)mxGetPr(z4526a8632b)[i];if(z4e3026977c==(0xdb5+5768-0x243c)){z0e26ef1137=(0x21f3+336-0x2342);}else{z0e26ef1137|=((0xf52+2401-0x18b2)<<(z4e3026977c+(0x145c+4654-0x2684)));}}z27fd94ac66[zef0a03cb9f]=z0e26ef1137;}static void sg_ModelStep(SimStruct*S){}static void sg_ModelStop(SimStruct*S){}\r\n#endif  \r\n#include \"sg_sfcn_glue.h\"   \r\n\r\n"},{"name":"main.cpp","type":"source","group":"legacy","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Other files","code":"/* Main generated for Simulink Real-Time model ATTN */\n#include <ModelInfo.hpp>\n#include <utilities.hpp>\n#include \"ATTN.h\"\n#include \"rte_ATTN_parameters.h\"\n\n/* Task descriptors */\nslrealtime::TaskInfo task_1( 0u, std::bind(ATTN_step), slrealtime::TaskInfo::PERIODIC, 0.001, 0, 40);\n\n/* Executable base address for XCP */\n#ifdef __linux__\nextern char __executable_start;\nstatic uintptr_t const base_address = reinterpret_cast<uintptr_t>(&__executable_start);\n#else\n/* Set 0 as placeholder, to be parsed later from /proc filesystem */\nstatic uintptr_t const base_address = 0;\n#endif\n\n/* Model descriptor */\nslrealtime::ModelInfo ATTN_Info =\n{\n    \"ATTN\",\n    ATTN_initialize,\n    ATTN_terminate,\n    []()->char const*& { return ATTN_M->errorStatus; },\n    []()->unsigned char& { return ATTN_M->Timing.stopRequestedFlag; },\n    { task_1 },\n    slrealtime::getSegmentVector()\n};\n\nint main(int argc, char *argv[]) {\n    slrealtime::BaseAddress::set(base_address);\n    return slrealtime::runModel(argc, argv, ATTN_Info);\n}\n"},{"name":"rt_matrx.c","type":"source","group":"legacy","path":"/usr/local/MATLAB/R2023a/rtw/c/src","tag":"","groupDisplay":"Other files","code":"/* File    : rt_matrx.c\n * Abstract:\n *      Implements stand alone matrix access and creation routines.\n *\tThere are two types of MATLAB objects which can be \"passed\" to\n *\tthe generated code, a 2D real matrix and a string. Strings are\n *\tpassed as 2D real matrices. The first two elements of an S-function\n *\tparameters are the row and column (m and n) dimensions respectively.\n *\tThese are followed by the matrix data.\n */\n\n\n\n/*\n * Copyright 1994-2022 The MathWorks, Inc.\n */\n\n/*==========*\n * Includes *\n *==========*/\n\n#if defined(MDL_REF_SIM_TGT)\n#undef MATLAB_MEX_FILE\n#endif\n\n#if defined(MATLAB_MEX_FILE)\n# error \"rt_matrix cannot be used within a mex file. It is for codegen only.\"\n#endif\n\n#include <string.h>    /* for strlen */\n#include \"rt_matrx.h\"\n\n#include <stddef.h> /* needed for size_t and NULL */\n#include <float.h>  /* needed for definition of eps */\n\n/*==========*\n * Typedefs *\n *==========*/\n\n#ifndef rt_typedefs_h\n#define rt_typedefs_h\n\n#if !defined(TYPEDEF_MX_ARRAY)\n# define TYPEDEF_MX_ARRAY\n  typedef real_T mxArray;\n#endif\n\ntypedef real_T mxChar;\n\n#if !defined(TMW_NAME_LENGTH_MAX)\n#define TMW_NAME_LENGTH_MAX 64\n#endif\n#define mxMAXNAM  TMW_NAME_LENGTH_MAX\t/* maximum name length */\n\ntypedef enum {\n    mxREAL,\n    mxCOMPLEX\n} mxComplexity;\n\n#endif /* rt_typedefs_h */\n\n/*==================*\n * Extern variables *\n *==================*/\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nextern real_T rtInf;\nextern real_T rtMinusInf;\nextern real_T rtNaN;\n\n#ifdef __cplusplus\n}\n#endif\n\n/*=======================================*\n * Defines for mx Routines and constants *\n *=======================================*/\n\n\n#define mxCalloc(n,size) \\\n        calloc(n,size)\n\n#define mxCreateCharArray(ndim, dims) \\\n        mxCreateNumericArray(ndim, dims, mxCHAR_CLASS);\n\n#define mxDestroyArray(pa) \\\n        if (pa) free(pa)\n\n/* NOTE: You cannot mxFree(mxGetPr(pa)) !!! */\n#define mxFree(ptr) \\\n        if(ptr)free(ptr)\n\n#define mxGetClassID(pa) \\\n        mxDOUBLE_CLASS\n\n/* NOTE: mxGetClassName(pa) returns \"double\" even on a character array */\n#define mxGetClassName(pa) \\\n        \"double\"\n\n#define mxGetData(pa) \\\n        ((void *)(&((pa)[2])))\n\n#define mxGetElementSize(pa) \\\n        (sizeof(real_T))\n\n#define mxGetInf() \\\n        rtInf\n\n#define mxGetM(pa) \\\n        ((size_t) ((pa)[0]))\n#define mxGetN(pa) \\\n        ((size_t) ((pa)[1]))\n\n#define mxGetNaN() \\\n        rtNaN\n\n#define mxGetNumberOfDimensions(pa) \\\n        (2)\n#define mxGetNumberOfElements(pa) \\\n        (mxGetM(pa)*mxGetN(pa))\n\n/* NOTE: mxGetPr() of an empty matrix does NOT return NULL */\n#define mxGetPr(pa) \\\n        ( &((pa)[2]) )\n\n/* NOTE: mxGetDoubles() of an empty matrix does NOT return NULL */\n#define mxGetDoubles(pa) \\\n        ( &((pa)[2]) )\n\n#define mxGetScalar(pa) \\\n        ((pa)[2])\n\n#define mxIsComplex(pa) \\\n        false\n\n#define mxIsDouble(pa) \\\n        true\n\n#define mxIsEmpty(pa) \\\n        (mxGetM(pa)==0 || mxGetN(pa)==0)\n\n#define mxIsFinite(r) \\\n        ((r)>rtMinusInf && (r)<rtInf)\n\n#define mxIsInf(r) \\\n        ((r)==rtInf || (r)==rtMinusInf)\n\n#define mxIsInt16(pa) \\\n        false\n\n#define mxIsInt32(pa) \\\n        false\n\n#define mxIsInt8(pa) \\\n        false\n\n#define mxIsLogical(pa) \\\n        false\n\n#define mxIsNumeric(pa) \\\n        true\n\n#define mxIsSingle(pa) \\\n        false\n\n#define mxIsSparse(pa) \\\n        false\n\n#define mxIsStruct(pa) \\\n        false\n\n#define mxIsUint16(pa) \\\n        false\n\n#define mxIsUint32(pa) \\\n        false\n\n#define mxIsUint8(pa) \\\n        false\n\n#define mxMalloc(n) \\\n        malloc(n)\n\n#define mxRealloc(p,n) \\\n        realloc(p,n)\n\n/*==============*\n * Local macros *\n *==============*/\n#define _mxSetM(pa,m) \\\n        (pa)[0] = ((int)(m))\n\n#define _mxSetN(pa,n) \\\n        (pa)[1] = ((int)(n))\n\n\n/*==========================*\n * Visible/extern functions *\n *=========================*/\n\n/* Function: mxCreateCharMatrixFromStrings ====================================\n * Abstract:\n *\tCreate a string array initialized to the strings in str.\n */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nmxArray *rt_mxCreateCharMatrixFromStrings(int_T m, const char_T **str)\n{\n    int_T nchars;\n    int_T i, n;\n    mxArray *pa;\n\n    n = 0;\n    for (i = 0; i < m; ++i) {\n\tnchars = (int_T)strlen(str[i]);\n\tif (nchars > n) {\n\t    n = nchars;\n\t}\n    }\n\n    pa = (mxArray *)malloc((m*n+2)*sizeof(real_T));\n    if(pa!=NULL) {\n\tmxChar *chars;\n\tint_T  j;\n\t_mxSetM(pa, m);\n\t_mxSetN(pa, n);\n\tchars = mxGetPr(pa);\n\tfor (j = 0; j < m; ++j) {\n\t    const char_T *src  = str[j];\n\t    mxChar *dest = chars + j;\n\n\t    nchars = (int_T)strlen(src);\n\t    i = nchars;\n\t    while (i--) {\n\t\t*dest = *src++;\n\t\t dest += m;\n\t    }\n\t    i = n - nchars;\n\t    while (i--) {\n\t\t*dest = 0.0;\n\t\tdest += m;\n\t    }\n\t}\n    }\n    return pa;\n} /* end mxCreateCharMatrixFromStrings */\n\n#ifdef __cplusplus\n}\n#endif\n\n/* Function: mxCreateString ===================================================\n * Abstract:\n *\tCreate a 1-by-n string array initialized to null terminated string\n *\twhere n is the length of the string.\n */\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nmxArray *rt_mxCreateString(const char *str)\n{\n    int_T   len = (int_T)strlen(str);\n\n    mxArray *pa = (mxArray *)malloc((len+2)*sizeof(real_T));\n\n    if(pa!=NULL) {\n\treal_T *pr;\n\tconst unsigned char *ustr_ptr = (const unsigned char *) str;\n\n\t_mxSetM(pa, 1);\n\t_mxSetN(pa, len);\n\tpr = mxGetPr(pa);\n\twhile (len--) {\n            *pr++ = (real_T)*ustr_ptr++;\n        }\n    }\n    return(pa);\n\n} /* end mxCreateString */\n\n#ifdef __cplusplus\n}\n#endif\n\n/* Function: mxCreateDoubleMatrix =============================================\n * Abstract:\n *\tCreate a two-dimensional array to hold real_T data,\n *\tinitialize each data element to 0.\n */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nmxArray *rt_mxCreateDoubleMatrix(int m, int n, mxComplexity flag)\n{\n    if (flag == mxREAL) {\n        mxArray *pa = (mxArray *)calloc(m*n+2, sizeof(real_T));\n        if(pa!=NULL) {\n            _mxSetM(pa, m);\n            _mxSetN(pa, n);\n        }\n        return(pa);\n    } else {\n        return(NULL);\n    }\n\n} /* end mxCreateDoubleMatrix */\n\n#ifdef __cplusplus\n}\n#endif\n\n/* Function: mxCreateNumericArray =============================================\n * Abstract:\n *\tCreate a numeric array and initialize all its data elements to 0.\n */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nmxArray *rt_mxCreateNumericArray(int_T ndims, const mwSize *dims, \n                                        mxClassID classid, mxComplexity flag)\n{\n    if (ndims == 2 && classid==mxDOUBLE_CLASS) {\n        return(rt_mxCreateDoubleMatrix((int)(dims[0]), (int)(dims[1]), flag));\n    } else {\n        return(NULL);\n    }\n\n} /* end mxCreateNumericArray */\n\n#ifdef __cplusplus\n}\n#endif\n\n/* Function: mxDuplicateArray =================================================\n * Abstract:\n *\tMake a deep copy of an array, return a pointer to the copy.\n */\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\nmxArray *rt_mxDuplicateArray(const mxArray *pa)\n{\n\n    size_t   nbytes = (mxGetNumberOfElements(pa)+2)*mxGetElementSize(pa);\n    mxArray *pcopy = (mxArray *)malloc(nbytes);\n\n    if (pcopy!=NULL) {\n\t(void)memcpy(pcopy, pa, nbytes);\n    }\n    return(pcopy);\n\n} /* end mxDuplicateArray */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* Function: mxGetDimensions ==================================================\n * Abstract:\n *\tGet pointer to dimension array\n */\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\nconst mwSize *rt_mxGetDimensions(const mxArray *pa)\n{\n    static mwSize dims[2];\n    dims[0] = mxGetM(pa);\n    dims[1] = mxGetN(pa);\n    return dims;\n} /* end mxGetDimensions */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* Function: mxGetEps =========================================================\n * Abstract:\n *\tReturn eps, the difference between 1.0 and the least value\n *\tgreater than 1.0 that is representable as a real_T.\n */\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\nreal_T rt_mxGetEps(void)\n{\n    return (sizeof(double)==sizeof(real_T)) ? DBL_EPSILON : FLT_EPSILON;\n}\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* Function: mxGetString ======================================================\n * Abstract:\n *\tConverts a string array to a C-style string.\n */\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\nint_T rt_mxGetString(const mxArray *pa, char_T *buf, int_T buflen)\n{\n    int_T        nchars;\n    const real_T *pr;\n    char_T       *pc;\n    int_T        truncate = 0;\n\n    nchars = (int_T)mxGetNumberOfElements(pa);\n    if (nchars >= buflen) {\n\t/* leave room for null byte */\n\tnchars = buflen - 1;\n\ttruncate = 1;\n    }\n    pc = buf;\n    pr = mxGetPr(pa);\n    while (nchars--) {\n\t*pc++ = (char) (*pr++ + .5);\n    }\n    *pc = '\\0';\n    return truncate;\n} /* end mxGetString */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n#define mxCreateCharMatrixFromStrings(m, str) \\\n        rt_mxCreateCharMatrixFromStrings(m, str)\n\n#define mxCreateString(str) \\\n        rt_mxCreateString(str) \n\n#define mxCreateDoubleMatrix(m, n, flag) \\\n        rt_mxCreateDoubleMatrix(m, n, flag)\n\n#define mxCreateNumericArray(ndims, dims, classid, flag) \\\n        rt_mxCreateNumericArray(ndims, dims, classid, flag)\n\n#define mxDuplicateArray(pa) \\\n        rt_mxDuplicateArray(pa)\n\n#define mxGetDimensions(pa) \\\n        rt_mxGetDimensions(pa)\n\n#define mxGetEps() \\\n        rt_mxGetEps()\n\n#define mxGetString(pa, buf, buflen) \\\n        rt_mxGetString(pa, buf, buflen)\n\n/*=========================*\n * Unsupported mx Routines *\n *=========================*/\n\n#define mxCalcSingleSubscript(pa,nsubs,subs) \\\n        mxCalcSingleSubscript_is_not_supported_in_Simulink_Coder\n\n#define mxCreateCellArray(ndim,dims) \\\n        mxCreateCellArray_is_not_supported_in_Simulink_Coder\n\n#define mxCreateCellMatrix(m,n) \\\n        mxCreateCellMatrix_is_not_supported_in_Simulink_Coder\n\n#define mxCreateSparse(pm,pn,pnzmax,pcmplx_flg) \\\n        mxCreateSparse_is_not_supported_in_Simulink_Coder\n\n#define mxCreateStructArray(ndim,dims,nfields,fieldnames) \\\n        mxCreateStructArray_is_not_supported_in_Simulink_Coder\n\n#define mxCreateStructMatrix(m,n,nfields,fieldnames) \\\n        mxCreateStructMatrix_is_not_supported_in_Simulink_Coder\n\n#define mxGetCell(pa,i) \\\n        mxGetCell_is_not_supported_in_Simulink_Coder\n\n#define mxGetField(pa,i,fieldname) \\\n        mxGetField_is_not_supported_in_Simulink_Coder\n\n#define mxGetFieldByNumber(s,i,fieldnum) \\\n        mxGetFieldByNumber_is_not_supported_in_Simulink_Coder\n\n#define mxGetFieldNameByNumber(pa,n) \\\n        mxGetFieldNameByNumber_is_not_supported_in_Simulink_Coder\n\n#define mxGetFieldNumber(pa,fieldname) \\\n        mxGetFieldNumber_is_not_supported_in_Simulink_Coder\n\n#define mxGetImagData(pa) \\\n        mxGetImagData_is_not_supported_in_Simulink_Coder\n\n#define mxGetIr(ppa) \\\n        mxGetIr_is_not_supported_in_Simulink_Coder\n\n#define mxGetJc(ppa) \\\n        mxGetJc_is_not_supported_in_Simulink_Coder\n\n#define mxGetNumberOfFields(pa) \\\n        mxGetNumberOfFields_is_not_supported_in_Simulink_Coder\n\n#define mxGetNzmax(pa) \\\n        mxGetNzmax_is_not_supported_in_Simulink_Coder\n\n#define mxGetPi(pa) \\\n        mxGetPi_is_not_supported_in_Simulink_Coder\n\n#define mxIsFromGlobalWS(pa) \\\n        mxIsFromGlobalWS_is_not_supported_in_Simulink_Coder\n\n#define mxIsNaN(r) \\\n        mxIsNaN_is_not_supported_in_Simulink_Coder\n\n#define mxIsChar(pa) \\\n        mxIsChar_is_not_supported_in_Simulink_Coder\n\n#define mxIsClass(pa,class) \\\n        mxIsClass_is_not_supported_in_Simulink_Coder\n\n#define mxIsCell(pa) \\\n        mxIsCell_is_not_supported_in_Simulink_Coder\n\n#define mxSetCell(pa,i,value) \\\n        mxSetCell_is_not_supported_in_Simulink_Coder\n\n#define mxSetClassName(pa,classname) \\\n        mxSetClassName_is_not_supported_in_Simulink_Coder\n\n#define mxSetData(pa,pr) \\\n        mxSetData_is_not_supported_in_Simulink_Coder\n\n#define mxSetDimensions(pa, size, ndims) \\\n        mxSetDimensions_is_not_supported_in_Simulink_Coder\n\n#define mxSetField(pa,i,fieldname,value) \\\n        mxSetField_is_not_supported_in_Simulink_Coder\n\n#define mxSetFieldByNumber(pa, index, fieldnum, value) \\\n        mxSetFieldByNumber_is_not_supported_in_Simulink_Coder\n\n#define mxSetFromGlobalWS(pa,global) \\\n        mxSetFromGlobalWS_is_not_supported_in_Simulink_Coder\n\n#define mxSetImagData(pa,pv) \\\n        mxSetImagData_is_not_supported_in_Simulink_Coder\n\n#define mxSetIr(ppa,ir) \\\n        mxSetIr_is_not_supported_in_Simulink_Coder\n\n#define mxSetJc(ppa,jc) \\\n        mxSetJc_is_not_supported_in_Simulink_Coder\n\n#define mxSetM(pa, m) \\\n        mxSetM_is_not_supported_in_Simulink_Coder\n\n#define mxSetN(pa, m) \\\n        mxSetN_is_not_supported_in_Simulink_Coder\n\n#define mxSetPr(pa,pr) \\\n        mxSetPr_is_not_supported_in_Simulink_Coder\n\n#define mxSetNzmax(pa,nzmax) \\\n        mxSetNzmax_is_not_supported_in_Simulink_Coder\n\n#define mxSetPi(pa,pv) \\\n        mxSetPi_is_not_supported_in_Simulink_Coder\n\n\n\n/*==========================*\n * Unsupported mex routines *\n *==========================*/\n\n#define mexPrintAssertion(test,fname,linenum,message) \\\n        mexPrintAssertion_is_not_supported_by_Simulink_Coder\n\n#define mexEvalString(str) \\\n        mexEvalString_is_not_supported_by_Simulink_Coder\n\n#define mexErrMsgTxt(str) \\\n        mexErrMsgTxt_is_not_supported_by_Simulink_Coder\n\n#define mexWarnMsgTxt(warning_msg) \\\n        mexWarnMsgTxt_is_not_supported_by_Simulink_Coder\n\n#define mexPrintf \\\n        mexPrintf_is_not_supported_by_Simulink_Coder\n\n#define mexMakeArrayPersistent(pa) \\\n        mexMakeArrayPersistent_is_not_supported_by_Simulink_Coder\n\n#define mexMakeMemoryPersistent(ptr) \\\n        mexMakeMemoryPersistent_is_not_supported_by_Simulink_Coder\n\n#define mexLock() \\\n        mexLock_is_not_supported_by_Simulink_Coder\n\n#define mexUnlock() \\\n        mexUnlock_is_not_supported_by_Simulink_Coder\n\n#define mexFunctionName() \\\n        mexFunctionName_is_not_supported_by_Simulink_Coder\n\n#define mexIsLocked() \\\n        mexIsLocked_is_not_supported_by_Simulink_Coder\n\n#define mexGetFunctionHandle() \\\n        mexGetFunctionHandle_is_not_supported_by_Simulink_Coder\n\n#define mexCallMATLABFunction() \\\n        mexCallMATLABFunction_is_not_supported_by_Simulink_Coder\n\n#define mexRegisterFunction() \\\n        mexRegisterFunction_is_not_supported_by_Simulink_Coder\n\n#define mexSet(handle,property,value) \\\n        mexSet_is_not_supported_by_Simulink_Coder\n\n#define mexGet(handle,property) \\\n        mexGet_is_not_supported_by_Simulink_Coder\n\n#define mexCallMATLAB(nlhs,plhs,nrhs,prhs,fcn) \\\n        mexCallMATLAB_is_not_supported_by_Simulink_Coder\n\n#define mexSetTrapFlag(flag) \\\n        mexSetTrapFlag_is_not_supported_by_Simulink_Coder\n\n#define mexUnlink(a) \\\n        mexUnlink_is_not_supported_by_Simulink_Coderw\n\n#define mexSubsAssign(plhs,sub,nsubs,prhs) \\\n        mexSubsAssign_is_not_supported_by_Simulink_Coder\n\n#define mexSubsReference(prhs,subs,nsubs) \\\n        mexSubsReference_is_not_supported_by_Simulink_Coder\n\n#define mexPrintAssertion(test,fname,linenum,message) \\\n        mexPrintAssertion_is_not_supported_by_Simulink_Coder\n\n#define mexAddFlops(count) \\\n        mexAddFlops_is_not_supported_by_Simulink_Coder\n\n#define mexIsGlobal(pa) \\\n        mexIsGlobal_is_not_supported_by_Simulink_Coder\n\n#define mexAtExit(fcn) \\\n        mexAtExit_is_not_supported_by_Simulink_Coder\n\n/* [EOF] rt_matrx.c */\n"},{"name":"rt_printf.c","type":"source","group":"legacy","path":"/usr/local/MATLAB/R2023a/rtw/c/src","tag":"","groupDisplay":"Other files","code":"/* Copyright 1994-2015 The MathWorks, Inc.\n *\n * File: rt_printf.c\n *\n * Abstract:\n *      Stub I/O printf facility for systems which don't have stdio.\n *\n */\n\n\n\n/* Function: rtPrintfNoOp ======================================================\n * Abstract:\n *      Maps ssPrintf to rtPrintfNoOp if HAVESTDIO is not defined (see\n *      simstruct.h\n */\nint rtPrintfNoOp(const char *fmt, ...)\n{\n    /* do nothing */\n    return(fmt == (const char *)0); /* use fmt to quiet unused var warning */\n}\n\n\n/* [eof] rt_printf.c */\n"},{"name":"rte_ATTN_parameters.cpp","type":"source","group":"legacy","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Other files","code":"#include \"rte_ATTN_parameters.h\"\n#include \"ATTN.h\"\n#include \"ATTN_cal.h\"\n\nextern ATTN_cal_type ATTN_cal_impl;\nnamespace slrealtime\n{\n  /* Description of SEGMENTS */\n  SegmentVector segmentInfo {\n    { (void*)&ATTN_cal_impl, (void**)&ATTN_cal, sizeof(ATTN_cal_type), 2 }\n  };\n\n  SegmentVector &getSegmentVector(void)\n  {\n    return segmentInfo;\n  }\n}                                      // slrealtime\n"},{"name":"rte_ATTN_parameters.h","type":"header","group":"other","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef _RTE_ATTN_PARAMETERS_H\n#define _RTE_ATTN_PARAMETERS_H\n#include \"rtwtypes.h\"\n#include \"SegmentInfo.hpp\"\n\nnamespace slrealtime\n{\n  SegmentVector &getSegmentVector(void);\n}                                      // slrealtime\n\n#endif\n"},{"name":"slrealtime_datatype_ground.cpp","type":"source","group":"legacy","path":"/home/electro/Code_Repo/n-CORTEx/ATTN_slrealtime_rtw","tag":"","groupDisplay":"Other files","code":"#include \"slrtdatatypes.h\"\n\nconst serialfifoptr serialfifoground = { 0, 0, 0 };\n\nconst bcmsglist1553 bcmsg1553ground = { 0, 0, 0, 0 };\n\nconst bcstatus1553 bcstatground = { 0, 0, 0, 0, 0, 0 };\n\nconst bmmsglist1553 bmmsg1553ground = { 0, 0, 0, 0 };\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};